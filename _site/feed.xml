<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Exceptionless Blog</title>
  <subtitle>All things Exceptionless, exceptions, stacks, and code.</subtitle>
  <link href="https://exceptionless.com/feed" rel="self"/>
  <link href="https://exceptionless.com/news"/>
  <updated>2020-09-24T09:54:40-05:00</updated>
  <id>https://exceptionless.com/news</id>
  <author>
    <name>Exceptionless</name>
    <email>contact@exceptionless.com</email>
  </author>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2013-08-06-exceptionless-1-1-0-released/"/>
    <updated>2013-08-06T04:02:12-05:00</updated>
    <id>https://exceptionless.com/2013-08-06-exceptionless-1-1-0-released/</id>
    <content type="html">&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added ability to visually select a custom date range, giving you the ability to investigate spikes.&lt;/li&gt;
&lt;li&gt;Added ability to add reference links to error stacks.&lt;/li&gt;
&lt;li&gt;Added web hook and Zapier support.&lt;/li&gt;
&lt;li&gt;Added daily summary notification.&lt;/li&gt;
&lt;li&gt;Added ability to filter out hidden and 404 errors.&lt;/li&gt;
&lt;li&gt;Added ability to promote stacks to external services.&lt;/li&gt;
&lt;li&gt;Added ability to add reference links to stacks.&lt;/li&gt;
&lt;li&gt;Added ExceptionlessWcfHandleErrorAttribute to Exceptionless.Web package.&lt;/li&gt;
&lt;li&gt;Minor visual improvements and fixes for mobile and desktop layouts.&lt;/li&gt;
&lt;li&gt;Numerous bug fixes and other enhancements.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2013-08-06-introducing-exceptionless/"/>
    <updated>2013-08-06T04:10:29-05:00</updated>
    <id>https://exceptionless.com/2013-08-06-introducing-exceptionless/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://exceptionless.com/&quot; title=&quot;What is Exceptionless?&quot;&gt;Exceptionless&lt;/a&gt;&lt;/strong&gt; is a new error reporting service that helps you answer important questions about the software that you build.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you know when and how your app is failing?&lt;/li&gt;
&lt;li&gt;Are my users running into issues and walking away?&lt;/li&gt;
&lt;li&gt;What are the top issues that I should be fixing?&lt;/li&gt;
&lt;li&gt;What issues are affecting the most people and would give me the highest ROI when fixed?&lt;/li&gt;
&lt;li&gt;Is my app getting more or less stable with each release over time?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The definition of the word exceptionless is: &lt;strong&gt;to be without exception&lt;/strong&gt;. Our product provides real-time error reporting for your apps. It organizes the gathered information into simple actionable data that will help your app become exceptionless!&lt;/p&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;alignnone size-full wp-image-131&quot; src=&quot;https://exceptionless.com/_site/assets/dashboard1.png&quot; alt=&quot;Exceptionless Dashboard&quot; width=&quot;715&quot; height=&quot;357&quot; data-id=&quot;131&quot; srcset=&quot;https://exceptionless.com/assets/dashboard1.png 715w, https://exceptionless.com/assets/dashboard1-300x149.png 300w&quot; sizes=&quot;(max-width: 715px) 100vw, 715px&quot;&gt; 
&lt;p&gt;You can integrate &lt;strong&gt;Exceptionless&lt;/strong&gt; into your application in a matter of seconds and start getting the answer to all these questions right now! It’s simply a matter of adding our library and setting your sAPI key.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exceptionless&lt;/strong&gt; gives you a look at your application health and allows you to take a closer look at how oftern errors occur. You can dive into a specific error stack to get detailed information about an error. You can also mark an error as fixed or hide an error completely.&lt;/p&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;alignnone size-full wp-image-132&quot; src=&quot;https://exceptionless.com/_site/assets/stack.png&quot; alt=&quot;Exceptionless Error Stack&quot; width=&quot;715&quot; height=&quot;539&quot; data-id=&quot;132&quot; srcset=&quot;https://exceptionless.com/assets/stack.png 715w, https://exceptionless.com/assets/stack-300x226.png 300w&quot; sizes=&quot;(max-width: 715px) 100vw, 715px&quot;&gt; 
&lt;p&gt;We believe that all app developers should strive to be &lt;strong&gt;Exceptionless&lt;/strong&gt; and that’s why we are offering a FREE plan! It’s easy to get started, so what are you waiting for??&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://app.exceptionless.com/signup&quot;&gt;Sign Up For &lt;strong&gt;FREE&lt;/strong&gt; Now!&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2013-12-19-find-customer-facing-bugs-with-exceptionless-case-study/"/>
    <updated>2013-12-19T00:10:29-06:00</updated>
    <id>https://exceptionless.com/2013-12-19-find-customer-facing-bugs-with-exceptionless-case-study/</id>
    <content type="html">&lt;h2&gt;The Power of .NET Error Reporting&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-438&quot; style=&quot;margin-left: 10px;&quot; alt=&quot;ApexCCTV Logo&quot; src=&quot;http://exceptionless.com/assets/header-logoNew.png&quot; width=&quot;182&quot; height=&quot;96&quot; data-id=&quot;438&quot;&gt; One of our long time customers, ApexCCTV, recently described how Exceptionless’ .NET error reporting allowed them to find and squash a bug that was causing their website to be completely unusable by some customers.&lt;/p&gt;
&lt;p&gt;Because of the e-commerce development environment being used, this issue would not have been brought to their attention without the implementation of Exceptionless, making this a prime example of how powerful the tool is and what it can mean for all types of .NET web applications.&lt;!--more--&gt;&lt;/p&gt;
&lt;h3&gt;What customers were experiencing&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“After a site upgrade, &lt;strong&gt;every page&lt;/strong&gt; of the site was crashing if the customer had been previously logged in.” – ApexCCTV&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So, if a user had selected the “keep me logged in” box the last time they logged in, prior to the update, nothing was working for them.&lt;/p&gt;
&lt;h3&gt;The cause&lt;/h3&gt;
&lt;p&gt;When a customer logs in, a secure cookie for that user is created behind the scenes. The code update had changed the format of the cookie, but not the name, so when a user visited the site with the old cookie, the authentication was breaking. This was throwing errors and crashing the site for the customer, but because the development team clears cookies regularly, and no one had reported any issues, the exceptions were flying under the radar.&lt;/p&gt;
&lt;h3&gt;The fix&lt;/h3&gt;
&lt;p&gt;Exceptionless logged and reported the error, and the fix was easy – simply change the cookie name so that users were forced to get a fresh cookie the next time they visited the site. Bam, done! Users could then happly log in and buy &lt;a title=&quot;Security Cameras&quot; href=&quot;http://www.apexcctv.com/&quot; target=&quot;_blank&quot;&gt;security cameras&lt;/a&gt; without any issues.&lt;/p&gt;
&lt;p&gt;There could be, and a lot of the times are, errors like this in any .NET project, and using a real-time exception reporting tool like Exceptionless can really be an asset, saving time, money, and customers.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2013-12-19-exceptionless-1-2-0-released/"/>
    <updated>2013-12-19T21:57:57-06:00</updated>
    <id>https://exceptionless.com/2013-12-19-exceptionless-1-2-0-released/</id>
    <content type="html">&lt;h2&gt;Server Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added ability to copy extended data to the clipboard.&lt;/li&gt;
&lt;li&gt;Added ability to copy stack traces to the clipboard. This is very useful when you have an obfuscated stack trace and wish to decode it.&lt;/li&gt;
&lt;li&gt;Added ability to purchase yearly billing plans.&lt;/li&gt;
&lt;li&gt;Added the ability to consume the rest api with an apikey query string parameter.&lt;/li&gt;
&lt;li&gt;We now show friendly error messages when an error occurs while downgrading or upgrading billing plans.&lt;/li&gt;
&lt;li&gt;Numerous improvements to the project configuration page.&lt;/li&gt;
&lt;li&gt;Numerous bug fixes and performance enhancements.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Client Features&lt;/h2&gt;
&lt;p&gt;Update your NuGet packages to take advantage of these improvements!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Added support for MVC5 and Web API 2.0.&lt;/li&gt;
&lt;li&gt;Improved the detection and ignoring of duplicate errors to prevent them from being reported.&lt;/li&gt;
&lt;li&gt;The client now excludes dynamic assemblies from the modules error report section.&lt;/li&gt;
&lt;li&gt;AddObject now serializes objects to a depth of 5 by default.&lt;/li&gt;
&lt;li&gt;Fixed a couple bugs that may occur when multiple client instances are running on the same machine concurrently.&lt;/li&gt;
&lt;li&gt;Fixed a bug with the ExceptionlessWcfHandleErrorAttribute where it wouldn’t catch errors when aspNetCompatibilityEnabled was set to false.&lt;/li&gt;
&lt;li&gt;The client now submits errors to &lt;a href=&quot;http://collector.exceptionless.com/api/v1/error&quot;&gt;collector.exceptionless.com/api/v1/error&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Fixed a bug that would prevent the Windows Form client from showing the Crash Report dialog.&lt;/li&gt;
&lt;li&gt;Fixed a bug where multiple HttpModule sections could be added by the NuGet installer.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2013-12-24-net-exception-reporting-why-you-need-it/"/>
    <updated>2013-12-24T23:19:18-06:00</updated>
    <id>https://exceptionless.com/2013-12-24-net-exception-reporting-why-you-need-it/</id>
    <content type="html">&lt;p&gt;We have all worked on projects, large and small, where tiny, one-off bugs went unnoticed for &lt;em&gt;a while&lt;/em&gt; before they were finally reported by a user or discovered by a developer. In some instances, these bugs probably affected the end-user’s ability to use the service, purchase an item, etc, meaning that there was a direct impact on the bottom line.&lt;/p&gt;
&lt;p&gt;What if you didn’t have to worry about .NET exceptions going unnoticed anymore?&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Enter real-time .NET exception reporting&lt;/h2&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-148&quot; style=&quot;margin: 10px; border: 1px solid #999;&quot; alt=&quot;Exceptionless ASP.NET Error API&quot; src=&quot;http://exceptionless.com/assets/toexceptionless1-300x150.png&quot; width=&quot;300&quot; height=&quot;150&quot; data-id=&quot;148&quot; srcset=&quot;https://exceptionless.com/assets/toexceptionless1-300x150.png 300w, https://exceptionless.com/assets/toexceptionless1.png 560w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt; 
&lt;p&gt;What .NET developers needed was a tool that focused on error reporting by logging, grouping, and sending notifications. They needed flexibility through custom objects and a fluent API. They needed every error detail presented in a organized, readable manner. The even needed charts that clearly showed their progress in squashing the tens, hundreds, or thousands of daily exceptions that they didn’t know they were occurring.&lt;/p&gt;
&lt;p&gt;We needed all that, too, so &lt;strong&gt;we built a tool that does it all for us!&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;What a .NET exception reporting tool has up its sleeves&lt;/h3&gt;
&lt;p&gt;When we set out to build Exceptionless, we went through hundreds of possible features, and even toyed with building a larger product that including other functionality, but in the end we decided we wanted it to do the following things really well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Send error &lt;strong&gt;notifications&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Group exceptions&lt;/strong&gt; intelligently into stacks&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Show top errors&lt;/strong&gt; and allow them to be &lt;strong&gt;prioritized&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Provide &lt;strong&gt;detailed error reports&lt;/strong&gt;, including &lt;strong&gt;stacktrace&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Have a &lt;strong&gt;dashboard&lt;/strong&gt; with an immediate view of error statistics and trends&lt;/li&gt;
&lt;li&gt;Allow &lt;strong&gt;custom objects&lt;/strong&gt; to be added to reports&lt;/li&gt;
&lt;li&gt;Allow &lt;strong&gt;unlimited users&lt;/strong&gt; per organization&lt;/li&gt;
&lt;li&gt;Give developers a way to **mark exceptions critical, fixed, or **&lt;strong&gt;monitor for regressions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Provide &lt;strong&gt;real-time updates&lt;/strong&gt;, as exceptions happen&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Support offline usability&lt;/strong&gt; in scenarios where the developer is traveling, etc&lt;/li&gt;
&lt;li&gt;Be able to be &lt;strong&gt;installed in less than 5 minutes&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why Exceptionless is a must-try for .NET developers&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;You should give it a shot if:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finding that bug 2 weeks sooner could have saved you or your company a lot of money&lt;/li&gt;
&lt;li&gt;Customers were lost because of a bug on production that you couldn’t see locally or in the development environment&lt;/li&gt;
&lt;li&gt;You fixed a bug in one spot, only to find out that it was happening in several other places as well&lt;/li&gt;
&lt;li&gt;There might be errors here or there, but they probably aren’t affecting very many users &lt;em&gt;(hint: they probably are)&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;You or your team are making a lot of changes in the next sprint, and you really want to make sure you know when a bug gets introduced&lt;/li&gt;
&lt;li&gt;&lt;em&gt;and the list goes on…&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;And of course, we’re here to help!&lt;/h4&gt;
&lt;p&gt;If you have any issues or questions, just let us know! You can &lt;a href=&quot;http://exceptionless.com/contact/&quot; title=&quot;Contact Us&quot;&gt;contact us here on the website&lt;/a&gt;, or via the support button on your Exceptionless dashboard.&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://app.exceptionless.com/signup&quot;&gt;Try It for &lt;strong&gt;FREE&lt;/strong&gt;&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-01-04-find-leaking-exceptions-eliminate-empty-catch-block/"/>
    <updated>2014-01-04T23:03:48-06:00</updated>
    <id>https://exceptionless.com/2014-01-04-find-leaking-exceptions-eliminate-empty-catch-block/</id>
    <content type="html">&lt;h2&gt;How a client eliminated 50+ exceptions/hour&lt;/h2&gt;
&lt;p&gt;Recently, a client contacted us and gave us a pretty incredible case study. He found a huge number of “leaking” exceptions by eliminating all of the empty catch statements in his ASP.NET code and sending an exception to Exceptionless instead. By doing so, he was able to track down about &lt;strong&gt;12 individual bugs&lt;/strong&gt; and get rid of &lt;strong&gt;over 50 exceptions per hour&lt;/strong&gt; by fixing them. That’s &lt;strong&gt;1200+ exceptions per day&lt;/strong&gt; – gone!&lt;!--more--&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“This gave us a picture of just how many poorly written methods were leaking exceptions. The answer was, A LOT. So, even though these weren’t customer facing, they were expensive and a good indicator of code quality. In just a couple of days, we were able to eliminate the majority of them completely.” – Eric Burcham&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After speaking with Mr. Burcham further, he explained that while there were only about 12 individual bugs, the number of times that those bugs were occurring in different areas throughout the code (an ASP.NET eCommerce solution) was numerous. Luckily, he was able to use several mult-line find and replace actions to make all the changes relatively quickly and get things back on track.&lt;/p&gt;
&lt;h2&gt;A brief code example&lt;/h2&gt;
&lt;h3&gt;Empty .NET catch blocks&lt;/h3&gt;
&lt;p&gt;Before using Exceptionless to generated exceptions, the catch blocks were empty.&lt;/p&gt;
&lt;pre&gt;try
{
                // Do Something
}
catch { }&lt;/pre&gt;
&lt;h3&gt;Using Exceptionless to generate an exception in the catch block&lt;/h3&gt;
&lt;p&gt;By submitting an exception in the catch block, instead, their eyes were opened to thousands of daily exceptions.&lt;/p&gt;
&lt;pre&gt;try
{
                // Do Something
}
catch(Exception ex)
{
                ex.ToExceptionless().Submit();
}&lt;/pre&gt;
&lt;h3 style=&quot;text-rendering: auto;&quot;&gt;
  But I can already throw an exception in my catch block&amp;#8230;
&lt;/h3&gt;
&lt;p&gt;While you can throw an exception in a catch block normally with .NET, Eric was able to utilize Exceptionless’ intelligent error grouping, notifications, and detailed reporting to pinpoint the problems and deal with them accordingly. Then, he was able to monitor the decline of occurrences and make sure that there were no regressions. That’s pretty powerful, we think.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-01-15-project-portal-tour/"/>
    <updated>2014-01-15T01:02:31-06:00</updated>
    <id>https://exceptionless.com/2014-01-15-project-portal-tour/</id>
    <content type="html">&lt;p&gt;We cover the basic features of the Exceptionless platform on our &lt;a href=&quot;http://exceptionless.com/tour/&quot; title=&quot;Exceptionless Feature Tour&quot;&gt;feature tour page&lt;/a&gt;, but we wanted to give everyone a deeper look into all the information available via the web-based, real-time .NET error reporting admin area.&lt;/p&gt;
&lt;p&gt;Continue reading to learn more.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;The Dashboard&lt;/h2&gt;
&lt;img class=&quot;aligncenter size-full wp-image-1268&quot; src=&quot;http://exceptionless.com/assets/graph.jpg&quot; alt=&quot;Visual .NET Exception Graph&quot; width=&quot;100%&quot; data-id=&quot;1268&quot; srcset=&quot;https://exceptionless.com/assets/graph.jpg 700w, https://exceptionless.com/assets/graph-300x122.jpg 300w&quot; sizes=&quot;(max-width: 700px) 100vw, 700px&quot;&gt;  
The Exceptionless Dashboard features a quick overview of the exceptions for the currently selected project. It also updates in real-time, so you can watch exceptions roll in.
&lt;p&gt;This is a great place to glimpse your exceptions by total, unique, new, or per hour. The most frequent and most recent exceptions are also displayed here, along with a graph representing your total and unique exceptions. You can go directly to an error’s details by clicking on it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;At the top of the page, throughout the admin, you can:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Change the project you are currently viewing&lt;/li&gt;
&lt;li&gt;Go to that projects settings&lt;/li&gt;
&lt;li&gt;Adjust the date range&lt;/li&gt;
&lt;li&gt;Show/Hide hidden errors&lt;/li&gt;
&lt;li&gt;Show/Hide fixed errors&lt;/li&gt;
&lt;li&gt;Show/Hide “Not Found” errors&lt;figure id=&quot;attachment_1340&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/dashboard-home.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1340&quot; src=&quot;http://exceptionless.com/assets/dashboard-home-150x150.jpg&quot; alt=&quot;Exceptionless Dashboard&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1340&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Portal Admin Dashboard&lt;/figcaption&gt; &lt;figure id=&quot;attachment_1209&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/date-range.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1209 &quot; title=&quot;Exceptionless Date Range Selector&quot; src=&quot;http://exceptionless.com/assets/date-range-150x150.jpg&quot; alt=&quot;Exceptionless Date Range Selector&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1209&quot; srcset=&quot;https://exceptionless.com/assets/date-range-150x150.jpg 150w, https://exceptionless.com/assets/date-range-300x300.jpg 300w, https://exceptionless.com/assets/date-range.jpg 350w&quot; sizes=&quot;(max-width: 150px) 100vw, 150px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Show/Hide Errors &amp;amp; Select Date Range&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;View Most Recent, Most Frequent, and New Exceptions&lt;/h2&gt;
&lt;p&gt;On the left side of the dashboard, you can select to view your Most Recent, Most Frequent, or New (first time) .NET exceptions.&lt;figure id=&quot;attachment_1221&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/most-recent.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1221&quot; src=&quot;http://exceptionless.com/assets/most-recent-150x150.jpg&quot; alt=&quot;Most Recent .NET Exceptions&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1221&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Most Recent Errors&lt;/figcaption&gt; &lt;figure id=&quot;attachment_1222&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/most-frequent.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1222&quot; src=&quot;http://exceptionless.com/assets/most-frequent-150x150.jpg&quot; alt=&quot;Most Frequent .NET Exceptions&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1222&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Most Frequent Errors&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure id=&quot;attachment_1223&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/new.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1223&quot; src=&quot;http://exceptionless.com/assets/new-150x150.jpg&quot; alt=&quot;New .NET Exceptions&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1223&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;New Errors&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
&lt;/div&gt;
&lt;h3&gt;Most Recent&lt;/h3&gt;
&lt;p&gt;The most recent report lists your errors individually with the one that occurred last at the top. It also tells you exactly how long ago the error occurred. You can click into the exception to view details.&lt;/p&gt;
&lt;h3&gt;Most Frequent and New Exceptions&lt;/h3&gt;
&lt;p&gt;Each of these reports lists the respective error type with a summary, the count, when the error first happened, and the last occurrence. Most frequent is ordered by count, and new is ordered by most recent.&lt;/p&gt;
&lt;h2&gt;Lets Take a Look at Exception Details&lt;/h2&gt;
&lt;h3&gt;Error Stack Page&lt;figure id=&quot;attachment_1226&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;/figure&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/error-stack.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1226&quot; src=&quot;http://exceptionless.com/assets/error-stack-150x150.jpg&quot; alt=&quot;Error Stack Dashboard&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1226&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Error Stack Page&lt;/figcaption&gt; &lt;figure id=&quot;attachment_1227&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/exception-options.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1227&quot; src=&quot;http://exceptionless.com/assets/exception-options-150x150.jpg&quot; alt=&quot;Error Stack Options&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1227&quot; srcset=&quot;https://exceptionless.com/assets/exception-options-150x150.jpg 150w, https://exceptionless.com/assets/exception-options-300x300.jpg 300w, https://exceptionless.com/assets/exception-options.jpg 375w&quot; sizes=&quot;(max-width: 150px) 100vw, 150px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Mark Fixed &amp;amp; Options&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;If you click into any error, Exceptionless will show you the error stack, which includes the number of occurrences, when it first happened, and the latest re-occurrence. You can adjust the date range on this page, like the rest, and you also get a nice graph of that error’s occurrences over time. Each individual time the error triggered is listed below the graph, and you can click into each instance separately.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before we do that, though,&lt;/strong&gt; I’d like to point out another major feature of the error stack page..&lt;/p&gt;
&lt;p&gt;Above and to the right of the graph are two buttons: “Mark Fixed” and “Options”. Mark fixed is exactly what it sounds like, and if you click on the “Options” button it drops down with the following choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hide from reports&lt;/li&gt;
&lt;li&gt;Promote to external&lt;/li&gt;
&lt;li&gt;Add reference link&lt;/li&gt;
&lt;li&gt;Disable notifications&lt;/li&gt;
&lt;li&gt;Future occurrences are critical&lt;/li&gt;
&lt;li&gt;Reset stats&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Individual Error Details&lt;/h3&gt;
&lt;p&gt;After you click into an individual error instance, you will see the following tabs.&lt;figure id=&quot;attachment_1230&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 125px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/exception-details-overview.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1230&quot; src=&quot;http://exceptionless.com/assets/exception-details-overview-150x150.jpg&quot; alt=&quot;.NET Error Overview&quot; width=&quot;125&quot; height=&quot;125&quot; data-id=&quot;1230&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Error Overview&lt;/figcaption&gt; &lt;figure id=&quot;attachment_1231&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 125px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/exception-details-exception.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1231&quot; src=&quot;http://exceptionless.com/assets/exception-details-exception-150x150.jpg&quot; alt=&quot;.NET Exception Details&quot; width=&quot;125&quot; height=&quot;125&quot; data-id=&quot;1231&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Exception Details&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure id=&quot;attachment_1232&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 125px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/exception-details-request.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1232&quot; src=&quot;http://exceptionless.com/assets/exception-details-request-150x150.jpg&quot; alt=&quot;.NET Exception Request Details&quot; width=&quot;125&quot; height=&quot;125&quot; data-id=&quot;1232&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Request Details&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure id=&quot;attachment_1233&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 125px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/exception-details-environment.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1233&quot; src=&quot;http://exceptionless.com/assets/exception-details-environment-150x150.jpg&quot; alt=&quot;.NET Exception Environment Details&quot; width=&quot;125&quot; height=&quot;125&quot; data-id=&quot;1233&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Env. Details&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
&lt;/div&gt;
&lt;h4&gt;Error Overview&lt;/h4&gt;
&lt;p&gt;This page shows you a quick overview of the error, including the stack trace. It includes the date and time, type, message, platform, URL, and referrer. You can also go to the previous or next occurrence.&lt;/p&gt;
&lt;h4&gt;Exception&lt;/h4&gt;
&lt;p&gt;This tab displays a few overview details, then gives you a list of loaded modules related to the error.&lt;/p&gt;
&lt;h4&gt;Request&lt;/h4&gt;
&lt;p&gt;The request view gives you the request details, including date and time, http method, url, referrer, client IP, user agent, browser, browser OS, device, and whether or not it’s a known bot. You also get Post Data.&lt;/p&gt;
&lt;h4&gt;Environment&lt;/h4&gt;
&lt;p&gt;Because you needed &lt;strong&gt;all&lt;/strong&gt; the data, the environment tab displays time and date, machine name, ip address, processor count, total, available, and process memory, OS name, OS version, architecture, runtime version, process ID, process name, and command line details. It also has client information, such as install date, version, platform, submission method, application starts, and errors submitted.&lt;/p&gt;
&lt;h2&gt;What Else Can I Do from the Admin?&lt;/h2&gt;
&lt;p&gt;Naturally, you can manager your projects, organizations, and account, but we also have pretty handy feedback and support tools so you can let us know how we’re doing! Your feedback and comments are important and provide direction to the code.&lt;figure id=&quot;attachment_1246&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/projects.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1246&quot; src=&quot;http://exceptionless.com/assets/projects-150x150.jpg&quot; alt=&quot;Exceptionless Project Dashboard&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1246&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Manage Projects&lt;/figcaption&gt; &lt;figure id=&quot;attachment_1247&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/organizations.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1247&quot; src=&quot;http://exceptionless.com/assets/organizations-150x150.jpg&quot; alt=&quot;Manage Exceptionless Organizations&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1247&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Organizations&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure id=&quot;attachment_1248&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/account.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1248&quot; src=&quot;http://exceptionless.com/assets/account-150x150.jpg&quot; alt=&quot;Manage Exceptionless Account&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1248&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Manage Account&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure id=&quot;attachment_1249&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/feedback.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1249&quot; src=&quot;http://exceptionless.com/assets/feedback-150x150.jpg&quot; alt=&quot;Exceptionless Feedback&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1249&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Give Feedback&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure id=&quot;attachment_1250&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/support.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-1250&quot; src=&quot;http://exceptionless.com/assets/support-150x150.jpg&quot; alt=&quot;Exceptionless Support&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;1250&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Get Support&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;In short, the tool offers extremely helpful insights into the world of your web application’s bugs. Whether internal or customer-facing, knowing when, where, and how many exceptions are being generated makes it easier for you to track them down and squash them. And when you’ve fixed it, regression notifications are there to let you know if it rears its ugly head again.&lt;/p&gt;
&lt;p&gt;Still not convinced? Give it a try – &lt;a href=&quot;https://app.exceptionless.com/signup&quot; title=&quot;Sign up for Exceptionless&quot;&gt;sign up today, for free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-01-24-server-browser-cookie-error/"/>
    <updated>2014-01-24T19:14:14-06:00</updated>
    <id>https://exceptionless.com/2014-01-24-server-browser-cookie-error/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-1959&quot; style=&quot;margin-left:10px;&quot; alt=&quot;Internet Explorer Cookies&quot; src=&quot;http://exceptionless.com/assets/ie-cookies.jpg&quot; width=&quot;250&quot; height=&quot;220&quot; data-id=&quot;1959&quot;&gt;As with every new release of software, things change. And, like we all expected, there wasn’t an exception to that rule when Microsoft introduced Internet Explorer 10 into the mix.&lt;/p&gt;
&lt;p&gt;Everyone coding for the web had the normal things to worry about, of course, like design formatting, speed, and support, but one of our clients experienced something that would have taken a long time to catch if they hadn’t been using Exceptionless’ &lt;strong&gt;real-time error reporting&lt;/strong&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Who Adopts New Versions of IE Right Away, Anyway?&lt;/h2&gt;
&lt;p&gt;Like many, the client’s web team doesn’t necessarily adopt the latest version of IE right away, much less use it as their main browser. Unfortunately, that leads to little immediate exposure to potential bugs.&lt;/p&gt;
&lt;p&gt;Lets explore how this came back to bite them, and how Exceptionless helped them treat the wound quickly.&lt;/p&gt;
&lt;h3&gt;A nasty customer-facing error&lt;/h3&gt;
&lt;p&gt;Users of the client’s eCommerce platform that were already using IE10 were able to view and use the website fine, until they logged in. At that point, everything broke. They couldn’t checkout, browse, or submit contact forms.&lt;/p&gt;
&lt;p&gt;Because the team wasn’t using IE10 regularly yet for testing actual logged-in user transactions, &lt;strong&gt;they were clueless&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Luckily, Exceptionless reported the customers’ errors and the team was able to take notice of the recurring bug within days, rather than weeks or months.&lt;/p&gt;
&lt;h3&gt;Turns out… the problem was server-side!&lt;/h3&gt;
&lt;p&gt;After the error was reported in the Exceptionless Dashboard, the team was able to use the attached details to trace the root of the issue back to the server’s definitions of which browsers support modern cookie encryption.&lt;/p&gt;
&lt;p&gt;All the server needed was a &lt;strong&gt;routine update&lt;/strong&gt; that had not been performed! Bam – fixed.&lt;/p&gt;
&lt;h3&gt;Another bug bites the dust&lt;/h3&gt;
&lt;p&gt;We love to hear stories like this. Something so simple, yet so easy to overlook and cause serious customer-facing problems!&lt;/p&gt;
&lt;p&gt;Errors like this happen every day to hundreds, if not thousands, of small, medium, and large software teams across the world. We just want to help squash as many of them as we can!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-02-03-app-error-notifications/"/>
    <updated>2014-02-03T21:02:42-06:00</updated>
    <id>https://exceptionless.com/2014-02-03-app-error-notifications/</id>
    <content type="html">&lt;p&gt;Maybe you’ve got this awesome new web app that you’re ready to go live with, or maybe you’re working on a project that is already customer facing but you’ve got major new features rolling out and want to make sure all goes well.&lt;/p&gt;
&lt;p&gt;We both know there’s going to be &lt;em&gt;something&lt;/em&gt; that isn’t completely right after launch. It might be a big bug stopping certain users from placing orders on your site, or it might be something that won’t even affect your customers. It might be highly visible, or completely hidden from your view. Either way, you want to know when that error occurs and what the details are. That’s where Exceptionless comes in.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Real-Time Error Notifications via Email&lt;/h2&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-147&quot; alt=&quot;ASP.NET Error Notifications&quot; src=&quot;http://exceptionless.com/assets/notification.png&quot; width=&quot;665&quot; height=&quot;433&quot; data-id=&quot;147&quot; srcset=&quot;https://exceptionless.com/assets/notification.png 665w, https://exceptionless.com/assets/notification-300x195.png 300w&quot; sizes=&quot;(max-width: 665px) 100vw, 665px&quot;&gt; 
&lt;p&gt;The Exceptionless platform provides a great &lt;a href=&quot;http://exceptionless.com/project-portal-tour/&quot; title=&quot;Error Reporting Dashboard&quot;&gt;real-time dashboard&lt;/a&gt; view of your errors, but our email notifications allow you to be absolutely in touch with any errors that may be occurring within your application.&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://app.exceptionless.com/signup&quot;&gt;Try It Out for &lt;strong&gt;FREE&lt;/strong&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;h3&gt;Notification options&lt;/h3&gt;
&lt;p&gt;There are several email notification options for your app’s exceptions.&lt;/p&gt;
&lt;p&gt;To receive notifications, you need to turn them on under the “My Account” section, in the “Profile Information” tab. This option should be on by default. Then, you can view the below options under the individual project settings by clicking on the cog/gear icon next to the project name at the top of your dashboard.&lt;/p&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-2331&quot; alt=&quot;Email Notification Settings&quot; src=&quot;http://exceptionless.com/assets/email-notification-settings.png&quot; width=&quot;548&quot; height=&quot;426&quot; data-id=&quot;2331&quot; srcset=&quot;https://exceptionless.com/assets/email-notification-settings.png 548w, https://exceptionless.com/assets/email-notification-settings-300x233.png 300w&quot; sizes=&quot;(max-width: 548px) 100vw, 548px&quot;&gt; 
&lt;h4&gt;Lets take a look at the different options:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Daily Project Summary&lt;/strong&gt;&lt;br&gt;
This is simply a summary of your project, including error counts, etc, that you can receive each day.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Critical Errors&lt;/strong&gt;&lt;br&gt;
You can mark an individual error as critical, and then check this box to receive email notifications each time that error occurs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Regressions&lt;/strong&gt;&lt;br&gt;
If you have marked an error as fixed, you can check this to get an email notification if it ever rears it’s ugly head again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error Occurrence Notification Frequency&lt;/strong&gt;&lt;br&gt;
These are fairly self-explanatory. How often would you like to receive emails?&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All Occurrences&lt;/li&gt;
&lt;li&gt;New Only&lt;/li&gt;
&lt;li&gt;Never&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;_&lt;strong&gt;Note:&lt;/strong&gt; _You can also turn notifications off for individual errors by going to Options&amp;gt;&amp;gt;Disable Notifications while inside a specific error.&lt;/p&gt;
&lt;h3&gt;Sit back and relax&lt;/h3&gt;
&lt;p&gt;… until an error notification comes in, that is. Then you should probably fix it.&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://app.exceptionless.com/signup&quot;&gt;Try It Out for &lt;strong&gt;FREE&lt;/strong&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-02-07-xml-parsing-exception-caught-fixed-case-study/"/>
    <updated>2014-02-07T18:37:05-06:00</updated>
    <id>https://exceptionless.com/2014-02-07-xml-parsing-exception-caught-fixed-case-study/</id>
    <content type="html">&lt;p&gt;This is yet another story of an elusive bug that, without a proper error reporting service, would have gone un-noticed for a very long time.&lt;/p&gt;
&lt;p&gt;When third-party software and services interact with your code, in any way, you have to be wary that their data may be different from yours. In this instance, our client was parsing some XML that included an unfriendly cookie name. Lets see what happened next…&lt;!--more--&gt;&lt;/p&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-2603&quot; alt=&quot;.NET Exception Dashboard&quot; src=&quot;http://exceptionless.com/assets/apexExceptionsRandom.png&quot; width=&quot;878&quot; height=&quot;248&quot; data-id=&quot;2603&quot; srcset=&quot;https://exceptionless.com/assets/apexExceptionsRandom.png 878w, https://exceptionless.com/assets/apexExceptionsRandom-300x84.png 300w&quot; sizes=&quot;(max-width: 878px) 100vw, 878px&quot;&gt; 
&lt;h2&gt;Killer Cookies&lt;/h2&gt;
&lt;p&gt;&lt;a title=&quot;Listrak&quot; href=&quot;http://www.listrak.com/&quot; target=&quot;_blank&quot;&gt;Listrak&lt;/a&gt; is a pretty cool company that provides, among other things, a robust email marketing, shopping cart abandonment, and welcome series suite of tools.&lt;/p&gt;
&lt;p&gt;One of their cookies uses a “$” in it’s name ($ListrakFoo or similar). When the client’s XML Config packages were executed, that $ was causing an XML parsing exception.&lt;/p&gt;
&lt;h3&gt;That’s not customer facing. What’s the big deal?&lt;/h3&gt;
&lt;h4&gt;37,000&lt;/h4&gt;
&lt;p&gt;While not directly customer facing, it was happening on almost every page of the website and occurred something like 37,000 times in the span of it’s existence.&lt;/p&gt;
&lt;h4&gt;Sluggish&lt;/h4&gt;
&lt;p&gt;Along with the sheer number of occurrences, it was also noticeably slowing the site down.&lt;/p&gt;
&lt;h3&gt;The fix&lt;/h3&gt;
&lt;p&gt;The fix was relatively simple. The client now checks for “$” in cookie names within the affected method and just doesn’t handle them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tracking errors like this is what we’re all about.&lt;/strong&gt; There are hundreds of thousands, probably even millions, of bugs out there _right now _that throw exceptions every day but manage to remain hidden in the shadows of code written by professional developers.&lt;/p&gt;
&lt;p&gt;It’s not a sign of poor programming, it simply comes with the territory. You will have bugs, big and small, in every project you work on. The difference is, with Exceptionless, you can actually be aware of, and fix, them!&lt;/p&gt;
&lt;p&gt;Another bug bites the dust, thanks to help of Exceptionless’ &lt;a href=&quot;http://exceptionless.com/&quot; title=&quot;Real Time Exception Reporting&quot;&gt;real-time exception reporting&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Do you have a story where our software helped you track down and squash an elusive error? Let us know! We’ll publish the details and link back to your app, if you like.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-02-13-exceptionless-1-3-released/"/>
    <updated>2014-02-13T23:55:42-06:00</updated>
    <id>https://exceptionless.com/2014-02-13-exceptionless-1-3-released/</id>
    <content type="html">&lt;p&gt;Exceptionless 1.3 brings with it both server and client changes, including &lt;a href=&quot;http://exceptionless.com/fork-us-exceptionless-goes-open-source/&quot; title=&quot;Exceptionless Goes Open Source!&quot;&gt;open sourcing the project&lt;/a&gt; (which we’re super excited about!), some minor updates, and a few bug fixes. Check out the changelog items below, and let us know if you have any questions.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Server&lt;/h2&gt;
&lt;div&gt;
  &lt;ul&gt;
    &lt;li&gt;
      Open sourced the server under the &lt;a href=&quot;http://www.gnu.org/licenses/agpl-3.0.html&quot; target=&quot;_blank&quot;&gt;GNU Affero General Public License, Version 3.0&lt;/a&gt;!
    &lt;/li&gt;
    &lt;li&gt;
      Extended data key names are now shown with friendly formatted name.
    &lt;/li&gt;
    &lt;li&gt;
      Summary notification emails that were not sent out and are older than two days will be ignored by the email job. This will help prevent users from being spammed in some circumstances.
    &lt;/li&gt;
    &lt;li&gt;
      Fixed a major application start up performance bug that had to do with dependency injection.
    &lt;/li&gt;
    &lt;li&gt;
      Fixed a bug that was causing the key-up event to be cancelled on every page that had a chart. This affected modals from working properly in some scenarios.
    &lt;/li&gt;
    &lt;li&gt;
      The following improvements were made specifically to make local development and internal deployments easier. &lt;ul&gt;
        &lt;li&gt;
          Added the ability to add or remove a user from the admin role.
        &lt;/li&gt;
        &lt;li&gt;
          When you are running exceptionless in development mode and you are the first user to signup for an account; a new sample project with a sample api key will be created.
        &lt;/li&gt;
        &lt;li&gt;
          When billing is not configured, all new organizations will be placed in an unlimited plan.
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;h2&gt;Client&lt;/h2&gt;
&lt;div&gt;
  &lt;ul&gt;
    &lt;li&gt;
      Open sourced the client under the &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0&quot; target=&quot;_blank&quot;&gt;Apache License, Version 2.0&lt;/a&gt;!
    &lt;/li&gt;
    &lt;li&gt;
      Symbols are now available on &lt;a href=&quot;http://www.symbolsource.org/&quot; target=&quot;_blank&quot;&gt;http://www.symbolsource.org/&lt;/a&gt;. Documentation on configuring visual studio can be found &lt;a href=&quot;http://www.symbolsource.org/Public/Home/VisualStudio&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Adding binding redirects to the right version.
    &lt;/li&gt;
    &lt;li&gt;
      Data Exclusions now &lt;a href=&quot;http://docs.exceptionless.com/contents/security/&quot; target=&quot;_blank&quot;&gt;support wildcards&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-02-18-fork-us-exceptionless-goes-open-source/"/>
    <updated>2014-02-18T08:00:28-06:00</updated>
    <id>https://exceptionless.com/2014-02-18-fork-us-exceptionless-goes-open-source/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright  wp-image-2845&quot; alt=&quot;Octocat&quot; src=&quot;http://exceptionless.com/assets/Octocat-300x249.png&quot; width=&quot;240&quot; height=&quot;199&quot; data-id=&quot;2845&quot; srcset=&quot;https://exceptionless.com/assets/Octocat-300x249.png 300w, https://exceptionless.com/assets/Octocat.png 800w&quot; sizes=&quot;(max-width: 240px) 100vw, 240px&quot;&gt;It’s a big day at Exceptionless.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We are super excited to announce that we are &lt;a title=&quot;Exceptionless on GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless&quot; target=&quot;_blank&quot;&gt;open sourcing the Exceptionless code&lt;/a&gt;! That’s right, now you can hack on our real-time error reporting tool yourself.&lt;/p&gt;
&lt;p&gt;Too many apps are throwing too many errors out there, resulting in confused users, lost business, and endless frustration.&lt;/p&gt;
&lt;p&gt;We believe Exceptionless can help the development community become more in-tune with their code by making those errors more transparent, trackable, and squashable. More importantly, we want to support developers building and shipping better code for their &lt;strong&gt;users&lt;/strong&gt;.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Cool, Where Do I Start?&lt;/h2&gt;
&lt;p&gt;Check out the &lt;a title=&quot;Exceptionless on GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless&quot; target=&quot;_blank&quot;&gt;Exceptionless Github Repository&lt;/a&gt;, and make sure to &lt;a title=&quot;Contributing to Exceptionless&quot; href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/CONTRIBUTING.md&quot; target=&quot;_blank&quot;&gt;read about contributing&lt;/a&gt; if you plan on helping us improve the project.&lt;/p&gt;
&lt;p&gt;You’ll find instructions on getting started there, including setting up your hosting environment if you want to host things yourself. If you would rather host with us, we offer &lt;a href=&quot;http://exceptionless.com/pricing/&quot;&gt;easy and affordable plans&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have a feature request or issue, let us know on the &lt;a title=&quot;Exceptionless Feedback Forum&quot; href=&quot;https://exceptionless.uservoice.com/&quot; target=&quot;_blank&quot;&gt;feedback forum&lt;/a&gt;. We are &lt;strong&gt;100% committed&lt;/strong&gt; to supporting the project.&lt;/p&gt;
&lt;h2&gt;Why Open Source?&lt;/h2&gt;
&lt;p&gt;In short, we want to see what the community can do with our baby, which we consider a great development tool. The open source movement has provided innovation throughout the industry, and we cannot tell you how excited we are to be a part of it.&lt;/p&gt;
&lt;p&gt;We hope you will take it, add to it, suggest great new features, and report bugs, but most of all we hope you will use it to &lt;strong&gt;build better apps for the world&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The Exceptionless Team will continue to work on a road map of features and improvements, all while providing support to developers that want to contribute.&lt;/p&gt;
&lt;h3&gt;Planned features/enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Refactor client so that the base client is a PCL library thus supporting WinRT and Mono.&lt;/li&gt;
&lt;li&gt;Implement search features using ElasticSearch.&lt;/li&gt;
&lt;li&gt;JavaScript client for reporting client side errors.&lt;/li&gt;
&lt;li&gt;Refactor the API and UI to be completely separate layers and rewrite the UI as a SPA app using AngularJS.&lt;/li&gt;
&lt;li&gt;Add a server side plugin system that allows new functionality to be easily added like HipChat notifications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Ideas for the community&lt;/h3&gt;
&lt;p&gt;These include just a few of feature requests, etc, that aren’t in the team’s immediate pipeline that you might consider tackling.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clients for Ruby, Java, Python, PHP, etc&lt;/li&gt;
&lt;li&gt;Ability to log non-exception data&lt;/li&gt;
&lt;li&gt;Teams within organizations&lt;/li&gt;
&lt;li&gt;Bookmarks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Lets make something awesome&lt;/h3&gt;
&lt;p&gt;We have spent a lot of time on Exceptionless, but together with the community we can take it to the next level. Check out the &lt;a title=&quot;Exceptionless on GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless&quot; target=&quot;_blank&quot;&gt;GitHub repo&lt;/a&gt; today, and happy coding!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Watch out, exceptions!&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-02-25-installing-excteptionless-github/"/>
    <updated>2014-02-25T08:00:35-06:00</updated>
    <id>https://exceptionless.com/2014-02-25-installing-excteptionless-github/</id>
    <content type="html">&lt;p&gt;Since we officially announced that Exceptionless was going open source last week, we wanted to provide everyone with a quick and easy video walkthrough of how to get up and running locally.&lt;/p&gt;
&lt;p&gt;It’s really quick, as you can see from the below video. Below the video is also a textual walkthrough. Please take a look and let us know if you have any questions.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Please note that before contributing to the Exceptionless project, you must read and sign the Exceptionless &lt;a href=&quot;http://www.clahub.com/agreements/exceptionless/Exceptionless&quot; title=&quot;Exceptionless Certified License Agreement&quot; target=&quot;_blank&quot;&gt;Contribution License Agreement&lt;/a&gt;. Pull requests will not be accepted otherwise.&lt;/p&gt;
&lt;h2&gt;GitHub Exceptionless Getting Started Video&lt;/h2&gt;
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;Text Guide&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Log in to github&lt;/li&gt;
&lt;li&gt;Install the &lt;a href=&quot;https://windows.github.com/&quot; title=&quot;GitHub Windows Client&quot; target=&quot;_blank&quot;&gt;GitHub Windows client&lt;/a&gt;, if you want to use the GUI. If not, you can do the rest of the steps from command line.&lt;/li&gt;
&lt;li&gt;Fork the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless&quot; title=&quot;Exceptionless on GitHub&quot; target=&quot;_blank&quot;&gt;Exceptionless repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clone the repo to your machine (Clone to Desktop)&lt;/li&gt;
&lt;li&gt;Open your local repository you just cloned&lt;/li&gt;
&lt;li&gt;Follow the “&lt;a href=&quot;https://github.com/exceptionless/Exceptionless#getting-started&quot; title=&quot;Exceptionless GitHub Getting Started&quot; target=&quot;_blank&quot;&gt;Getting Started&lt;/a&gt;” section of github readme&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Start StartBackendServers.bat file to start redis and mongodb&lt;/li&gt;
&lt;li&gt;Open the Exceptionles solution in Visual Studio&lt;/li&gt;
&lt;li&gt;Right click solution and select select “set startup projects”&lt;/li&gt;
&lt;li&gt;Click on “Multiple startup projects”
&lt;ul&gt;
&lt;li&gt;Locate Exceptionless.app and Exceptionless.SampleConsole and change them to “Start”&lt;/li&gt;
&lt;li&gt;Rebuild the solution to pull down the NuGet packages&lt;/li&gt;
&lt;li&gt;Start Debugging&lt;/li&gt;
&lt;li&gt;A console app and Internet explorer instance will start&lt;/li&gt;
&lt;li&gt;Go to the browser and create a (sample) account. This will create a sample organization and project.&lt;/li&gt;
&lt;li&gt;You will be redirected to the dashboard for the new project&lt;/li&gt;
&lt;li&gt;Go back to the console app and hit 1. A new error will be generated and your Exceptionless dashboard should reflect the error in real-time.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Now, after you make any changes or updates, you will want to do a pull request.&lt;/li&gt;
&lt;li&gt;To do so, commit working, tested changes to the project.&lt;/li&gt;
&lt;li&gt;Then, sync the changes&lt;/li&gt;
&lt;li&gt;Go back to github and click on the green compare, review, or create a pull request icon.&lt;/li&gt;
&lt;li&gt;Review the updates and make sure the pull request includes the proper changes.&lt;/li&gt;
&lt;li&gt;Click “Create a Pull Request”&lt;/li&gt;
&lt;li&gt;Add any comments relevant to the pull request. Details are great!&lt;/li&gt;
&lt;li&gt;Click “Send Pull Request”&lt;/li&gt;
&lt;li&gt;The Exceptionless Team will review the request and merge it into the project, provide feedback, etc.
Please let us know if you have any questions. Happy coding!&lt;/li&gt;
&lt;/ul&gt;


</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-03-05-new-support-nancyfx-thanks-luisrudge/"/>
    <updated>2014-03-05T16:10:46-06:00</updated>
    <id>https://exceptionless.com/2014-03-05-new-support-nancyfx-thanks-luisrudge/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright  wp-image-3443&quot; style=&quot;margin-left:20px;&quot; alt=&quot;NancyFX Logo&quot; src=&quot;http://exceptionless.com/assets/logo.png&quot; width=&quot;179&quot; height=&quot;201&quot; data-id=&quot;3443&quot;&gt;We’ve had our first substantial pull request!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Luisrudge has become the first non-trivial contributor to the Exceptionless real-time error reporting project on GitHub, with his NancyFX integration.&lt;/p&gt;
&lt;p&gt;If you’re a NancyFX user, you can find the &lt;a title=&quot;Exceptionless NancyFX package on NuGet&quot; href=&quot;http://www.nuget.org/packages/Exceptionless.Nancy/&quot; target=&quot;_blank&quot;&gt;Nancy package&lt;/a&gt; in our NuGet gallery.&lt;/p&gt;
&lt;p&gt;As a token of our appreciation, Luis received a free year of hosting! Thanks again Luis! Read more about contributing and getting free hosting below.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;What’s NancyFX?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“Nancy is a lightweight, low-ceremony, framework for building HTTP based services on .Net and Mono. The goal of the framework is to stay out of the way as much as possible and provide a super-duper-happy-path to all interactions.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Buit from the ground up (not simply a DSL on another framework)&lt;/li&gt;
&lt;li&gt;Removed underlying framework limitations and feature hacks&lt;/li&gt;
&lt;li&gt;Removed need to reference assemblies you don’t need, keeping things light&lt;/li&gt;
&lt;li&gt;Ability to run anywhere, including ASP.NET/IIS, WCF, self hosted, and any OWIN out of the box&lt;/li&gt;
&lt;li&gt;Super lightweight action declarations for GET, HEAD, PUT, POST, DELETE, OPTIONS and PATCH requests&lt;/li&gt;
&lt;li&gt;View engine integration for Spark, Razor, dotLiquid, SuperSimpleViewEngine, and others&lt;/li&gt;
&lt;li&gt;Request path matching with advanced parameter capabilities, plus the ability to replace the path matching strategy with custom implementations for your needs&lt;/li&gt;
&lt;li&gt;Easy response syntax, enabling you to return things like int, string, HttpStatusCode and Action elements without having to explicitly cast or wrap your response – you just return it and Nancy will do the work for you&lt;/li&gt;
&lt;li&gt;A powerful, light-weight, testing framework to help you verify the behavior of your application&lt;/li&gt;
&lt;li&gt;Content negotiation&lt;/li&gt;
&lt;li&gt;And more…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visit the &lt;a title=&quot;NancyFX Website&quot; href=&quot;http://nancyfx.org/&quot; target=&quot;_blank&quot;&gt;website&lt;/a&gt; or check out the &lt;a title=&quot;NancyFX on GitHub&quot; href=&quot;https://github.com/NancyFx/Nancy&quot; target=&quot;_blank&quot;&gt;GitHub Repo&lt;/a&gt; for more information.&lt;/p&gt;
&lt;h2&gt;Contribute &amp;amp; Get Free Hosting&lt;/h2&gt;
&lt;p&gt;We love pull requests!&lt;/p&gt;
&lt;p&gt;Anyone that contributes a non-trivial enhancement or feature to the Exceptionless project will receive one free year of our small hosting plan.&lt;/p&gt;
&lt;p&gt;If you are interested, please read the &lt;a title=&quot;Contributing to Exceptionless&quot; href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/CONTRIBUTING.md&quot; target=&quot;_blank&quot;&gt;contributing documentation&lt;/a&gt; for more details regarding contributing, standards, etc.&lt;/p&gt;
&lt;p&gt;We welcome everyone to participate in helping us build a better coding community with better apps for users everywhere.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-03-10-achievement-unlocked-1000-accounts-8-million-errors/"/>
    <updated>2014-03-10T18:13:23-05:00</updated>
    <id>https://exceptionless.com/2014-03-10-achievement-unlocked-1000-accounts-8-million-errors/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-3789&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; alt=&quot;8 million errors reported&quot; src=&quot;http://exceptionless.com/assets/8-million-errors.png&quot; width=&quot;174&quot; height=&quot;155&quot; data-id=&quot;3789&quot;&gt;Just over six months ago, we launched Exceptionless with a mission to impact the coding community in a positive way. The goal was, and still is, to help developers find, track, and squash errors, ultimately creating better code for users.&lt;/p&gt;
&lt;p&gt;A few days ago we officially hit &lt;strong&gt;1000 accounts&lt;/strong&gt;, and as of today Exceptionless has reported &lt;strong&gt;8,562,499 errors&lt;/strong&gt;! We couldn’t be more excited!&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Sure, we’re busier than ever now, answering emails, conversing with open source contributors on new features, and working on new features ourselves, but seeing something grow this quickly, that we’ve put so much work into, leaves us with little room to complain. The only real thing we can do is say thank you.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;We’d like to thank all of our users for using the service, providing feedback, asking the hard questions that make us realize we need to make tweaks here and there, and providing us with direction.&lt;/p&gt;
&lt;p&gt;Also, we would specifically like to thank our beta testers that were with us from the beginning. You know who you are, and without you Exceptionless simply would not be the tool it is today.&lt;/p&gt;
&lt;p&gt;And, of course, we have to thank everyone that has contributed to and forked the project since &lt;a href=&quot;https://exceptionless.com/fork-us-exceptionless-goes-open-source/&quot; title=&quot;Exceptionless Goes Open Source&quot;&gt;we went open source&lt;/a&gt; a few weeks ago. 39 forks, 124 &lt;a title=&quot;Exceptionless on GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless&quot; target=&quot;_blank&quot;&gt;GitHub &lt;/a&gt;stars, and a NancyFX client so far – not bad!&lt;/p&gt;
&lt;h2&gt;But Wait, There’s More!&lt;/h2&gt;
&lt;p&gt;They say there’s no sleep for the wicked, so we’re feverishly working on a few major things that will have big long-term benefits for the app.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Moving to Azure for faster, more robust, scaleable hosting&lt;/li&gt;
&lt;li&gt;Simplifying the API to make it easier for new clients to be implemented and improve metric reporting&lt;/li&gt;
&lt;li&gt;Javascript client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That’s just the tip of the iceberg, of course. The to-do list is ever-growing, but we’ve got to start somewhere.&lt;/p&gt;
&lt;h3&gt;Let us know what you think&lt;/h3&gt;
&lt;p&gt;If you are just now joining the Exceptionless community, let us know what you think. Love it or hate it, we want to know why and how to improve.&lt;/p&gt;
&lt;p&gt;Happy bug hunting!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-03-17-exceptionless-1-4-released/"/>
    <updated>2014-03-17T14:46:46-05:00</updated>
    <id>https://exceptionless.com/2014-03-17-exceptionless-1-4-released/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-3971&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; alt=&quot;Exceptionless Version 1.4&quot; src=&quot;http://exceptionless.com/assets/version1.4.png&quot; width=&quot;175&quot; height=&quot;88&quot; data-id=&quot;3971&quot;&gt;Exceptionless 1.4 brings with it both server and client changes, a new client integration, some minor updates, and lots of bug fixes. Check out the changelog items below, and let us know if you have any questions.&lt;/p&gt;
&lt;p&gt;We want to extend our thanks again to the developers that have worked on the project since we &lt;a href=&quot;https://exceptionless.com/fork-us-exceptionless-goes-open-source/&quot; title=&quot;Exceptionless Goes Open Source&quot;&gt;went open source&lt;/a&gt; a few weeks ago. See their contributions below, along with links to their GitHub profiles.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Server&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The app will now be displayed in full screen mode on iOS devices (via Add to Home Screen).&lt;/li&gt;
&lt;li&gt;Added the ability to view the status page while in maintenance mode.&lt;/li&gt;
&lt;li&gt;Added the ability disable error processing on the error controller.&lt;/li&gt;
&lt;li&gt;Various usability improvements dealing with chart date-range selection.&lt;/li&gt;
&lt;li&gt;Added documentation link on the sidebar.&lt;/li&gt;
&lt;li&gt;Added checks to limit the number of max results returned from various API methods.&lt;/li&gt;
&lt;li&gt;Add new indexes to help performance and fix some inefficient queries.&lt;/li&gt;
&lt;li&gt;Changed the way we are filtering fixed and hidden errors to be more efficient.&lt;/li&gt;
&lt;li&gt;Updated all indexes to be created in the background if they don’t already exist.&lt;/li&gt;
&lt;li&gt;Switched the JavaScriptEngineSwitcher to use JurassicJsEngine. Jurassic has no external dependencies on IE or Windows specific libraries.&lt;/li&gt;
&lt;li&gt;Fixed a race condition that would throw an exception when updating stats.&lt;/li&gt;
&lt;li&gt;Fixed a bug where the EnforceRetentionLimitsAction was returning all the query results and then paging them.&lt;/li&gt;
&lt;li&gt;The upgrade script now upgrades the database in a background thread.&lt;/li&gt;
&lt;li&gt;Fixed a bug where an error with no stack trace wouldn’t be processed.&lt;/li&gt;
&lt;li&gt;Fixed a bug where the list loading indicators could spin non-stop.&lt;/li&gt;
&lt;li&gt;Fixed a bug where errors could be stored with the incorrect DateTimeOffset. This caused inconsistencies between charts and list data.&lt;/li&gt;
&lt;li&gt;Fixed a bug where the error stack’s tags were not being synced with the error instances.&lt;/li&gt;
&lt;li&gt;Fixed a bug where the terms and privacy links could point to the wrong domain.&lt;/li&gt;
&lt;li&gt;Fixed a bug where a UriFormatException could be thrown when viewing an error occurrence. This could be caused by third party obfuscators that create a new pdb file.&lt;/li&gt;
&lt;li&gt;Updated the UpgradableJsonMediaTypeFormatter to handle errors gracefully.&lt;/li&gt;
&lt;li&gt;Fixed a bug where the EncodingDelegatingHandler could throw an exception when there was no request content.&lt;/li&gt;
&lt;li&gt;Fixed a bug that could &lt;a href=&quot;https://jira.mongodb.org/browse/CSHARP-893&quot; target=&quot;_blank&quot;&gt;prevent an error from being processed&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Client&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added support for &lt;a title=&quot;NancyFX&quot; href=&quot;http://nancyfx.org/&quot; target=&quot;_blank&quot;&gt;Nancy &lt;/a&gt;(Contrib: &lt;a title=&quot;Luis Rudge on GitHub&quot; href=&quot;https://github.com/luisrudge&quot; target=&quot;_blank&quot;&gt;luisrudge&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Better support for low trust environments (Contrib: &lt;a title=&quot;Obsbne on GitHub&quot; href=&quot;https://github.com/obsbne&quot; target=&quot;_blank&quot;&gt;obsbne&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Fixed a bug where the MVC integration could interfere with custom error pages.&lt;/li&gt;
&lt;li&gt;Fixed a bug where a batch of errors wouldn’t be sent if an error occurred while sending a previous error in the same batch.&lt;/li&gt;
&lt;li&gt;The client will now attempt to delete an already sent error when ProcessQueue is called.&lt;/li&gt;
&lt;li&gt;Fixed a bug where an exception would occur while deleting the manifest file that was saved by a different or elevated user.&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-03-26-whats-included-exceptionless-detailed-error-reports/"/>
    <updated>2014-03-26T09:00:17-05:00</updated>
    <id>https://exceptionless.com/2014-03-26-whats-included-exceptionless-detailed-error-reports/</id>
    <content type="html">&lt;p&gt;When an error occurs in your app, you need to know the critical details, fast, so you can drill down and fix it. We get it – we’re developers too – that’s why we built Exceptionless.&lt;/p&gt;
&lt;p&gt;The trick was organizing the data so it didn’t overwhelm our users, while still providing all the important stuff so developers wouldn’t have to spend extra time tracking down versions, requesting stack traces, or pulling teeth to get environment information.&lt;/p&gt;
&lt;p&gt;Lets take a look at the &lt;strong&gt;default&lt;/strong&gt; information included with every error. We say default because you can easily &lt;strong&gt;add your own&lt;/strong&gt; information with custom objects.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Each Error Occurrence&lt;/h2&gt;
&lt;p&gt;Every single error occurrence has the following tabs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overview&lt;/li&gt;
&lt;li&gt;Exception&lt;/li&gt;
&lt;li&gt;Request&lt;/li&gt;
&lt;li&gt;Environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On each of these, you can go to the previous or next occurrence for easy comparison.&lt;/p&gt;
&lt;p&gt;Lets take a closer look at each tab.&lt;/p&gt;
&lt;h3&gt;Error Overview&lt;/h3&gt;
&lt;p&gt;&lt;a style=&quot;color: #005580; text-decoration: underline;&quot; href=&quot;http://exceptionless.com/assets/error-overview-tab.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-4174&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; alt=&quot;Exception Reporting Overview&quot; src=&quot;http://exceptionless.com/assets/error-overview-tab-248x300.jpg&quot; width=&quot;248&quot; height=&quot;300&quot; data-id=&quot;4174&quot; srcset=&quot;https://exceptionless.com/assets/error-overview-tab-248x300.jpg 248w, https://exceptionless.com/assets/error-overview-tab.jpg 709w&quot; sizes=&quot;(max-width: 248px) 100vw, 248px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The overview tab holds general information for that occurrence, including the variables below. Sometimes this is all you’ll need to track down the bug. Sometimes you’ll need to dig deeper.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Occurred On&lt;/li&gt;
&lt;li&gt;Error Type&lt;/li&gt;
&lt;li&gt;Message&lt;/li&gt;
&lt;li&gt;Platform&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;Referrer&lt;/li&gt;
&lt;li&gt;Browser&lt;/li&gt;
&lt;li&gt;Browser OS&lt;/li&gt;
&lt;li&gt;User Name&lt;/li&gt;
&lt;li&gt;Stack Trace&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Exception Tab&lt;/h3&gt;
&lt;p&gt;&lt;a style=&quot;color: #005580; text-decoration: underline;&quot; href=&quot;http://exceptionless.com/assets/error-exception-tab.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-4175 alignright&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; alt=&quot;Exceptionless Exception Details&quot; src=&quot;http://exceptionless.com/assets/error-exception-tab-228x300.jpg&quot; width=&quot;228&quot; height=&quot;300&quot; data-id=&quot;4175&quot; srcset=&quot;https://exceptionless.com/assets/error-exception-tab-228x300.jpg 228w, https://exceptionless.com/assets/error-exception-tab.jpg 707w&quot; sizes=&quot;(max-width: 228px) 100vw, 228px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;
  On the exception tab, we reference the timestamp, error type, message, and stack trace, while also providing you with all of the loaded modules, including versions.
&lt;/p&gt;
&lt;h3 style=&quot;clear: both;&quot;&gt;
  Request Tab
&lt;/h3&gt;
&lt;p&gt;&lt;a style=&quot;clear: both; color: #005580; text-decoration: underline;&quot; href=&quot;http://exceptionless.com/assets/error-request-tab.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-4176&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; alt=&quot;Exception Request Details&quot; src=&quot;http://exceptionless.com/assets/error-request-tab-225x300.jpg&quot; width=&quot;225&quot; height=&quot;300&quot; data-id=&quot;4176&quot; srcset=&quot;https://exceptionless.com/assets/error-request-tab-225x300.jpg 225w, https://exceptionless.com/assets/error-request-tab.jpg 705w&quot; sizes=&quot;(max-width: 225px) 100vw, 225px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here we have tons of important request info:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Occurred On&lt;/li&gt;
&lt;li&gt;HTTP Method&lt;/li&gt;
&lt;li&gt;URL&lt;/li&gt;
&lt;li&gt;Referrer&lt;/li&gt;
&lt;li&gt;Client IP&lt;/li&gt;
&lt;li&gt;User Agent&lt;/li&gt;
&lt;li&gt;Browser&lt;/li&gt;
&lt;li&gt;Browser OS&lt;/li&gt;
&lt;li&gt;Device&lt;/li&gt;
&lt;li&gt;Is Known Bot&lt;/li&gt;
&lt;li&gt;Cookie Values&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 style=&quot;clear: both;&quot;&gt;
  Environment Tab
&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/error-environment-tab.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-4177&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; alt=&quot;Exception Environment Details&quot; src=&quot;http://exceptionless.com/assets/error-environment-tab-198x300.jpg&quot; width=&quot;198&quot; height=&quot;300&quot; data-id=&quot;4177&quot; srcset=&quot;https://exceptionless.com/assets/error-environment-tab-198x300.jpg 198w, https://exceptionless.com/assets/error-environment-tab.jpg 635w&quot; sizes=&quot;(max-width: 198px) 100vw, 198px&quot;&gt;&lt;/a&gt;Environment isn’t something that we always think about, but in some cases it can tell us a lot about the exception. We’ve got you covered!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Occurred On&lt;/li&gt;
&lt;li&gt;Machine Name&lt;/li&gt;
&lt;li&gt;IP Address&lt;/li&gt;
&lt;li&gt;Processor Count&lt;/li&gt;
&lt;li&gt;Total Memory&lt;/li&gt;
&lt;li&gt;Available Memory&lt;/li&gt;
&lt;li&gt;Process Memory&lt;/li&gt;
&lt;li&gt;OS Name&lt;/li&gt;
&lt;li&gt;OS Version&lt;/li&gt;
&lt;li&gt;Architecture&lt;/li&gt;
&lt;li&gt;Runtime Version&lt;/li&gt;
&lt;li&gt;Process ID&lt;/li&gt;
&lt;li&gt;Process Name&lt;/li&gt;
&lt;li&gt;Command Line&lt;/li&gt;
&lt;li&gt;Client Information
&lt;ul&gt;
&lt;li&gt;Install Date&lt;/li&gt;
&lt;li&gt;Version&lt;/li&gt;
&lt;li&gt;Platform&lt;/li&gt;
&lt;li&gt;Submission Method&lt;/li&gt;
&lt;li&gt;Application Starts&lt;/li&gt;
&lt;li&gt;Errors Submitted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How Did We Do?&lt;/h2&gt;
&lt;p&gt;We have done our best to include all the important information in an organized, easy to read, intuitive interface. Think we’re missing something? Think we can organize it differently? Let us know! We love feedback.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-04-04-exceptionless-now-hosted-azure/"/>
    <updated>2014-04-04T15:22:33-05:00</updated>
    <id>https://exceptionless.com/2014-04-04-exceptionless-now-hosted-azure/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/logo1.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-4531&quot; style=&quot;margin: 10px;&quot; alt=&quot;Microsoft Azure&quot; src=&quot;http://exceptionless.com/assets/logo1.png&quot; width=&quot;165&quot; height=&quot;21&quot; data-id=&quot;4531&quot;&gt;&lt;/a&gt;As usual, we’ve been working on ways to improve the Exceptionless service.&lt;/p&gt;
&lt;p&gt;Due to growing demand for our hosted error reporting plans, we decided to move everything to the Microsoft Azure Cloud platform.&lt;/p&gt;
&lt;p&gt;We completed the move last week and, except for a few small hiccups that were quickly resolved, everything is already running faster across the board!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Benefits of Azure&lt;/h2&gt;
&lt;h3&gt;Bring on the errors!&lt;/h3&gt;
&lt;p&gt;As our user base continues to expand, the first priority is to continue providing the best service possible. Azure allows us to guarantee scaleability, and has already proven to be &lt;strong&gt;much&lt;/strong&gt; faster and more responsive. We’re ready for whatever you can throw at us.&lt;/p&gt;
&lt;h3&gt;Focus&lt;/h3&gt;
&lt;p&gt;Developing infrastructure takes time, and we would rather be developing the code behind Exceptionless. The move to Azure allows us to do just that, taking a lot off our plate in terms of hosting. It’s pretty awesome.&lt;/p&gt;
&lt;h3&gt;Future Azure partner&lt;/h3&gt;
&lt;p&gt;In the future, we would like to become an Azure partner and be listed as one of the approved store add-ons. We’re not there yet, because we’ve got to go through the application process, etc, etc, but it’s in the works!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Azure is an open and flexible cloud platform that enables you to quickly build, deploy and manage applications across a global network of Microsoft-managed datacenters. You can build applications using any language, tool or framework. And you can integrate your public cloud applications with your existing IT environment.” – Microsoft Azure&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We are happy with the move and think it means great things for the future of Exceptionless. We hope our users appreciate the speed and responsiveness, and can see the improvements in service.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-04-11-intelligent-app-error-grouping-helps-organize-exceptions/"/>
    <updated>2014-04-11T17:09:46-05:00</updated>
    <id>https://exceptionless.com/2014-04-11-intelligent-app-error-grouping-helps-organize-exceptions/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-4831&quot; alt=&quot;Exception Grouping Totals&quot; src=&quot;http://exceptionless.com/assets/thumbnail.png&quot; width=&quot;164&quot; height=&quot;120&quot; data-id=&quot;4831&quot;&gt;Having a tool like Exceptionless to report and log your software’s errors is great, but many of our clients experience thousands of instances of each error over various lengths of time, which can become overwhelming quickly.&lt;/p&gt;
&lt;p&gt;We couldn’t just leave them with a huge list of individual error occurrences to drudge through, so we went through several different potential options until we devised the best way to group them.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Grouping Errors Intelligently&lt;/h2&gt;
&lt;h3&gt;What’s there to group by?&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;The details we provide on each error give us countless ways to group them. While some wouldn’t make sense, we considered everything.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Date&lt;/li&gt;
&lt;li&gt;Type&lt;/li&gt;
&lt;li&gt;Message&lt;/li&gt;
&lt;li&gt;Platform&lt;/li&gt;
&lt;li&gt;Location&lt;/li&gt;
&lt;li&gt;Browser information&lt;/li&gt;
&lt;li&gt;User information&lt;/li&gt;
&lt;li&gt;Environment information&lt;/li&gt;
&lt;li&gt;Request details&lt;/li&gt;
&lt;li&gt;and more…&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Drill down fast&lt;/h3&gt;
&lt;p&gt;Since we use Exceptionless to report and track down our own bugs, it was easy to put ourselves in our own shoes and think about what would allow us to drill down and fix errors quickly.&lt;/p&gt;
&lt;p&gt;With that mindset, we decided that there were two important error details that should be used for grouping.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Where the error occurred&lt;/strong&gt;&lt;br&gt;
We felt that, first and foremost, we wanted to know where the error was occurring. Even though there is a possibility it might be occurring in multiple locations, we felt that each location represented its own importance in our grouping scheme.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type of error&lt;/strong&gt;&lt;br&gt;
The type of error is also very important, and we felt that when you combine type with location, you get a set of errors that holds enough significant explicit data to be recognized as a group.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What Grouping Allows Us to Do&lt;/h2&gt;
&lt;p&gt;When we group app errors by location and type, it allows us to report error instance counts, first occurrences, frequency of occurrence, and most recent occurrence on the dashboard.&lt;figure id=&quot;attachment_4823&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/dashboard-home.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-4823 &quot; alt=&quot;Grouping Error Dashboard&quot; src=&quot;http://exceptionless.com/assets/dashboard-home-150x150.png&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;4823&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Exceptionless Dashboard&lt;/figcaption&gt; &lt;figure id=&quot;attachment_4825&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/group-details.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-4825 &quot; alt=&quot;Error Group Details&quot; src=&quot;http://exceptionless.com/assets/group-details-150x150.png&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;4825&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Error Group Details&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;This seemingly basic grouping forms the basis for the different Exceptionless dashboard tabs and pages, thus becoming a major cornerstone for the platform. Click into a group, and you see the title, exception type, and location, along with a graph of occurrences and the most recent occurrences.&lt;/p&gt;
&lt;p&gt;From there, you can drill down into each occurrence and scrutinize all of the &lt;a href=&quot;http://exceptionless.com/whats-included-exceptionless-detailed-error-reports/&quot; title=&quot;Error Report Details&quot;&gt;error’s details&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That’s how we do it! Any questions? Let us know.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-04-18-net-error-exception-handling-wpf-mvc/"/>
    <updated>2014-04-18T14:31:28-05:00</updated>
    <id>https://exceptionless.com/2014-04-18-net-error-exception-handling-wpf-mvc/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-1268&quot; style=&quot;margin-left: 20px;&quot; alt=&quot;Visual .NET Exception Graph&quot; src=&quot;http://exceptionless.com/assets/graph-300x122.jpg&quot; width=&quot;300&quot; height=&quot;122&quot; data-id=&quot;1268&quot; srcset=&quot;https://exceptionless.com/assets/graph-300x122.jpg 300w, https://exceptionless.com/assets/graph.jpg 700w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;Having a handle on your code’s errors is important. Thousands, if not millions, of exceptions are thrown every day &lt;strong&gt;in production code&lt;/strong&gt; without anyone knowing. These errors might be affecting the bottom line, or they could be negligible – either way, it’s important to know that they exist, how often they are occurring, and what parts of the app are affected.&lt;/p&gt;
&lt;p&gt;Are you looking for a comprehensive tool that handles logging, reporting, grouping, and notifications for exceptions in your ASP.NET, Web API, WebForms, WPF, Console, MVC, or NancyFX app? Exceptionless does all that, and more. Lets take a look.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Who is Exceptionless for?&lt;/h2&gt;
&lt;p&gt;Exceptionless is for developers and dev teams that want to have enhanced visibility of errors, track down bugs faster, tighten up code, and produce a better overall product for the end user.&lt;/p&gt;
&lt;p&gt;Currently, the platform is .NET based and has client support for ASP.NET, Web API, WebForms, WPF, Console, MFC, and NancyFX. Soon, we will support clients for Javascript, PHP, Ruby on Rails, Java, Python, and more. Developers are welcome to &lt;a title=&quot;Exceptionless on GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless&quot; target=&quot;_blank&quot;&gt;work on supporting other technologies&lt;/a&gt;, as well. &lt;strong&gt;Contributors receive free hosting credits!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Take the Tour&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/dashboard-home.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-4823&quot; style=&quot;margin-left:10px;&quot; alt=&quot;Grouping Error Dashboard&quot; src=&quot;http://exceptionless.com/assets/dashboard-home-300x198.png&quot; width=&quot;300&quot; height=&quot;198&quot; data-id=&quot;4823&quot; srcset=&quot;https://exceptionless.com/assets/dashboard-home-300x198.png 300w, https://exceptionless.com/assets/dashboard-home-1024x676.png 1024w, https://exceptionless.com/assets/dashboard-home.png 1198w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;In a nutshell, Exceptionless provides a dashboard, detailed error reports, custom object handling, intelligent error grouping, email notifications, and a fluent API for sending manual error reports.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless Tour&quot; href=&quot;http://exceptionless.com/tour/&quot; target=&quot;_blank&quot;&gt;Take a look at the tour page&lt;/a&gt; for more details on each feature, and follow the the links at the end of each section to read even more about each. Specifically, make sure to check out the &lt;a title=&quot;An in-depth look at the Exceptionless Project Portal&quot; href=&quot;http://exceptionless.com/project-portal-tour/&quot; target=&quot;_blank&quot;&gt;in-depth look at the Exceptionless project portal &lt;/a&gt;blog post. It has screenshots and explanations for each feature.&lt;/p&gt;
&lt;p&gt;Feel free to &lt;a title=&quot;Contact Exceptionless&quot; href=&quot;http://exceptionless.com/contact/&quot; target=&quot;_blank&quot;&gt;contact us&lt;/a&gt; with any questions, or &lt;a title=&quot;Sign Up for Exceptionless&quot; href=&quot;https://app.exceptionless.com/signup&quot; target=&quot;_blank&quot;&gt;sign up and take it for a test drive&lt;/a&gt; – implementation takes minutes!&lt;/p&gt;
&lt;h2&gt;Open Source – Host it Yourself or with Us&lt;/h2&gt;
&lt;p&gt;Back in February, we &lt;a title=&quot;Open Source Error Reporting Tool&quot; href=&quot;http://exceptionless.com/fork-us-exceptionless-goes-open-source/&quot; target=&quot;_blank&quot;&gt;went open source&lt;/a&gt;, allowing developers that have the resources and infrastructure to host Exceptionless for free. Since then, we’ve had several contributors to the project and more than 50 forks. Pretty exciting stuff!&lt;/p&gt;
&lt;p&gt;We offer &lt;strong&gt;extremely reasonable hosting services&lt;/strong&gt; for those that would prefer we handle that side of things. The single user, single project hosting account is free, then the small team account starts at $15 per month. Pricing scales from there. Check out the &lt;a title=&quot;Exceptionless pricing&quot; href=&quot;http://exceptionless.com/pricing/&quot; target=&quot;_blank&quot;&gt;Pricing Plans page&lt;/a&gt; for full pricing details and frequently asked questions.&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://app.exceptionless.com/signup&quot;&gt;Sign Up For &lt;strong&gt;FREE&lt;/strong&gt;!&lt;/a&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-04-29-recent-exceptionless-case-studies/"/>
    <updated>2014-04-29T23:13:20-05:00</updated>
    <id>https://exceptionless.com/2014-04-29-recent-exceptionless-case-studies/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/error-stack.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot; wp-image-1226 alignright&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; alt=&quot;Error Stack Dashboard&quot; src=&quot;http://exceptionless.com/assets/error-stack-300x264.jpg&quot; width=&quot;180&quot; height=&quot;158&quot; data-id=&quot;1226&quot; srcset=&quot;https://exceptionless.com/assets/error-stack-300x264.jpg 300w, https://exceptionless.com/assets/error-stack.jpg 800w&quot; sizes=&quot;(max-width: 180px) 100vw, 180px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We like to know how Exceptionless is helping its users, and we love it when we get feedback! Every once in a while, we like to share a story or two so we can drive home the benefits of having a real-time exception logging service tied into code projects.&lt;/p&gt;
&lt;p&gt;Surveys are sometimes sent out to users, and we wanted to share a few recent responses.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Case Study Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What is the &lt;strong&gt;number one customer-facing bug&lt;/strong&gt; that Exceptionless has helped you track down? Can you give us a brief description of the bug and how you solved it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 1:&lt;/strong&gt; “Missing DLLs in the client environment, due to required 3rd party apps not being installed (eg: Crystal Reports runtime). [Exceptionless] enabled me to create a list of missing DLLs and computers for relay to the client.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 2:&lt;/strong&gt; They were previously handling their own exception logging well and don’t have any serious customer-facing errors coming in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you first started using Exceptionless, were you surprised by the number of errors that were being reported? Approximately &lt;strong&gt;how many were you seeing per day&lt;/strong&gt;?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 1:&lt;/strong&gt; “Not really, but just because I had written a similar tool that logged these before, they just were not as accessible (database table on web service).” The user reported that the above bug was appearing 10-15 times each day.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 2:&lt;/strong&gt; They were already handling their error logging and already had errors down to a minimum, around 50 per month. “The primary reasons that we switched to Exceptionless from our own code is that Exceptionless captures additional detail (including code line numbers), Exceptionless has a better interface and design for reviewing and managing errors and bugs (including summary views that we didn’t previously have), and we no longer need to maintain our own error-logging code.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the &lt;strong&gt;number one internal bug&lt;/strong&gt; that Exceptionless has helped you track down? Can you give us a brief description of the bug and how you solved it?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 1:&lt;/strong&gt; N/A&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 2:&lt;/strong&gt; “…a small number of situations where our code doesn’t correctly handle empty recordsets (that is, where, based on the specific query string parameters in the URL, no corresponding records are found in the database and the page is expecting that there will always be records to display).”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What is the &lt;strong&gt;number one feature request&lt;/strong&gt; or change that you would like to see the Exceptionleass Team tackle?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 1:&lt;/strong&gt; “More options to filter dashboard by tags/versions/environment variables. Custom reporting, exporting to CSV file etc or other way to import them into TFS or similar.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 2:&lt;/strong&gt; “…my number one request is probably for additional information in daily summary emails and for a combined daily summary. Notification defaults and moving notification settings out of the project setup is probably a close second; or perhaps the ability to add comments when marking an issue as fixed would be my second highest feature request.”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have any other other &lt;strong&gt;examples of Exceptionless helping you squash bugs&lt;/strong&gt;, please share them below – we would love to hear them!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 1:&lt;/strong&gt; N/A&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User 2:&lt;/strong&gt; “…in our small team, the additional information from Exceptionless (as well as the process of converting to Exceptionless) has prompted us to review and solve a few ongoing bugs that we were aware of…”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What has Exceptionless Done for You?&lt;/h2&gt;
&lt;p&gt;If you use Exceptionless to log, report, organize, and squash errors in your code, we want to hear how it helps, what kind of crazy errors you are eliminating, and your general thoughts on the project! Don’t be shy, we won’t bite.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Thanks to Philip with the &lt;a title=&quot;Beth Israel Deaconess Medical Center&quot; href=&quot;http://bidmc.org/&quot; target=&quot;_blank&quot;&gt;Beth Israel Deaconess Medical Center&lt;/a&gt; and Michael with &lt;a title=&quot;Customer Logic&quot; href=&quot;http://www.customerlogic.com.au/&quot; target=&quot;_blank&quot;&gt;Customer Logic&lt;/a&gt; for their case study contributions. We appreciate it guys!&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-05-04-web-application-errors-80-20-rule/"/>
    <updated>2014-05-04T19:03:38-05:00</updated>
    <id>https://exceptionless.com/2014-05-04-web-application-errors-80-20-rule/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/most-frequent.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright  wp-image-146&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; alt=&quot;Most Frequent Errors&quot; src=&quot;http://exceptionless.com/assets/most-frequent-300x262.png&quot; width=&quot;192&quot; height=&quot;168&quot; data-id=&quot;146&quot; srcset=&quot;https://exceptionless.com/assets/most-frequent-300x262.png 300w, https://exceptionless.com/assets/most-frequent.png 715w&quot; sizes=&quot;(max-width: 192px) 100vw, 192px&quot;&gt;&lt;/a&gt;You know the 80-20 rule. The one marketers, managers, bigwigs, writers, speakers, and everyone else references to tell you what to focus on or why the widgets aren’t selling like they should.&lt;/p&gt;
&lt;p&gt;Well, as painful as it might be to hear the rule applied to yet another scenario, we’re here today to let you know that 80-20 can be applied, in many cases, to your code’s exceptions as well. &lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;20% of Errors Cause 80% of Exception Instances&lt;/h2&gt;
&lt;p&gt;That’s not so bad, is it?&lt;/p&gt;
&lt;p&gt;All we’re trying to point out is that when you start tracking and organizing the errors in your code, inevitably you’ll start to realize that a small percentage of bugs are causing the majority of your total errors.&lt;/p&gt;
&lt;h3&gt;What we did about it&lt;/h3&gt;
&lt;p&gt;We realized this ourselves, so we built the “Most Frequent Errors” report right into the Exceptionless dashboard.&lt;/p&gt;
&lt;p&gt;When you log into your account, you immediately see which errors are causing the largest number of exceptions, how many instances of each there is, when the first occurrence was, and when the last occurrence was.&lt;/p&gt;
&lt;p&gt;From there, you can click in, view there error’s details, and hopefully find a quick resolution to the problem.&lt;/p&gt;
&lt;h2&gt;Most Frequent &amp;lt;&amp;gt; Most Important&lt;/h2&gt;
&lt;p&gt;While it’s great to chip away at the most frequent errors, it’s worth pointing out that most frequent doesn’t always mean most important, so be sure to focus on bottom line, customer facing, and major functionality issues first!&lt;/p&gt;
&lt;h2&gt;Have You Observed the 80-20 in the Wild?&lt;/h2&gt;
&lt;p&gt;In your coding adventures, have you found the 80-20 rule to apply to your exceptions? Was it something you found quickly, or did you track down numerous instances of the same error before realizing it?&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-05-20-exceptionless-2-in-the-making/"/>
    <updated>2014-05-20T20:45:54-05:00</updated>
    <id>https://exceptionless.com/2014-05-20-exceptionless-2-in-the-making/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/v2blog.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-7580&quot; alt=&quot;Exceptionless Version 2.0 Sneak Peek&quot; src=&quot;http://exceptionless.com/assets/v2blog.png&quot; width=&quot;160&quot; height=&quot;154&quot; data-id=&quot;7580&quot;&gt;&lt;/a&gt;It may seem quiet in Exceptionless land, but the truth is we’ve been writing, and re-writing, more code than you can point a cursor at. If it weren’t a labor of love, our fingers would have mutinied long ago, but luckily they are in it for the long haul and are churning out some seriously &lt;strong&gt;sweet new features and rewrites&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Exceptionless 2.0 will include many of the feature requests that have come in since we launched, and will drastically expand on the current functionality. We know you’ll love it, so continue reading for a high level view of what’s coming in the near future.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Event Based System&lt;/h2&gt;
&lt;p&gt;Many users have asked for ways to use Exceptionless to report additional types of events, rather than just errors. With 2.0, we are moving to an event based system that will accommodate this.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Exceptionless-2.0-Overview#api-simplified&quot; name=&quot;user-content-api-simplified&quot;&gt;&lt;/a&gt;API Simplified&lt;/h2&gt;
&lt;p&gt;Since &lt;a href=&quot;http://exceptionless.com/fork-us-exceptionless-goes-open-source/&quot; title=&quot;Fork Us! Exceptionless Goes Open Source&quot;&gt;going open source&lt;/a&gt;, we’ve wanted to simplify the API and make it easier to work with. We’re taking the time to do it now, and it’s going to be &lt;strong&gt;awesome.&lt;/strong&gt; Watch out!&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Exceptionless-2.0-Overview#pluggable-system&quot; name=&quot;user-content-pluggable-system&quot;&gt;&lt;/a&gt;Pluggable System&lt;/h2&gt;
&lt;p&gt;Plugins will allow customization and translation throughout the Exceptionless platform, including integration with third-party services and more.&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;color: inherit; font-family: inherit; font-size: 31.5px;&quot;&gt;Client Rewrite&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;The client is being re-written be highly simplified and extensible, opening up platform support and ease of functionality additions.&lt;/p&gt;
&lt;h2&gt;Coming Soon&lt;/h2&gt;
&lt;p&gt;Version 2.0 is coming soon. In the mean time, look for more details and sneak peeks containing examples of functionality and usage. We can’t wait to show the world!&lt;/p&gt;
&lt;p&gt;Don’t forget to &lt;a title=&quot;Exceptionless 2.0 on Github&quot; href=&quot;https://github.com/exceptionless/Exceptionless&quot; target=&quot;_blank&quot;&gt;follow along with the development on GitHub&lt;/a&gt; and watch Exceptionless 2.0 while it’s being built!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-05-28-event-based-reporting-system-coming-version-2-0/"/>
    <updated>2014-05-28T09:00:43-05:00</updated>
    <id>https://exceptionless.com/2014-05-28-event-based-reporting-system-coming-version-2-0/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/errors-only.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright  wp-image-8584&quot; src=&quot;http://exceptionless.com/assets/errors-only.png&quot; alt=&quot;Event Based Reporting System&quot; width=&quot;128&quot; height=&quot;123&quot; data-id=&quot;8584&quot;&gt;&lt;/a&gt;We &lt;a title=&quot;Exceptionless 2.0 – In the Making&quot; href=&quot;http://exceptionless.com/exceptionless-2-in-the-making/&quot; target=&quot;_blank&quot;&gt;hinted &lt;/a&gt;that more details on the upcoming Exceptionless 2.0 release would get announced soon, and here we are! Lets dive in a bit further, shall we?&lt;/p&gt;
&lt;p&gt;Many users have asked for ways to use Exceptionless to report additional types of events, rather than just errors. With version 2.0, we are moving to an event based system that will accommodate such requests.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;What’s an Event Based Real-Time Reporting Tool Look Like?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The new system allows us to receive literally any data people want to send us instead of only allowing errors.&lt;/li&gt;
&lt;li&gt;Event posts can be as simple as this:&lt;br&gt;
&lt;a href=&quot;http://exceptionless.com/assets/ex-curl.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignnone wp-image-8588 size-full&quot; style=&quot;margin-top: 20px; margin-bottom: 20px;&quot; src=&quot;http://exceptionless.com/assets/ex-curl.png&quot; alt=&quot;Post Event Exceptionless&quot; width=&quot;427&quot; height=&quot;160&quot; data-id=&quot;8588&quot; srcset=&quot;https://exceptionless.com/assets/ex-curl.png 427w, https://exceptionless.com/assets/ex-curl-300x112.png 300w&quot; sizes=&quot;(max-width: 427px) 100vw, 427px&quot;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You can send log messages or even entire log files.&lt;/li&gt;
&lt;li&gt;Log messages can contain extended data objects just like errors can now.&lt;/li&gt;
&lt;li&gt;You can post random JSON objects and the data within them will be treated as extended data.&lt;/li&gt;
&lt;li&gt;You can post batches of events instead of only being able to send one at a time.&lt;/li&gt;
&lt;li&gt;You can send feature usage events that let you see how often features of your application are being used. Think about how useful that will be!&lt;/li&gt;
&lt;li&gt;You can send session start and end events that will enable you to know what percentage of users are affected by errors and enable you to better know what your priorities should be.&lt;/li&gt;
&lt;li&gt;We will be gathering enough data to make it easy for us to begin putting together some &lt;strong&gt;very&lt;/strong&gt; useful analytic reports.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’re pretty excited about the switch from error-only to send-us-any-event-you-can-think-of real-time reporting, logging, and notifications. We think it’s going to be awesome, and it’s almost scary how much of a playground Exceptionless is going to turn into for some of our customers. We’re not pushing the limits, we’re pushing for &lt;strong&gt;no limits&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;Ideas? Concerns? Let us know. We’re working hard to wrap up Exceptionless 2.0, but there’s still a lot more bells and whistles we’re polishing before launch! Keep an eye out for still more sneak peek material in the coming weeks!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-06-03-exceptionless-1-5-released/"/>
    <updated>2014-06-03T11:00:09-05:00</updated>
    <id>https://exceptionless.com/2014-06-03-exceptionless-1-5-released/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-8849&quot; style=&quot;margin: 0 0 10px 20px;&quot; src=&quot;http://exceptionless.com/assets/version1.5.png&quot; alt=&quot;Exceptionless Version 1.5&quot; width=&quot;175&quot; height=&quot;88&quot; data-id=&quot;8849&quot;&gt;While we’re &lt;a href=&quot;http://exceptionless.com/exceptionless-2-in-the-making/&quot; title=&quot;Exceptionless 2.0 – In the Making&quot;&gt;on the march to Exceptionless 2.0&lt;/a&gt;, we’re still making updates and fixing bugs on version 1. Today, we’d like to announce that Exceptionless 1.5 has been released, which includes several server changes and bug fixes, as well as major client code base optimization.&lt;/p&gt;
&lt;p&gt;Please &lt;strong&gt;update your client to version 1.5&lt;/strong&gt; and take a look at the other changes and bug fixes, below. We’ve done quite a bit of work to notifications, added throttling to improve coverage on small and free plans, and improved performance in a few places.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Server Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;strong&gt;throttling to accounts that are over their usage limits&lt;/strong&gt;. If an account is sending a high number of errors, the errors will be throttled on an hourly basis so that the entire plan limit won’t be used up immediately. This allows for a distributed sampling of the errors instead of only capturing everything in a short period of time.&lt;/li&gt;
&lt;li&gt;Added a site notification that shows you when error submissions are being throttled or if you are over your monthly plan limits.&lt;/li&gt;
&lt;li&gt;Removed total count from most recent errors list as it was a very expensive to calculate while providing little value.&lt;/li&gt;
&lt;li&gt;Fixed a bug with notifications that could cause some users to get spammed. Now notifications only send a maximum of 10 notifications per project every 30 minutes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Greatly simplified the authentication logic&lt;/strong&gt; for the web api pipeline.&lt;/li&gt;
&lt;li&gt;Added the ability to &lt;strong&gt;print all content on the error occurrence page&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The pager will no longer scroll to the top of the current list when changing pages.&lt;/li&gt;
&lt;li&gt;Updated the paged lists to only refresh the list data via push notifications when you are on the first page.&lt;/li&gt;
&lt;li&gt;The list data will only be updated in real time if the data matches the current filter criteria.&lt;/li&gt;
&lt;li&gt;Fixed a bug where the loading indicators would appear on the suspended and manage organization pages.&lt;/li&gt;
&lt;li&gt;Fixed a bug where the save button on the manage organization page would have improper styling.&lt;/li&gt;
&lt;li&gt;Fixed a bug where a HttpAntiForgeryException could be thrown when accessing the website.&lt;/li&gt;
&lt;li&gt;Fixed a bug where a ArgumentException would be thrown if multiple model validation errors occurred on a single page.&lt;/li&gt;
&lt;li&gt;Fixed a bug where a NullReferenceException could be thrown when signing up.&lt;/li&gt;
&lt;li&gt;Added some additional checks to try and resolve the user profile when an invited user signs up.&lt;/li&gt;
&lt;li&gt;Fixed a bug where an updated organization notification could be sent before the user was authorized to access the organization.&lt;/li&gt;
&lt;li&gt;Fixed a bug where empty OS Name and Version values were being shown in the errors environment section even if they didn’t exist. This could happen if the client was reporting from an azure website instance.&lt;/li&gt;
&lt;li&gt;Changed billing plans to use per month error limits.&lt;/li&gt;
&lt;li&gt;Fixed a bug where the BillingManager could throw a NullReferenceException for a newly added organization. This could happen because the primary node had not replicated the content to the secondary nodes or the data wasn’t cached on creation.&lt;/li&gt;
&lt;li&gt;Updated various MongoDB collections to not persist empty array fields.&lt;/li&gt;
&lt;li&gt;Fixed a bug where some cache entries were not automatically expiring.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Client Changes&lt;/h2&gt;
&lt;p&gt;It’s &lt;strong&gt;highly recommend that you update your clients&lt;/strong&gt; to 1.5 as we did major optimizations to the client code base.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Greatly simplified how the client processes and sends errors. The client now properly handles the various status codes that can be returned from the service.&lt;/li&gt;
&lt;li&gt;Added an event that allows you to customize the request object before it is sent to the service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;As always, please let us know if you have any questions!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-06-12-upcoming-exceptionless-2-0-simplified-api/"/>
    <updated>2014-06-12T09:00:13-05:00</updated>
    <id>https://exceptionless.com/2014-06-12-upcoming-exceptionless-2-0-simplified-api/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-9032&quot; src=&quot;http://exceptionless.com/assets/v2-api.png&quot; alt=&quot;Exceptionless 2.0 API Simplified&quot; width=&quot;150&quot; height=&quot;144&quot; data-id=&quot;9032&quot;&gt;Since &lt;a href=&quot;http://exceptionless.com/fork-us-exceptionless-goes-open-source/&quot; title=&quot;Fork Us! Exceptionless Goes Open Source&quot;&gt;going open source&lt;/a&gt;, we’ve wanted to simplify the API and make it easier to work with.&lt;/p&gt;
&lt;p&gt;We’re taking the time to do it now, and it’s going to be &lt;strong&gt;awesome!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Exceptionless 2.0, &lt;a href=&quot;http://exceptionless.com/exceptionless-2-in-the-making/&quot; title=&quot;Exceptionless 2.0 – In the Making&quot;&gt;coming soon&lt;/a&gt;, will have a new, manageable API with tons of great documentation and examples. Take a look at the preliminary documentation at the below link, and make sure to give us any feedback you might have.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;API Simplified&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://api.exceptionless.io/docs/index&quot; target=&quot;_blank&quot;&gt;New REST API documentation and samples site.&lt;br&gt; &lt;/a&gt;Take a look and let us know what you think&lt;img src=&quot;http://exceptionless.com/assets/Screen-shot-2014-06-11-at-5.20.44-PM.png&quot; alt=&quot;&quot;&gt;&lt;a style=&quot;color: #4183c4;&quot; href=&quot;http://docs.exceptionless.apiary.io/&quot;&gt;&lt;br&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Event POSTs take the raw data and use a plugin system to interpret that data and translate them into events.
&lt;ul&gt;
&lt;li&gt;This allows us to take literally any data and turn it into events in the system.&lt;/li&gt;
&lt;li&gt;The POST data is captured as a raw bytes and added immediately added to a queue for processing.&lt;/li&gt;
&lt;li&gt;Plugins can easily be created to support new data formats like system logs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;This simplified API will make creating libraries for other platforms dead simple.&lt;/li&gt;
&lt;li&gt;The API lives in a separate project and can be hosted on high-performance systems like the new Helios IIS host.&lt;/li&gt;
&lt;li&gt;Makes it easy for us to migrate the UI to a SPA app.&lt;/li&gt;
&lt;li&gt;Now uses OAuth 2.0 in addition to supporting API tokens.&lt;/li&gt;
&lt;li&gt;Highly consistent REST API modeled after GitHub and Stripe.&lt;/li&gt;
&lt;li&gt;It’s so simple you can just use CURL as a client.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We hope you’re as excited as we are to have this new, improved, more complete, and more usable documentation. Stay tuned for more details on the upcoming Exceptionless 2.0, and don’t forget to leave a comment letting us know what you think.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-06-25-coming-exceptionless-2-0-pluggable-system/"/>
    <updated>2014-06-25T10:30:52-05:00</updated>
    <id>https://exceptionless.com/2014-06-25-coming-exceptionless-2-0-pluggable-system/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; style=&quot;margin-bottom:20px;&quot; class=&quot;aligncenter size-full wp-image-9075&quot; src=&quot;http://exceptionless.com/assets/pluggable-system.jpg&quot; alt=&quot;Pluggable System&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;9075&quot; srcset=&quot;https://exceptionless.com/assets/pluggable-system.jpg 708w, https://exceptionless.com/assets/pluggable-system-300x105.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;In the last Exceptionless 2.0 article, we announced the upcoming &lt;a title=&quot;More from the Upcoming Exceptionless 2.0: Simplified API&quot; href=&quot;http://exceptionless.com/upcoming-exceptionless-2-0-simplified-api/&quot; target=&quot;_blank&quot;&gt;simplified API&lt;/a&gt;. Today, we want to introduce another major piece of V2.0 – the &lt;strong&gt;pluggable system&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Plugins will allow customization and translation throughout the Exceptionless platform, including integration with third-party services and more. Read on for more details about pluggable details such as event parsing, event pipeline, and formatting.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; style=&quot;color: #4183c4;&quot; href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Exceptionless-2.0-Overview#event-parsing-source&quot; name=&quot;user-content-event-parsing-source&quot;&gt;&lt;/a&gt;Event Parsing&lt;/h2&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li&gt;
    Has access to the raw POST data as well as the content type and submission client info.
  &lt;/li&gt;
  &lt;li&gt;
    Used to translate that raw data into events.
  &lt;/li&gt;
  &lt;li&gt;
    Can easily create new plugins to support new data formats like system logs.
  &lt;/li&gt;
  &lt;li&gt;
    Can be used to support other JSON formats like adding support for clients made for other systems.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Plugins/EventParser/IEventParserPlugin.cs&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; style=&quot;color: #4183c4;&quot; href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Exceptionless-2.0-Overview#event-pipeline-source&quot; name=&quot;user-content-event-pipeline-source&quot;&gt;&lt;/a&gt;Event Pipeline&lt;/h2&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li&gt;
    Can be used to add new functionality to the system.
  &lt;/li&gt;
  &lt;li&gt;
    Gets called on startup, when an event is starting to be processed and when an event is done being processed.
  &lt;/li&gt;
  &lt;li&gt;
    Has access to settings from both the org and project level.
  &lt;/li&gt;
  &lt;li&gt;
    Can be used to create integrations for 3rd party services like HipChat, Trello, GitHub, Slack, etc.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Plugins/EventPipeline/IEventPlugin.cs&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class=&quot;anchor&quot; style=&quot;color: #4183c4;&quot; href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Exceptionless-2.0-Overview#formatting-source&quot; name=&quot;user-content-formatting-source&quot;&gt;&lt;/a&gt;Formatting&lt;/h2&gt;
&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li&gt;
    Used to control how events are displayed in the system.
  &lt;/li&gt;
  &lt;li&gt;
    Controls the summary view of an event.
  &lt;/li&gt;
  &lt;li&gt;
    Controls the stack title.
  &lt;/li&gt;
  &lt;li&gt;
    Controls what notification emails look like.
  &lt;/li&gt;
  &lt;li&gt;
    Controls which view is used to display the details of an event.
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Plugins/Formatting/IFormattingPlugin.cs&quot;&gt;Source&lt;/a&gt;&lt;br&gt;
We believe building a pluggable exception reporting system and allowing third-party service and app access will create one of the most flexible, usable, and friendly solutions on the market.&lt;/p&gt;
&lt;h3&gt;Coming Soon&lt;/h3&gt;
&lt;p&gt;We’re anxious to get Exceptionless 2.0 wrapped up, but we do not have an ETA currently. We are working hard and making good progress, so keep an eye out for more sneak peeks, feature announcements, and progress reports!&lt;/p&gt;
&lt;p&gt;As always, please let us know if you have any feedback or questions.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-07-03-exceptionless-2-0-client-rewrite-sneak-peek-usage-example/"/>
    <updated>2014-07-03T20:12:55-05:00</updated>
    <id>https://exceptionless.com/2014-07-03-exceptionless-2-0-client-rewrite-sneak-peek-usage-example/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-9099&quot; src=&quot;http://exceptionless.com/assets/new-client-header.jpg&quot; alt=&quot;new-client-header&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;9099&quot; srcset=&quot;https://exceptionless.com/assets/new-client-header.jpg 708w, https://exceptionless.com/assets/new-client-header-300x105.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;As Exceptionless 2.0 continues to become a reality, we thought we would give everyone a little taste of what you will be able to do with the new, rewritten client. Continue reading for a glimpse at the primary features, along with a complete usage example for adding extra data to events.&lt;/p&gt;
&lt;p&gt;After you check it out, let us know if you have questions or suggestions. We’re listening!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;New Client Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Exceptionless client has been completely rewritten to be highly simplified and extensible.&lt;/li&gt;
&lt;li&gt;Will work with Mono and Project K.&lt;/li&gt;
&lt;li&gt;The base client is &lt;a title=&quot;Exceptionless.Portable PCL&quot; href=&quot;https://www.nuget.org/packages/exceptionless.portable&quot; target=&quot;_blank&quot;&gt;PCL&lt;/a&gt;, and we will have platform specific clients that add additional functionality for each platform.&lt;/li&gt;
&lt;li&gt;Adding extra data to events is extremely easy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a title=&quot;Exceptionless 2.0 Client Source&quot; href=&quot;https://github.com/exceptionless/Exceptionless.net&quot; target=&quot;_blank&quot;&gt;View Client Source&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Extended event data usage example&lt;/h3&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-9100&quot; src=&quot;http://exceptionless.com/assets/ex-client-1024x420.png&quot; alt=&quot;Exceptionless Code Example&quot; width=&quot;940&quot; height=&quot;385&quot; data-id=&quot;9100&quot; srcset=&quot;https://exceptionless.com/assets/ex-client-1024x420.png 1024w, https://exceptionless.com/assets/ex-client-300x123.png 300w, https://exceptionless.com/assets/ex-client.png 1167w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt; 
&lt;p&gt;&lt;strong&gt;Lets break that example down&lt;/strong&gt;, line by line, shall we? Check out the &lt;a title=&quot;Exceptionless 2.0 Client Source&quot; href=&quot;https://github.com/exceptionless/Exceptionless/tree/master/Source/Clients&quot; target=&quot;_blank&quot;&gt;client source&lt;/a&gt; if you want to take a look at the complete code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First, set your API key.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;var client = new ExceptionlessClient(config =&amp;gt; {
config.ApiKey = &quot;API_KEY_HERE&quot;;
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Then, send events to your own free Exceptionless server install.&lt;/p&gt;
&lt;pre&gt;config.ServerUrl = &quot;https://exceptionless.myorg.com&quot;;
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Now, read config settings from attributes.&lt;/p&gt;
&lt;pre&gt;config.ReadFromAttributes();
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Read config settings from a config section in your app/web.config.&lt;/p&gt;
&lt;pre&gt;config.ReadFromConfigSection();
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Store all client data including the offline queue in the store folder, by default isolated storage is used.&lt;/p&gt;
&lt;pre&gt;config.UseFolderStorage(&quot;store&quot;);
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Exclude any form fields, cookies, query string parameters, and custom data properties containing “CreditCard”.&lt;/p&gt;
&lt;pre&gt;config.AddDataExclusions(&quot;CreditCard&quot;);
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Add the “SomeTag” to all events.&lt;/p&gt;
&lt;pre&gt;config.DefaultTags.Add(&quot;SomeTag&quot;);
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Add the “MyObject” custom data object to every event.&lt;/p&gt;
&lt;pre&gt;config.DefaultData.Add(&quot;MyObject&quot;, new { MyProperty = &quot;Value1&quot; });
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Add a custom event enrichment that will add a tag called “MyTag” to every event.&lt;/p&gt;
&lt;pre&gt;config.AddEnrichment(ev =&amp;gt; ev.Tags.Add(&quot;MyTag&quot;));
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Register a custom log implementation that uses NLog.&lt;/p&gt;
&lt;pre&gt;config.Resolver.Register(new NLogExceptionlessLog());
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;The Startup method is specific for each platform and wires up to all relevant unhandled exception events so that they will be automatically sent to the server.&lt;/p&gt;
&lt;pre&gt;client.Startup();
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Manually catch and report an error with a custom tag on it.&lt;/p&gt;
&lt;pre&gt;try {
throw new ApplicationException(&quot;Boom!&quot;);
} catch (Exception ex) {
ex.ToExceptionless().AddTags(&quot;MyTag&quot;).Submit();
}
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Let users add their email address and a description of the error.&lt;/p&gt;
&lt;pre&gt;client.UpdateUserEmailAndDescription(client.GetLastReferenceId(), &quot;me@me.com&quot;, &quot;It broke!&quot;);
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Create and submit a log message and add an extra “Order” object to the event.&lt;/p&gt;
&lt;pre&gt;client.CreateLog(&quot;Order&quot;, &quot;New order created.&quot;)
.AddObject(new { Total = 14.95 }, name: &quot;Order&quot;)
.Submit();
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Submit a feature usage event that will let you see how much certain features of your app are being used.&lt;/p&gt;
&lt;pre&gt;client.SubmitFeatureUsage(&quot;FeatureA&quot;);
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Submit a page not found event so you can keep track of your broken links and fix them.&lt;/p&gt;
&lt;pre&gt;client.SubmitNotFound(&quot;/badpage&quot;);
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Listen to all events being sent and cancel any errors that are “IgnoredType”.&lt;/p&gt;
&lt;pre&gt;client.SubmittingEvent += (sender, args) =&amp;gt;
args.Cancel = args.Event.IsError() &amp;&amp; args.Event.GetError().Type.Contains(&quot;IgnoredType&quot;);
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;Settings data is synced in real-time with the project settings in your Exceptionless project on the server.&lt;/p&gt;
&lt;pre&gt;client.Configuration.Settings.Changed += (sender, args) =&amp;gt;
Trace.WriteLine(String.Format(&quot;Action: {0} Key: {1} Value: {2}&quot;, args.Action, args.Item.Key, args.Item.Value));
&lt;/pre&gt;
&lt;hr&gt;
&lt;p&gt;You can use those settings to control behavior in your app.&lt;/p&gt;
&lt;pre&gt;if (client.Configuration.Settings.GetBoolean(&quot;IncludeMyCustomData&quot;, false))
Trace.WriteLine(&quot;Should include my custom data&quot;);
&lt;/pre&gt;
&lt;h2&gt;That’s All There Is To It!&lt;/h2&gt;
&lt;p&gt;After checking out the above example, we hope you agree that we’ve drastically simplified and improved the process of adding data to events, allowing for much more flexibility.&lt;/p&gt;
&lt;p&gt;As always, if you have any questions, comments, suggestions, or concerns, let us know!&lt;/p&gt;
&lt;h3&gt;Read more about Exceptionless 2.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/exceptionless-2-in-the-making/&quot; title=&quot;Exceptionless 2.0 – In the Making&quot;&gt;Exceptionless 2.0 – In the Making&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/event-based-reporting-system-coming-version-2-0/&quot; title=&quot;Event Based Reporting System Coming in Version 2.0&quot;&gt;Event Based Reporting System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/upcoming-exceptionless-2-0-simplified-api/&quot; title=&quot;More from the Upcoming Exceptionless 2.0: Simplified API&quot;&gt;Simplified API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/coming-exceptionless-2-0-pluggable-system/&quot; title=&quot;Coming in Exceptionless 2.0 – A Pluggable System&quot;&gt;A Pluggable System&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-07-17-version-2-0s-new-message-bus-queueing-systems/"/>
    <updated>2014-07-17T22:16:55-05:00</updated>
    <id>https://exceptionless.com/2014-07-17-version-2-0s-new-message-bus-queueing-systems/</id>
    <content type="html">&lt;p&gt;In an effort to improve scalability, allow for new functionality to easily be added to Exceptionless, make the system less coupled, process things more efficiently, go fully Async, and further support Azure, we’ve been working hard on a new message bus and queueing system.&lt;/p&gt;
&lt;p&gt;Lets take a look at a few of the details surrounding these new systems we’re building for Exceptionless 2.0. Take a look and let us know what you think. If you’ve got questions or comments, we’d love to hear them!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Message Bus&lt;/h2&gt;
&lt;p&gt;The new message bus allows us to publish and subscribe to messages across all our resources. We &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Api/Hubs/MessageBusHub.cs&quot;&gt;subscribe to different types of messages to send SignalR notifications&lt;/a&gt; to the client.&lt;/p&gt;
&lt;h2&gt;Queueing&lt;/h2&gt;
&lt;p&gt;The new queueing system allows us to enqueue expensive tasks that can be handled at a later time. This lets us greatly reduce the processing and latency times of the api.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We stream event data that is posted to the event controller directly into the queue without taking the IO or Memory hit of processing it. This means that we can process more errors, faster, with less resources.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The system also supports retrying and discarding of data.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We queue emails that need to be sent, as well as user defined webhooks that need to be called with data. Email servers on the sending and receiving can go offline or error out while sending, but by queuing the notification emails we can ensure you always get them by re-sending in the future, after a failure occurs. In the event that we can’t send you an email after a few retries, we can discard the notification.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;More on Version 2.0&lt;/h2&gt;
&lt;p&gt;If you’re just now learning about the upcoming Exceptionless 2.0, make sure to catch up on previous feature announcements and examples by reading the below articles.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/exceptionless-2-in-the-making/&quot; title=&quot;Exceptionless 2.0 – In the Making&quot;&gt;Exceptionless 2.0 – In the Making&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/event-based-reporting-system-coming-version-2-0/&quot; title=&quot;Event Based Reporting System Coming in Version 2.0&quot;&gt;Event Based Reporting System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/upcoming-exceptionless-2-0-simplified-api/&quot; title=&quot;More from the Upcoming Exceptionless 2.0: Simplified API&quot;&gt;Simplified API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/coming-exceptionless-2-0-pluggable-system/&quot; title=&quot;Coming in Exceptionless 2.0 – A Pluggable System&quot;&gt;A Pluggable System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/exceptionless-2-0-client-rewrite-sneak-peek-usage-example/&quot; title=&quot;Exceptionless 2.0 Client Rewrite Sneak Peek Usage Example&quot;&gt;Exceptionless 2.0 Client Rewrite Sneak Peak and Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-07-29-job-system-enhancements-version-2s-got-em/"/>
    <updated>2014-07-29T20:10:03-05:00</updated>
    <id>https://exceptionless.com/2014-07-29-job-system-enhancements-version-2s-got-em/</id>
    <content type="html">&lt;p&gt;Summer means vacations and pool time, but we haven’t stopped working on Exceptionless 2.0. Things are coming along nicely, and today we’re here to talk about the job system and the code being written to enhance it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;After you read this article&lt;/strong&gt;, check out the previous V2.0 feature and detail articles, if you haven’t already. Good stuff in there!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/exceptionless-2-in-the-making/&quot; title=&quot;Exceptionless 2.0 – In the Making&quot;&gt;Exceptionless 2.0 – In the Making&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/event-based-reporting-system-coming-version-2-0/&quot; title=&quot;Event Based Reporting System Coming in Version 2.0&quot;&gt;Event Based Reporting System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/upcoming-exceptionless-2-0-simplified-api/&quot; title=&quot;More from the Upcoming Exceptionless 2.0: Simplified API&quot;&gt;Simplified API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/coming-exceptionless-2-0-pluggable-system/&quot; title=&quot;Coming in Exceptionless 2.0 – A Pluggable System&quot;&gt;A Pluggable System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/exceptionless-2-0-client-rewrite-sneak-peek-usage-example/&quot; title=&quot;Exceptionless 2.0 Client Rewrite Sneak Peek Usage Example&quot;&gt;Exceptionless 2.0 Client Rewrite Sneak Peak and Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&quot;Version 2.0′s New Message Bus and Queueing Systems&quot; href=&quot;http://exceptionless.com/version-2-0s-new-message-bus-queueing-systems/&quot; target=&quot;_blank&quot;&gt;New Message Bus and Queuing System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://exceptionless.com/job-system-enhancements-version-2s-got-em/&quot; title=&quot;Job System Enhancements – Version 2′s Got Em!&quot;&gt;Job System Enhancements&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;!--more--&gt;
&lt;h2&gt;Job System Enhancements&lt;/h2&gt;
&lt;h3&gt;Standalone&lt;/h3&gt;
&lt;p&gt;Jobs can easily be run standalone now, which makes it much easier to test the system. You won’t have to worry about your application pool shutting down prematurely and killing your job half way through it’s long-running work item.&lt;/p&gt;
&lt;h3&gt;More Ways to Run&lt;/h3&gt;
&lt;p&gt;With 2.0, you’ll be able to run jobs in process, as a service, as a standalone exe, or as Azure WebJobs. Cool, huh?&lt;/p&gt;
&lt;h3&gt;Need More? Run More!&lt;/h3&gt;
&lt;p&gt;If you need to process more tasks, simply fire up more jobs. This will save resources and money when using Azure WebJobs, as you can auto-scale jobs based on resource constraints.&lt;/p&gt;
&lt;p&gt;We use jobs to send emails, call web hooks, process events, and much more, so these enhancements will allow for better resource control when scaling, and in general.&lt;/p&gt;
&lt;h2&gt;Questions?&lt;/h2&gt;
&lt;p&gt;We’ve thrown out a lot of information about Exceptionless 2.0 and all the new features, enhancements, and tweaks that it’s going to get. We’d love to hear from some of the regulars out there and see if we’ve missed anything obvious. Check out the links to the other articles at the top of the page and let us know. Thanks!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-08-07-new-price-plans-medium-large-teamsprojects/"/>
    <updated>2014-08-07T19:11:23-05:00</updated>
    <id>https://exceptionless.com/2014-08-07-new-price-plans-medium-large-teamsprojects/</id>
    <content type="html">&lt;p&gt;We’ve had quite a few requests for pricing plans that support users, retention, and errors somewhere between our old medium and enterprise plans, so we crunched the numbers and came up with new large and extra large plans that find a happy medium.&lt;/p&gt;
&lt;p&gt;Both plans include more users, more retention, and more errors. Check out the details on each package below or &lt;a href=&quot;http://exceptionless.com/pricing/&quot; title=&quot;Pricing Plans&quot;&gt;view the Pricing Page&lt;/a&gt; for a quick summary.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Free&lt;/h2&gt;
&lt;p&gt;The free plan, which is great for trying things out or super small personal projects, includes provisions for &lt;strong&gt;one project, one user, three days of error retention, and three thousand errors per month&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It does not include premium features such as advanced notifications, web hooks, and other future premium features.&lt;/p&gt;
&lt;h2&gt;Small – $15&lt;/h2&gt;
&lt;p&gt;For $15 per month, you get &lt;strong&gt;five projects, ten users, thirty days of retention, 15,000 errors per month&lt;/strong&gt;, and premium features.&lt;/p&gt;
&lt;h2&gt;Medium – $49&lt;/h2&gt;
&lt;p&gt;The medium Exceptionless plan offers &lt;strong&gt;fifteen projects and twenty-five users&lt;/strong&gt;. You get &lt;strong&gt;ninety days of retention, 75,000 errors per month&lt;/strong&gt;, and premium features.&lt;/p&gt;
&lt;h2&gt;Large Plan – $99 &lt;em&gt;(new)&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;The large plan is new, and includes &lt;strong&gt;unlimited projects and users, 180 days of error retention, 250,000 errors per month&lt;/strong&gt;, and premium features.&lt;/p&gt;
&lt;p&gt;This is quickly becoming a popular plan and makes sense for a lot of medium to medium-large teams and projects.&lt;/p&gt;
&lt;h2&gt;Extra Large – $199 &lt;em&gt;(new)&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;The extra large plan was created to bridge the gap between large and enterprise by quadrupling the &lt;strong&gt;number of errors per month to 1,000,000&lt;/strong&gt;. You still get unlimited projects and users, as well as 180 days of retention and premium features.&lt;/p&gt;
&lt;h2&gt;Enterprise – $499&lt;/h2&gt;
&lt;p&gt;For those businesses and enterprise-level teams that have several large projects and need to handle huge numbers of errors, the Enterprise plan offers everything that the Extra Large plan offers, with &lt;strong&gt;3,000,000 errors per month&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Custom&lt;/h2&gt;
&lt;p&gt;And, of course, should you need to customize a plan to handle even more errors, we can always get you taken care of, just let us know!&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://app.exceptionless.com/signup&quot;&gt;Sign Up Now!&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-08-13-upcoming-exceptionless-version-2-0-overview-review/"/>
    <updated>2014-08-13T16:57:04-05:00</updated>
    <id>https://exceptionless.com/2014-08-13-upcoming-exceptionless-version-2-0-overview-review/</id>
    <content type="html">&lt;p&gt;Many of you guys have been following along in previous posts as we went through the details of the new features and enhancements coming with the next version of Exceptionless, V2.0.&lt;/p&gt;
&lt;p&gt;To make things easier for everyone, we thought we’d do an overview post as well, so all the new features can be found in one location and people can click to read more on the specific ones they are interested in.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless 2.0 Features &amp;amp; Enhancements&lt;/h2&gt;
&lt;h3&gt;Event Based Reporting System&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/ex-curl.png&quot;&gt;&lt;img loading=&quot;lazy&quot; style=&quot;margin-left:15px;&quot; class=&quot;alignright wp-image-8588 size-thumbnail&quot; src=&quot;http://exceptionless.com/assets/ex-curl-150x150.png&quot; alt=&quot;Post Event Exceptionless&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;8588&quot;&gt;&lt;/a&gt;Many users have asked for ways to use Exceptionless to report additional types of events, rather than just errors. With version 2.0, we are moving to an event based system that will accommodate such requests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/event-based-reporting-system-coming-version-2-0/&quot; title=&quot;Event Based Reporting System Coming in Version 2.0&quot;&gt;Read full article…&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Simplified API&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/Screen-shot-2014-06-11-at-5.20.44-PM.png&quot;&gt;&lt;img loading=&quot;lazy&quot; style=&quot;margin-left:15px;&quot; class=&quot;alignright wp-image-9028 size-thumbnail&quot; src=&quot;http://exceptionless.com/assets/Screen-shot-2014-06-11-at-5.20.44-PM-150x150.png&quot; alt=&quot;Exceptionless API Documentation&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;9028&quot;&gt;&lt;/a&gt;2.0 will have a new, manageable API with tons of great documentation and examples. Take a look at the preliminary documentation at the below link, and make sure to give us any feedback you might have.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/upcoming-exceptionless-2-0-simplified-api/&quot; title=&quot;More from the Upcoming Exceptionless 2.0: Simplified API&quot;&gt;Read full article…&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;A Pluggable System&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/pluggable-system.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; style=&quot;margin-left:15px;&quot; class=&quot;alignright wp-image-9075 size-thumbnail&quot; src=&quot;http://exceptionless.com/assets/pluggable-system-150x150.jpg&quot; alt=&quot;Pluggable System&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;9075&quot;&gt;&lt;/a&gt;The new pluggable system will allow customization and translation throughout the Exceptionless platform, including integration with third-party services and more. Read on for more details and source code about event parsing, the event pipeline, and formatting.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/coming-exceptionless-2-0-pluggable-system/&quot; title=&quot;Coming in Exceptionless 2.0 – A Pluggable System&quot;&gt;Read full article…&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Client Rewrite&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/new-client-header.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; style=&quot;margin-left:15px;&quot; class=&quot;alignright wp-image-9099 size-thumbnail&quot; src=&quot;http://exceptionless.com/assets/new-client-header-150x150.jpg&quot; alt=&quot;new-client-header&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;9099&quot;&gt;&lt;/a&gt;The Exceptionless client has been completely rewritten to be highly simplified and extensible, work with Mono and Project K, include additional platform specific clients, and much more. Take a look at an extended event data usage example at the link below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/exceptionless-2-0-client-rewrite-sneak-peek-usage-example/&quot; title=&quot;Exceptionless 2.0 Client Rewrite Sneak Peek Usage Example&quot;&gt;Read full article…&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;New Message Bus &amp;amp; Queueing&lt;/h3&gt;
&lt;p&gt;In an effort to improve scalability, allow for new functionality to easily be added to Exceptionless, make the system less coupled, process things more efficiently, go fully Async, and further support Azure, we’ve been working hard on a new message bus and queueing system.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/version-2-0s-new-message-bus-queueing-systems/&quot; title=&quot;Version 2.0′s New Message Bus and Queueing Systems&quot;&gt;Read full article…&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Job System Enhancements&lt;/h3&gt;
&lt;p&gt;A lot of time has been spent on enhancing the job system behind Exceptionless. From the ability to run jobs standalone, making testing easier, to more ways to run jobs and the ability to auto-scale jobs based on resource constraints, lots of great changes are coming!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/job-system-enhancements-version-2s-got-em/&quot; title=&quot;Job System Enhancements – Version 2′s Got Em!&quot;&gt;Ready full article…&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Feedback Welcome!&lt;/h2&gt;
&lt;p&gt;If you’ve taken a look at the upcoming features and have any comments, please let us know! We’re working on everything as fast and hard as we can, and will hopefully have an ETA to have everything finished soon.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-08-21-case-study-server-expiration-error-pre-alpha-game-release/"/>
    <updated>2014-08-21T12:22:08-05:00</updated>
    <id>https://exceptionless.com/2014-08-21-case-study-server-expiration-error-pre-alpha-game-release/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-9759&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/game-post.jpg&quot; alt=&quot;game-post&quot; width=&quot;160&quot; height=&quot;160&quot; data-id=&quot;9759&quot; srcset=&quot;https://exceptionless.com/assets/game-post.jpg 160w, https://exceptionless.com/assets/game-post-150x150.jpg 150w&quot; sizes=&quot;(max-width: 160px) 100vw, 160px&quot;&gt;Today we’ve got a pretty cool case study that comes to us from a game development studio!&lt;/p&gt;
&lt;p&gt;We love to see Exceptionless being used by companies with interesting projects and development pipelines, and what’s more interesting than gaming, multi-server, and multi-player environments?&lt;/p&gt;
&lt;p&gt;These guys also gave us some good feedback, which we’ll address.&lt;/p&gt;
&lt;p&gt;Check it out!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Project&lt;/h2&gt;
&lt;p&gt;This user is working on a pre-alpha game that is, at the time of the feedback, only available to the in-house team. The game environment requires multiple servers that are deployed via script. When an old version of a server comes down and a new one is deployed, there is cleanup that must happen, etc.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I like your product! I’ve previously written an exception-reporting system that did the same type of thing as Exceptionless but used a mail-server as the exception repository. Since that system was something I had to leave behind at my last company, I wanted to find a solution for my current company, and after comparing alternatives liked what your team had built, so that’s what we’re using now.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;How Exceptionless Helped&lt;/h2&gt;
&lt;p&gt;Because the game had such limited players, servers, and testing, it’s tough to catch all the little bugs. Fortunately, Exceptionless was able to catch a potentially huge bug that would cause old versions of the servers that were still running to crash because of files being deleted by the new server development clean up scripts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“If an old version was still running it would crash because its data-files got deleted. Since we’re still in development mode there aren’t enough people playing on our game servers to notice this exception — but we would have when going into alpha or beta test! Fortunately Exceptionless did notice and report this problem.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We think that’s pretty awesome, and not just because we’re huge nerds!&lt;/p&gt;
&lt;h2&gt;Feature Requests &amp;amp; Thoughts&lt;/h2&gt;
&lt;p&gt;We were lucky enough to get some great feedback from these guys, as well.&lt;/p&gt;
&lt;h3&gt;Bug Ownership&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;span style=&quot;color: #282f33;&quot;&gt;“We’d like a feature that allows our developers to claim ownership of bugs so that they’re not seen by others in the Dashboard view by default.”&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With multiple developers on multiple projects, bugs can stack up and things can get messy. John doesn’t need to see Billy’s bugs from project A when he’s working on his own bugs for project B.&lt;/p&gt;
&lt;p&gt;We definitely agree here and understand, but &lt;span style=&quot;color: #282f33;&quot;&gt;there is a fine line between us being an error reporting service and getting into &lt;a href=&quot;https://exceptionless.com/bug-tracking/&quot;&gt;bug tracking&lt;/a&gt; type features. We had a previous product that tried to do too much and turned people off so we really wanted to try and keep Exceptionless simple. That being said, &lt;strong&gt;we want to make Exceptionless integrate with other apps&lt;/strong&gt; much more in the future and make it really easy to create new integrations. We’re working on this now with &lt;a title=&quot;Upcoming Exceptionless Version 2.0 Overview &amp; Review&quot; href=&quot;http://exceptionless.com/upcoming-exceptionless-version-2-0-overview-review/&quot;&gt;Exceptionless 2.0, coming soon&lt;/a&gt;!&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Multiple Services on Single Server&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“&lt;span style=&quot;color: #282f33;&quot;&gt;One other thing that was painful for me personally: we run multiple services of the same type on a single server (e.g. multiple instances of “game-server.exe”). In order to ensure that each server has its own queue folder and logfile, I had to write a chunk of custom code.”&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Again, we totally agree! &lt;span style=&quot;color: #282f33;&quot;&gt;The &lt;a title=&quot;Exceptionless 2.0 Client Rewrite Sneak Peek Usage Example&quot; href=&quot;http://exceptionless.com/exceptionless-2-0-client-rewrite-sneak-peek-usage-example/&quot;&gt;client in Exceptionless 2.0&lt;/a&gt; will be MUCH simpler and will make things much easier. You will be able to easily use in-memory storage and be able to plug in different storage implementations.&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;We Love Feedback!&lt;/h2&gt;
&lt;p&gt;If you’re a current user, we’d love to hear how you’ve used Exceptionless to cut down on bugs and build better apps. If you’ve got any criticisms or feature feedback/requests, keep those coming as well – they help us improve!&lt;/p&gt;
&lt;p&gt;Have an awesome day!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-09-03-making-move-elastic-search-exceptionless-2-0/"/>
    <updated>2014-09-03T15:42:26-05:00</updated>
    <id>https://exceptionless.com/2014-09-03-making-move-elastic-search-exceptionless-2-0/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-10110&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/Screenshot-2014-09-03-15.03.16.png&quot; alt=&quot;Screenshot 2014-09-03 15.03.16&quot; width=&quot;211&quot; height=&quot;68&quot; data-id=&quot;10110&quot;&gt;We know you’ve thought about it when using Exceptionless, and many developers have submitted formal requests. &lt;strong&gt;Search&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You need it, and we want to provide it. That’s why we’ve decided to integrate Elasticsearch into 2.0, and it’s going to be awesome!&lt;/p&gt;
&lt;p&gt;Check out a few of the cool things we’re going to be able to do with it, below, and let us know what you think!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;What Elasticsearch Brings to the Table&lt;/h2&gt;
&lt;h3&gt;Simple scaleability&lt;/h3&gt;
&lt;p&gt;Moving to &lt;a title=&quot;Elasticsearch&quot; href=&quot;http://www.elasticsearch.org/&quot; target=&quot;_blank&quot;&gt;Elasticsearch&lt;/a&gt; for event and stack storage will enable us to simplify many areas of the system, like stats, and also enable us to easily scale the service as it continues to grow.&lt;/p&gt;
&lt;h3&gt;Search ALL the things&lt;/h3&gt;
&lt;p&gt;The new system will allow users to search by tags, date range, keywords, error type, and more, all while providing full statistics at the same time. This, specifically, has been our most requested feature, and we’re glad to finally be able to say it’s coming soon!&lt;/p&gt;
&lt;h3&gt;Faster, too!&lt;/h3&gt;
&lt;p&gt;Elasticsearch removes the need for us to do stats incrementing for every type of view that we want to show. This simplifies the system, further increases performance, and improves throughput for the event collector.&lt;/p&gt;
&lt;h3&gt;Statistics everywhere&lt;/h3&gt;
&lt;p&gt;You’re not just going to get more accurate stats within Exceptionless, you’re going to get them in real time, and we’ll be able to display them in multiple time zones, too.&lt;/p&gt;
&lt;h3&gt;Future-proofing&lt;/h3&gt;
&lt;p&gt;Instead of having to think of everything up front while we’re building Exceptionless 2.0, Elasticsearch will enable us to provide new insights in the future, something every developer dreams of!&lt;/p&gt;
&lt;h2&gt;We Hope You’re as Stoked as We Are&lt;/h2&gt;
&lt;p&gt;Search has been a long time coming for Exceptionless, and we’re super excited to be able to provide a robust, thorough, scaleable solution that will cover 99.99% of possible use cases. Hang in there – we’re coding it in as fast as we can!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-09-26-server-side-technology-exceptionless-team-uses/"/>
    <updated>2014-09-26T17:26:57-05:00</updated>
    <id>https://exceptionless.com/2014-09-26-server-side-technology-exceptionless-team-uses/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-11102&quot; src=&quot;http://exceptionless.com/assets/servers.jpg&quot; alt=&quot;Server Technology&quot; width=&quot;200&quot; height=&quot;191&quot; data-id=&quot;11102&quot;&gt;As it turns out, building technology and web applications takes a &lt;strong&gt;lot&lt;/strong&gt; of other technology. We were reflecting the other day and decided it would be cool if we did a blog series that went over all the different “stuff” we use to make and maintain Exceptionless.&lt;/p&gt;
&lt;p&gt;For the first part in the series, we decided to look at all the &lt;strong&gt;server-side products and services&lt;/strong&gt;. They are listed below, along with a short description of what they are used for. See something you’ve never used? Check it out! Have something we should try out instead? Let us know by commenting!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;The Server Tech&lt;/h2&gt;
&lt;h3&gt;TeamCity&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Continuous integration and deployment triggering&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Team City&quot; href=&quot;http://www.jetbrains.com/teamcity/&quot; target=&quot;_blank&quot;&gt;TeamCity&lt;/a&gt; from JetBrains is a popular continuous integration server that supports a variety of different version control systems and build runners.&lt;/p&gt;
&lt;h3&gt;Octopus Deploy&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Automated deployment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Octopus Deploy&quot; href=&quot;http://octopusdeploy.com/&quot; target=&quot;_blank&quot;&gt;Octopus Deploy&lt;/a&gt; works with, not against your build server. This ensures reliable, secure, automated releases of ASP.NET applications and Windows Services into test, staging and production environments, whether they are in the cloud or on-premises. The Octopus Deploy dashboard can tell you quickly which versions of your application are deployed to specific environments. .&lt;/p&gt;
&lt;h3&gt;ElasticSearch&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Event storage, filtering, stats and search&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Elastic Search&quot; href=&quot;http://www.elasticsearch.com/&quot; target=&quot;_blank&quot;&gt;Elasticsearch&lt;/a&gt; is a search server. is a distributed, multitenant-capable full-text search engine with a RESTful web interface and schema-free JSON documents. It has scalable search, real-time search, multi tenancy and can be used to search all kinds of documents.&lt;/p&gt;
&lt;h3&gt;MongoDB&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Account and billing info storage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;MongoDB&quot; href=&quot;http://www.mongodb.org/&quot; target=&quot;_blank&quot;&gt;MongoDB&lt;/a&gt; makes integration of data in certain types of applications easier and faster. It is a cross-platform document-oriented database that is classified as a NoSQL database. It favors JSON-like documents with dynamic schemas over the traditional table-based relational database structure.&lt;/p&gt;
&lt;h3&gt;Redis&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Caching&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Redis&quot; href=&quot;http://redis.io/&quot; target=&quot;_blank&quot;&gt;Redis&lt;/a&gt; is often referred to as a data structure server. Keys can contain strings, hashes, lists, sets, sorted sets, bitmaps and hyperloglogs. It is open source and licensed under BSD.&lt;/p&gt;
&lt;h3&gt;Resharper&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Makes Visual Studio awesome!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.jetbrains.com/resharper/&quot; target=&quot;_blank&quot;&gt;ReSharper&lt;/a&gt; is a productivity tool that makes Microsoft Visual Studio a much better IDE. It includes features such as code inspections, automated code refactorings, blazing fast navigation, and coding assistance.&lt;/p&gt;
&lt;h3&gt;Postman&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;For testing our REST API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Postman&quot; href=&quot;http://www.getpostman.com/&quot; target=&quot;_blank&quot;&gt;Postman&lt;/a&gt; allows you to construct simple as well as complex requests quickly. You can save them for later use and analyze the response sent by the API. It dramatically cuts down the time required to test and develop APIs. It can easily scale and be used for your small team, or larger organizations.&lt;/p&gt;
&lt;h3&gt;Simple Injector&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Dependency Injection&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Simple Injector&quot; href=&quot;https://simpleinjector.codeplex.com/&quot; target=&quot;_blank&quot;&gt;Simple Injector&lt;/a&gt; is an easy-to-use Dependency Injection (DI) library for .NET 4+. It supports Silverlight 4+, Windows Phone 8, Windows 8 including Universal apps and Mono. It can be easily integrated with popular frameworks such as Web API, MVC, WCF and many others. It also provides a carefully selected set of features in its core library to support many advanced scenarios.&lt;/p&gt;
&lt;h3&gt;SignalR&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Real time notifications&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;SingleR&quot; href=&quot;http://signalr.net/&quot; target=&quot;_blank&quot;&gt;SignalR&lt;/a&gt; is a library for ASP.NET developers that assists with developing real-time web functionality. SignalR allows bi-directional communication between server and client. It allows pushing content to connected clients instantly as it becomes available. SignalR supports Web Sockets, and falls back to other compatible techniques for older browsers easily as well as includes APIs for connection management, grouping connections, and authorization.&lt;/p&gt;
&lt;h3&gt;AutoMapper&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Easy mapping of data models from one form to another&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Auto Mapper&quot; href=&quot;https://github.com/AutoMapper/AutoMapper&quot; target=&quot;_blank&quot;&gt;AutoMapper&lt;/a&gt; is a convention-based object-object mapper. It provides useful conventions to take the tedious work out of figuring out how to map type A to type B. As long as you follow a few simple standards, almost zero configuration is needed to map two types.&lt;/p&gt;
&lt;h3&gt;FluentValidation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Validating business rules in our data model&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A small validation library for .NET, &lt;a title=&quot;Fluent Validation&quot; href=&quot;http://fluentvalidation.codeplex.com/&quot; target=&quot;_blank&quot;&gt;FluentValidation&lt;/a&gt; uses an easy-to-use interface and lambda expressions for building validation rules for your business objects quickly and efficiently.&lt;/p&gt;
&lt;h3&gt;ApprovalTests&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Easy verification of test outputs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Approval Tests&quot; href=&quot;http://approvaltests.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;ApprovalTests&lt;/a&gt; is an open source assertion/verification library to assist with unit testing. It is compatible with many .NET unit testing frameworks such as Nunit, MsTest, Xunit, and MBUni. It can be used for verifying objects that require more than the simplest of asserts.&lt;/p&gt;
&lt;h2&gt;What Did We Miss?&lt;/h2&gt;
&lt;p&gt;We know you’ve got some cool toys you use on your projects. Spit it out! What other technology should we give a try. We’re always looking for the best, fastest, coolest stuff to try out.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-10-02-client-side-technology-exceptionless-team-uses/"/>
    <updated>2014-10-02T23:22:27-05:00</updated>
    <id>https://exceptionless.com/2014-10-02-client-side-technology-exceptionless-team-uses/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-11241&quot; src=&quot;http://exceptionless.com/assets/colored-swoosh.png&quot; alt=&quot;colored-swoosh&quot; width=&quot;220&quot; height=&quot;155&quot; data-id=&quot;11241&quot;&gt;Last week we wrote up a whole list of &lt;a title=&quot;Server Side Technology the Exceptionless Team Uses&quot; href=&quot;https://exceptionless.com/server-side-technology-exceptionless-team-uses/&quot; target=&quot;_blank&quot;&gt;server side technologies&lt;/a&gt; that we use to build and maintain Exceptionless. This week, we’re going to look at client side tools and services.&lt;/p&gt;
&lt;p&gt;We’re all about function around here, but we like to think that the app looks and feels pretty good, too! We hope you agree, and maybe you’ll come across a thing or two you could use in the future to jazz up the user side of your projects.&lt;/p&gt;
&lt;p&gt;Most of these are &lt;strong&gt;free&lt;/strong&gt; services, so check them out!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Client Side Tech&lt;/h2&gt;
&lt;h3&gt;AngularJS&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;JavaScript framework for building dynamic, awesome apps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;AngularJS&quot; href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot;&gt;AngularJS &lt;/a&gt;is a structural framework for dynamic web apps. It lets you use HTML as your UI language and lets you extend HTML’s syntax to define your application’s structure efficiently. Angular’s data binding and dependency injection eliminates much of the “fluff” code needed and does this all in the browser.&lt;/p&gt;
&lt;h3&gt;Bootstrap&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Mobile first front-end framework&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Bootstrap&quot; href=&quot;http://getbootstrap.com/&quot; target=&quot;_blank&quot;&gt;Bootstrap &lt;/a&gt;is a free collection of tools for creating websites and web applications that was created by a developer and a designer at Twitter. It contains libraries of HTML,CSS, and JavaScript components to give your project a head start.&lt;/p&gt;
&lt;h3&gt;Font Awesome&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Scalable vector based icons via CSS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Font Awesome&quot; href=&quot;http://fortawesome.github.io/Font-Awesome/&quot; target=&quot;_blank&quot;&gt;Font Awesome&lt;/a&gt; gives you scalable vector icons that can instantly and easily be customized and extended with the power of CSS.&lt;/p&gt;
&lt;h3&gt;Restangular&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;AngularJS service for handling Restful Resource&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Restangular&quot; href=&quot;https://github.com/mgonto/restangular&quot; target=&quot;_blank&quot;&gt;Restangular &lt;/a&gt;is an AngularJS service that simplifies the most common GET, POST, DELETE, and UPDATE requests with a minimum amount of client code. It is a perfect fit for any application that uses data from a RESTful API.&lt;/p&gt;
&lt;h3&gt;AngularJS Batarang&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Debugging and inspecting Angular apps in Chrome&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a title=&quot;AngularJS Batarang&quot; href=&quot;https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk&quot; target=&quot;_blank&quot;&gt;AngularJS Batarang &lt;/a&gt;Chrome extension includes tools and utilities to assist in finding and addressing performance bottlenecks, and visualize and debug applications using AngularJS.&lt;/p&gt;
&lt;h3&gt;Emmet Re:View&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Easily test responsive layouts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Emmet Re:View&quot; href=&quot;https://chrome.google.com/webstore/detail/emmet-review/epejoicbhllgiimigokgjdoijnpaphdp&quot; target=&quot;_blank&quot;&gt;Emmet Re:View&lt;/a&gt; is a small Google Chrome extension that finds responsive design breakpoints on your page and creates view for each breakpoint. This allows you to easily debug your code to perfect and create the perfect UI.&lt;/p&gt;
&lt;h3&gt;WebStorm&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Awesome JavaScript IDE for front end dev&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;WebStorm&quot; href=&quot;http://www.jetbrains.com/webstorm/&quot; target=&quot;_blank&quot;&gt;JetBrains WebStorm&lt;/a&gt; is a commercial IDE for JavaScript, CSS &amp;amp; HTML. It includes JavaScript plugins (such as for Node.js) as well as provides automatic code completion, on-the-fly code analysis, refactoring support and VCS integration.&lt;/p&gt;
&lt;h3&gt;Grunt&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;JavaScript task runner&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Grunt&quot; href=&quot;http://gruntjs.com/&quot; target=&quot;_blank&quot;&gt;Grunt&lt;/a&gt; provides an easy way of managing the large number of build tasks required to maintain a sophisticated web application. It also has a vast library of plugins to further extend its functionality.&lt;/p&gt;
&lt;h3&gt;npm / Bower&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Package managing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;NPM JS&quot; href=&quot;https://www.npmjs.org/&quot; target=&quot;_blank&quot;&gt;Npm &lt;/a&gt;is most commonly used for managing Node.js modules, but it works for the front-end too when combined with Browserify and/or $ npm dedupe.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Bower&quot; href=&quot;http://bower.io/&quot; target=&quot;_blank&quot;&gt;Bower &lt;/a&gt;is created solely for the front-end and is optimized with that in mind. The biggest difference is that npm does nested dependency tree (size heavy) while Bower requires a flat dependency tree (puts the burden of dependency resolution on the user).&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-10-13-services-technologies-exceptionless-team-uses/"/>
    <updated>2014-10-13T10:30:42-05:00</updated>
    <id>https://exceptionless.com/2014-10-13-services-technologies-exceptionless-team-uses/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-11519&quot; src=&quot;http://exceptionless.com/assets/services-and-tech.png&quot; alt=&quot;Exceptionless Services &amp; Technology&quot; width=&quot;155&quot; height=&quot;155&quot; data-id=&quot;11519&quot; srcset=&quot;https://exceptionless.com/assets/services-and-tech.png 155w, https://exceptionless.com/assets/services-and-tech-150x150.png 150w&quot; sizes=&quot;(max-width: 155px) 100vw, 155px&quot;&gt;Over the past couple of weeks, we have been writing about the tools and technologies that the Exceptionless Team uses to create, support, and maintain Exceptionless. In part three of the series, we want to take a look at the services used.&lt;/p&gt;
&lt;p&gt;Most projects need project organization, time management, tracking, the ability to easily communicate with team members, version control, etc – the list goes on. Exceptionless is no different. Here are some of our favorite tools that provide those services to help keep Exceptionless, well, Exceptionless.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Services &amp;amp; Technologies&lt;/h2&gt;
&lt;h3&gt;Azure&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Hosts our infrastructure&lt;/strong&gt;&lt;br&gt;
Microsoft &lt;a title=&quot;Azure&quot; href=&quot;https://azure.microsoft.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Azure&lt;/a&gt; lets you build, deploy, and manage applications any way you like for exceptional productivity. It is a major cloud platform and is an industry leader for both infrastructure-as-a-service (IaaS) and platform-as-a-service (PaaS).&lt;/p&gt;
&lt;h3&gt;GitHub&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Source control, issue tracking, wiki, and static site hosting&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Github&quot; href=&quot;https://www.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt; provides access control ,version control, issue tracking and several collaboration features such as wikis, task management, &lt;a href=&quot;https://exceptionless.com/bug-tracking/&quot;&gt;bug tracking&lt;/a&gt;, and feature requests for any project. It is a web-based graphical interface tool that also includes desktop and mobile integration.&lt;/p&gt;
&lt;h3&gt;HipChat&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Team chat and notifications&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Hipchat&quot; href=&quot;https://www.hipchat.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HipChat&lt;/a&gt; allows users to create and participate in chat rooms and send one-on-one messages with other people in a group-centric format. It is an excellent tool to keep your team organized and on task, no matter how small or large.&lt;/p&gt;
&lt;h3&gt;Pingdom&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Awesome uptime monitoring&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Pingdom&quot; href=&quot;https://www.pingdom.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Pingdom&lt;/a&gt; is a service that tracks the uptime, downtime, and performance of your websites from multiple locations globally so that it can distinguish genuine downtime from routing and access problems. An excellent tool to stay on top of your website’s downtime and to assist with issues that arise.&lt;/p&gt;
&lt;h3&gt;Trello&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Task management&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Trello&quot; href=&quot;https://trello.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Trello&lt;/a&gt; is a collaboration tool that organizes your projects into boards. In one glance, it tells you what’s being worked on, who’s working on what, and where something is in a process. You can easily sort your projects by tasks, to-do lists, and to stay on top of those time sensitive projects.&lt;/p&gt;
&lt;h3&gt;Librato&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Monitoring real time system metrics&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Librato&quot; href=&quot;https://metrics.librato.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Librato&lt;/a&gt; provides a solution for monitoring, analyzing, and understanding the system metrics that impact your business at all levels. It provides everything you need to visualize, analyze, and actively alert on the metrics that matter to you.&lt;/p&gt;
&lt;h3&gt;Mandrill&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Awesome and inexpensive way to send emails&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Mandrill&quot; href=&quot;https://www.mandrill.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mandrill&lt;/a&gt; is a transactional email product that apps can use to send automated one-to-one email, like password reminders, shopping-cart receipts, and personalized notifications. It is highly customizable and can help assist with all aspects of email for your business.&lt;/p&gt;
&lt;h3&gt;Intercom&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Integrated app messaging and user communication&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Intercom.io&quot; href=&quot;https://www.intercom.io/in-app-messaging&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Intercom&lt;/a&gt; shows you who is using your product and makes it easy to personally communicate with them through behavior-driven email and in-app messages to help with feedback and suggestions to help you develop your product further.&lt;/p&gt;
&lt;h3&gt;Stripe&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Awesome payment processing&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Stripe&quot; href=&quot;https://stripe.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Stripe&lt;/a&gt; is a developer-friendly way to accept payments online on your website, or in your mobile app. It can be used in any size business and scales perfectly.&lt;/p&gt;
&lt;h3&gt;Apiary&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Api documentation&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Apiary&quot; href=&quot;http://apiary.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Apiary&lt;/a&gt; allows you to easily write a custom API blueprint for your project. Once created, you can share it with your teammates or customers to test. Once you have the perfect API mock, let your developers get to work. Check out the upcoming &lt;a title=&quot;Exceptionless 2.0 Documentation&quot; href=&quot;http://docs.exceptionless.apiary.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Exceptionless 2.0 documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Google Apps for Work&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Cloud based email and documents&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Google Apps for Work&quot; href=&quot;http://www.google.com/enterprise/apps/business/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Google Apps for Work&lt;/a&gt; is a service from Google that provides independently customizable versions of several Google products. It uses your personal domain name and features several Web applications with similar functionality to traditional office suites, including Gmail, Hangouts, Google Calendar, Drive, Docs, Sheets, Slides, Groups, News, Play, Sites, and Vault&lt;/p&gt;
&lt;h3&gt;Skype&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Video conferencing&lt;/strong&gt;&lt;br&gt;
&lt;a title=&quot;Skype&quot; href=&quot;http://www.skype.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Skype&lt;/a&gt; is the most popular voice communication service in the world. Skype can be used to instant message, VoIP, Send files, or collaborate with your friends, family, or team members. They provide desktop applications as well as mobile applications.&lt;/p&gt;
&lt;h2&gt;What’d We Miss?&lt;/h2&gt;
&lt;p&gt;As always, if you use other services and tools that are worth checking out, let us know. We know they’re out there!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-10-23-angularjs-exceptionless-2-0/"/>
    <updated>2014-10-23T20:50:56-05:00</updated>
    <id>https://exceptionless.com/2014-10-23-angularjs-exceptionless-2-0/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-11617&quot; style=&quot;margin-left: 15px; margin-bottom: 15px; margin-top: 10px;&quot; src=&quot;http://exceptionless.com/assets/AngularJS-large-300x84.png&quot; alt=&quot;Angular JS&quot; width=&quot;248&quot; height=&quot;70&quot; data-id=&quot;11617&quot; srcset=&quot;https://exceptionless.com/assets/AngularJS-large-300x84.png 300w, https://exceptionless.com/assets/AngularJS-large.png 383w&quot; sizes=&quot;(max-width: 248px) 100vw, 248px&quot;&gt;As we plug away at Exceptionless 2.0, perfecting and future-proofing it, we wanted to stop and take the time to talk about AngularJS, how we are using it in version two, and what benefits we’re going to get out of it.&lt;/p&gt;
&lt;p&gt;Naturally, we want to maintain all current functionality while supporting planned V2.0 features like search and filtering. We also want it to be static and use the REST API for everything. We’re pretty determined to not cheat on that point. Then, thinking ahead, building it to support easily adding new features in the future is a huge priority.&lt;/p&gt;
&lt;p&gt;Lets look at these points in a bit more detail.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Static UI&lt;/h2&gt;
&lt;p&gt;Using our fully documented REST API, the new Exceptionless 2.0 UI will be static, with no server side logic. What this allows us to do is host the UI on a content delivery network (CDN), guaranteeing faster load times for users anywhere in the world. &lt;strong&gt;Everyone&lt;/strong&gt; loves fast load times!&lt;/p&gt;
&lt;h2&gt;Much, Much Faster&lt;/h2&gt;
&lt;p&gt;Being a single page application (SPA), the new version of the app eliminates page loads. The only thing being loaded is the JSON data, and we can pre-load other content as users navigate the site. That, along with the static UI mentioned above, means we can deliver an app that responds almost instantaneously to the user’s input. What a time to be alive.&lt;/p&gt;
&lt;h2&gt;Maintainable Modularity&lt;/h2&gt;
&lt;p&gt;Version 1 taught us a lot. We gained valuable feedback from users, beat our head against several complex problems, and made countless wish lists for the future. Most of that lead to the desire for a more modular, easily maintainable system that new features could be added to with minimal reinvention.&lt;/p&gt;
&lt;p&gt;AngularJS has helped us fulfill those dreams. We can now add new features very easily, without breaking other sections of the site, and our code based has been greatly simplified. And, even with all the modularity, we are still able to run tests on the UI. Pretty snazzy!&lt;/p&gt;
&lt;p&gt;Event type support is handled via pluggable view modules, and we’ll be able to add new ones that we haven’t even conceived of with relative ease.&lt;/p&gt;
&lt;h2&gt;Do You Angular?&lt;/h2&gt;
&lt;p&gt;Making the choice to go with AngularJS wasn’t easy or quick, but be believe it was the right path to take.&lt;/p&gt;
&lt;p&gt;Do you Angular? What apps have you used it on? If not, what other frameworks do you use for this type of app, and why?&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-11-26-exceptionless-2-0-user-interface-first-look/"/>
    <updated>2014-11-26T10:56:54-06:00</updated>
    <id>https://exceptionless.com/2014-11-26-exceptionless-2-0-user-interface-first-look/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;We can prove it! Exceptionless 2.0 is real, and we’ve got evidence!&lt;/p&gt;
&lt;p&gt;We’ve been wanting to give everyone a sneak peak for a long time, and today we are excited to finally be able to. Watch the video above to see a high level overview of the new UI and features.&lt;/p&gt;
&lt;p&gt;There are still quite a few small things to take care of before we release it, but we are happy to say that we are around the 85% mark as far as being finished. Once we get closer, we will be putting up a live demo/preview site for everyone to play with and give feedback on.&lt;/p&gt;
&lt;p&gt;Please don’t hesitate to give us any feedback you may have after watching the video or reading the transcript below. We want to hear it!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;&lt;strong&gt;Video Transcript&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-12325&quot; style=&quot;margin-left: 20px; margin-bottom: 20px;&quot; src=&quot;http://exceptionless.com/assets/v2VideoThumbnail-300x179.png&quot; alt=&quot;Exceptionless 2.0&quot; width=&quot;300&quot; height=&quot;179&quot; data-id=&quot;12325&quot; srcset=&quot;https://exceptionless.com/assets/v2VideoThumbnail-300x179.png 300w, https://exceptionless.com/assets/v2VideoThumbnail-1024x611.png 1024w, https://exceptionless.com/assets/v2VideoThumbnail.png 1904w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt; Lets take a quick look around, shall we?&lt;/p&gt;
&lt;p&gt;Everything is built on angularJS and talking to the REST api, so the UI itself is static, with no more server-rendered views.&lt;/p&gt;
&lt;p&gt;There are a few upfront differences – mainly the fact that we’re using all the screen real estate now and everything is mobile responsive&lt;/p&gt;
&lt;h3&gt;Navigation &amp;amp; Exception Types&lt;/h3&gt;
&lt;p&gt;On the left navigation bar, we have the 4 default event types, exceptions, log messages, broken links, and feature usages. Each has a dashboard, most recent, most frequent, and new view, which generates a page very similar to what you’re used to seeing.&lt;/p&gt;
&lt;p&gt;As promised with version 2.0, we also have an all events section, which you can send literally any event to. We’ll go into more detail on that in future posts and videos.&lt;/p&gt;
&lt;h3&gt;Cross Project Views &amp;amp; Filtering&lt;/h3&gt;
&lt;p&gt;If we move to the top navigation bar, we see that you can now view data across all projects or by individual projects – a highly requested feature. We then have a quick time period selector, and finally the new filtering system, which allows you to quickly filter your exceptions. We’ll show off that feature in it’s own video soon.&lt;/p&gt;
&lt;h3&gt;Bulk Actions!&lt;/h3&gt;
&lt;p&gt;Moving down into the data portion of the view, one feature that actually isn’t new is that you can click and drag to select a period of time on the graph. Just a quick pointer there. Something that is new is the ability to select multiple exceptions or instances of an exception and perform bulk actions on it, such as Mark Fixed, Mark Hidden, or Delete. Again, more on that soon.&lt;/p&gt;
&lt;h3&gt;Anywhere. Anytime.&lt;/h3&gt;
&lt;p&gt;One last quick feature that we thought we would highlight today is that all times are now translated to the user’s timezone, so your team members can always be working in their specific time no matter where they are.&lt;/p&gt;
&lt;p&gt;That’s about it for today, but keep an eye out for more updates as we close in on a release date for Exceptionless 2.0. We know some of these features and enhancements have been on your request list, and we’re really excited to be this close to shipping them for you guys.&lt;/p&gt;
&lt;p&gt;Until next time, take care!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-12-07-filter-your-exceptions-video-demo/"/>
    <updated>2014-12-07T20:48:09-06:00</updated>
    <id>https://exceptionless.com/2014-12-07-filter-your-exceptions-video-demo/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-12475&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/tag-filter2-resized.gif&quot; alt=&quot;ElasticSearch Exceptionless Filter Demo&quot; width=&quot;300&quot; height=&quot;150&quot; data-id=&quot;12475&quot;&gt;If you’ve used Exceptionless, chances are a &lt;strong&gt;search or filter system&lt;/strong&gt; would have helped you out more than once. We know, and we agree! That’s why we’ve made it a priority with Exceptionless 2.0, which is coming very soon.&lt;/p&gt;
&lt;p&gt;To expand on our previous “&lt;a href=&quot;https://exceptionless.com/exceptionless-2-0-user-interface-first-look/&quot; title=&quot;Exceptionless 2.0 User Interface FIRST LOOK&quot;&gt;Exceptionless 2.0 User Interface FIRST LOOK&lt;/a&gt;” article, we want to give everyone a little bit more of a look at the filtering system. This demo isn’t anything super fancy, but it gives you a good idea of how easy and fast it will be to filter and search through your event data.&lt;/p&gt;
&lt;p&gt;As always, we are looking for feedback on the platform as we continue to draw nearer to launch, so feel free to leave us a comment or contact us and let us know what you think. We hope you like it!&lt;!--more--&gt;&lt;/p&gt;
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;Filter Demo Transcript&lt;/h2&gt;
&lt;p&gt;Hi there. Today we want to quickly demonstrate the use of the new filtering system in Exceptionless 2.0.&lt;/p&gt;
&lt;p&gt;Let’s check out a quick example.&lt;/p&gt;
&lt;p&gt;With our new tagging system, you can add any tag you like to an exception – so maybe you want to tag various exceptions to be related to a specific feature or issue – you can do that now.&lt;/p&gt;
&lt;p&gt;As you can see in our dummy data here, we’ve introduced Tag 1 through Tag 5 on various exceptions.&lt;/p&gt;
&lt;p&gt;If we go back out to the main dashboard and click up here on our filter/search icon, we can give it a quick test.&lt;/p&gt;
&lt;p&gt;Lets say I want to see all exceptions tagged “tag4”. OK Great. How about tag5? And tag 3? Cool.&lt;/p&gt;
&lt;p&gt;Now, we can also do that within a group of exceptions… Let’s look at this one. Again, all we do is filter by the different tags to see their frequency, look at individual instances, and more. Let me run through the different tags real quick.&lt;/p&gt;
&lt;p&gt;And that’s a quick look at the Exceptionless 2.0 Filtering system, which gives you even more control over sorting and finding the information you need.&lt;/p&gt;
&lt;h2&gt;Looking forward to filtering your Exceptionless events?&lt;/h2&gt;
&lt;p&gt;Great! That’s what we like to hear. We think it’s going to be super easy, super fast, and even fun for some of you data junkies. Again, if you have any questions or comments, please let us know.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2014-12-12-bulk-actions-sneak-peak-exceptionless-2-0-video/"/>
    <updated>2014-12-12T11:37:09-06:00</updated>
    <id>https://exceptionless.com/2014-12-12-bulk-actions-sneak-peak-exceptionless-2-0-video/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-12510&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/exceptionless-bulk-actions.gif&quot; alt=&quot;Exceptionless Bulk Actions&quot; width=&quot;300&quot; height=&quot;150&quot; data-id=&quot;12510&quot;&gt;You know you want it! Bulk edit actions, that is. The ability to select multiple exceptions or occurrences of a single exception and do with them as you please, all at once. Well, they’re coming, and today we’ve got a sneak peak!&lt;/p&gt;
&lt;p&gt;We’re not changing the world here, but we’re making yours a little more efficient. Maybe you want to remove sensitive instances of an error that contains certain data, or maybe you you’ve got some test errors that you don’t want included in the total count, either way the new feature should help. Check it out and let us know what you think!&lt;!--more--&gt;&lt;/p&gt;
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;Exceptionless Bulk Actions Video Transcript&lt;/h2&gt;
&lt;p&gt;Welcome to another sneak peak video for the upcoming Exceptionless 2.0. Today we’ll be looking at the new bulk edit feature, one of many highly requested features we wanted to make sure we got into version 2.&lt;/p&gt;
&lt;p&gt;If we log in to our Exceptionless 2.0 dashboard, which you’ve hopefully checked out the overview of in a &lt;a href=&quot;https://exceptionless.com/exceptionless-2-0-user-interface-first-look/&quot; title=&quot;Exceptionless 2.0 First Look Video&quot;&gt;previous blog post and video&lt;/a&gt;, we can see that there are now check boxes next to each exception, and if you click in to an individual exception, there is also a check box next to each occurrence of that exception.&lt;/p&gt;
&lt;p&gt;Going back to the dashboard, you can select one, multiple, or all visible exceptions. Then, after you’ve made your selections, you can mark all of them fixed or hidden, or you can delete them.&lt;/p&gt;
&lt;p&gt;Now, if we go into a specific exception, we can make all of the same selections, and then we can delete those specific occurrences of that exception.&lt;/p&gt;
&lt;p&gt;And that’s a quick look at the new bulk edit feature of the soon-to-be Exceptionless 2.0. Please leave a comment on this video or blog post and let us know what you think or any questions you may have. Thanks for watching.&lt;/p&gt;
&lt;h2&gt;Thoughts?&lt;/h2&gt;
&lt;p&gt;Lets hear em! Thanks for watching.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://exceptionless.com/exceptionless-2-0-user-interface-first-look/&quot; title=&quot;Exceptionless 2.0 First Look&quot;&gt;Exceptionless 2.0 First Look Video&lt;/a&gt; and the &lt;a href=&quot;https://exceptionless.com/filter-your-exceptions-video-demo/&quot; title=&quot;Exceptionless 2.0 Filtering Demo&quot;&gt;new filtering system demo video&lt;/a&gt;, if you haven’t already.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-01-12-exceptionless-2-0-update-close/"/>
    <updated>2015-01-12T18:07:41-06:00</updated>
    <id>https://exceptionless.com/2015-01-12-exceptionless-2-0-update-close/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-12627&quot; style=&quot;margin-left: 15px; margin-top: 7px;&quot; src=&quot;http://exceptionless.com/assets/exceptionless-2.0-screenshot-300x171.png&quot; alt=&quot;Exceptionless Error Logging Service&quot; width=&quot;300&quot; height=&quot;171&quot; data-id=&quot;12627&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-2.0-screenshot-300x171.png 300w, https://exceptionless.com/assets/exceptionless-2.0-screenshot.png 698w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;We know, we know… It’s been a while since our last update. As so often is the case, the holidays took their toll on work and waists here at Exceptionless over the past few months. However, we’re not slacking too bad. In fact, we’ve got a small update on Exceptionless 2.0 that proves it’s hasn’t been all turkey and naps!&lt;/p&gt;
&lt;p&gt;In general, the primary features and functionality of the new version are complete and we are in the testing, bug fix, and tweaking phase before we officially launch a production environment and begin orchestrating the process of data migration and rolling users over into the new system.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Recent Changes &amp;amp; Progress&lt;/h2&gt;
&lt;p&gt;We thought we would throw out some of the most recent stuff we’ve been working on. We’re sure you’ll approve!&lt;/p&gt;
&lt;h3&gt;Filter / Search&lt;/h3&gt;
&lt;p&gt;One of the main things we’ve been working hard to get right is the new filtering system. Since we put together our &lt;a href=&quot;https://exceptionless.com/filter-your-exceptions-video-demo/&quot; title=&quot;Exceptionless Search Filter Feature&quot;&gt;filter demo video&lt;/a&gt;, we’ve added in the following searchable items:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exception Type&lt;/li&gt;
&lt;li&gt;IP Address&lt;/li&gt;
&lt;li&gt;Messages&lt;/li&gt;
&lt;li&gt;Machine Name&lt;/li&gt;
&lt;li&gt;User&lt;/li&gt;
&lt;li&gt;Codes&lt;/li&gt;
&lt;li&gt;URL Path&lt;/li&gt;
&lt;li&gt;and more!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;p&gt;Another major feature we want to make sure is ready to go when we launch is the documentation. We aren’t quite finished with the user documentation, but the &lt;a href=&quot;https://exceptionless.com/upcoming-exceptionless-2-0-simplified-api/&quot; title=&quot;Exceptionless API Documentation&quot;&gt;API documentation&lt;/a&gt; has been updated and is current. Of course, we’ll keep updating everything as development continues and will field any support related questions you may have.&lt;/p&gt;
&lt;h3&gt;Queue Processor&lt;/h3&gt;
&lt;p&gt;We’ve been bragging about how fast Exceptionless 2.0 will be, and we’re not joking. We’ve been putting a lot of time recently into optimizing the queue processor so that it’s not just fast, but &lt;em&gt;&lt;strong&gt;really&lt;/strong&gt;&lt;/em&gt; fast. You’ll see!&lt;/p&gt;
&lt;h3&gt;Bots&lt;/h3&gt;
&lt;p&gt;Another little feature we’ve added is the ability to specify custom user agent strings to treat as bots. We’re sure a few of you guys will find that handy.&lt;/p&gt;
&lt;h2&gt;Coming Soon. Not Tomorrow, but Soon.&lt;/h2&gt;
&lt;p&gt;As mentioned above, we’re still working out some bugs and preparing to enter the production and migration phase. We’ll be sure to keep everyone updated via the blog, social media, email, and in-app as we get closer to launch.&lt;/p&gt;
&lt;p&gt;Until next time, we hope everyone had a great holiday season and is enjoying a happy new year!&lt;/p&gt;
&lt;h3&gt;Previously, Re: Exceptionless 2.0&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/exceptionless-2-0-user-interface-first-look/&quot; title=&quot;Exceptionless 2.0 First Look&quot;&gt;Version 2.0 First Look&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/filter-your-exceptions-video-demo/&quot; title=&quot;Exceptionless 2.0 Filtering and Search Demo&quot;&gt;Filtering Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/bulk-actions-sneak-peak-exceptionless-2-0-video/&quot; title=&quot;Exceptionless Bulk Actions Demo&quot;&gt;Bulk Actions Demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-02-11-exceptionless-2-0-live-preview-want-build-sandbox/"/>
    <updated>2015-02-11T11:27:40-06:00</updated>
    <id>https://exceptionless.com/2015-02-11-exceptionless-2-0-live-preview-want-build-sandbox/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-12697&quot; style=&quot;margin-left: 20px;&quot; src=&quot;http://exceptionless.com/assets/exceptionless-sandbox.png&quot; alt=&quot;exceptionless-sandbox&quot; width=&quot;174&quot; height=&quot;155&quot; data-id=&quot;12697&quot;&gt;Oh boy! We’re ready for you guys to beat on Exceptionless 2.0 in a sandbox environment!&lt;/p&gt;
&lt;p&gt;We’ve made you wait, and everyone has done so quite patiently, but now it’s officially time to check out V2.0 for yourself.&lt;/p&gt;
&lt;p&gt;We’re super excited, but we also &lt;span style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;need your help!&lt;/strong&gt;&lt;/span&gt; At this point, we are asking for any and all &lt;span style=&quot;color: #ff0000;&quot;&gt;&lt;strong&gt;feedback&lt;/strong&gt; &lt;/span&gt;to help us tweak and refine and get things launched. Check out the details and instructions below, and make sure to send us thoughts, critiques, praise, and (of course) bug reports via &lt;a title=&quot;Exceptionless GitHub Issues&quot; href=&quot;https://github.com/exceptionless/Exceptionless/issues/new&quot; target=&quot;_blank&quot;&gt;GitHub Issues&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;You Can Be.Exceptionless&lt;figure id=&quot;attachment_12699&quot; class=&quot;thumbnail wp-caption alignright&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/sandbox-preview.jpg&quot; rel=&quot;attachment wp-att-12699&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-12699 size-medium&quot; src=&quot;http://exceptionless.com/assets/sandbox-preview-300x183.jpg&quot; alt=&quot;Exceptionless 2.0 Dashboard Preview&quot; width=&quot;300&quot; height=&quot;183&quot; data-id=&quot;12699&quot; srcset=&quot;https://exceptionless.com/assets/sandbox-preview-300x183.jpg 300w, https://exceptionless.com/assets/sandbox-preview-1024x623.jpg 1024w, https://exceptionless.com/assets/sandbox-preview.jpg 1280w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Exceptionless 2.0 Dashboard Preview&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Simply…&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to &lt;a title=&quot;Exceptionless 2.0 Sandbox&quot; href=&quot;https://be.exceptionless.io/&quot; target=&quot;_blank&quot;&gt;https://be.exceptionless.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Log in with your &lt;strong&gt;existing&lt;/strong&gt; Exceptionless account&lt;br&gt;
&lt;em&gt;Some very recent accounts may not allow you to log in. If this is the case, please create new account for testing purposes.&lt;/em&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;View your current data in the new system – play around with it!&lt;/li&gt;
&lt;li&gt;(Optional, but Encouraged) Upgrade your client and start sending events to Exceptionless 2.0!&lt;br&gt;
&lt;span style=&quot;color: #800000;&quot;&gt;&lt;strong&gt;Notice:&lt;/strong&gt; &lt;em&gt;All new data sent to this sandbox preview will be lost when the final version of Exceptionless 2.0 goes live. You will have a gap in historical data. Also, existing clients (1.x) will still work against the 2.0 API when we go live.&lt;/em&gt;&lt;/span&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the NuGet Package Manager dialog.&lt;/li&gt;
&lt;li&gt;Click on the Updates tab.&lt;/li&gt;
&lt;li&gt;Select “Include Prerelease” from the dropdown.&lt;/li&gt;
&lt;li&gt;Select the Exceptionless NuGet packages and click the Update button.&lt;/li&gt;
&lt;li&gt;**You should be good to go!&lt;br&gt;
** If you need more info, view our &lt;a title=&quot;Upgrading Exceptionless&quot; href=&quot;http://docs.exceptionless.com/contents/upgrading/&quot; target=&quot;_blank&quot;&gt;upgrading documentation&lt;/a&gt; or contact us via in-app support.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Provide feedback via &lt;a title=&quot;Exceptionless Github Issues&quot; href=&quot;https://github.com/exceptionless/Exceptionless/issues/new&quot; target=&quot;_blank&quot;&gt;GitHub Issues&lt;/a&gt;. (good, bad, or ugly – we want it all)&lt;/li&gt;
&lt;li&gt;Be Exceptionless!&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Documentation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a title=&quot;Exceptionless 2.0 Upgrade Instructions&quot; href=&quot;http://docs.exceptionless.com/contents/upgrading/&quot; target=&quot;_blank&quot;&gt;How to Upgrade 1.x client to 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&quot;Search Terms&quot; href=&quot;http://docs.exceptionless.com/contents/search/&quot; target=&quot;_blank&quot;&gt;Search Terms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&quot;Exceptionless API Documentation&quot; href=&quot;https://api.exceptionless.io/docs/index&quot; target=&quot;_blank&quot;&gt;Fully Documented API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&lt;em&gt;All events submitted to the 2.0 system may be reset at any time and will be reset before we go live (sandboxed). New events that are submitted, and any changes that happen in the 2.0 preview, will not be available in the 1.x system and will be lost once 2.0 goes live. Existing clients (1.x) will still work against the 2.0 API when we go live.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;What Exceptionless 2.0 Offers&lt;/h2&gt;
&lt;p&gt;We have covered many of these new features in previous update posts, but there are a few new additions and tweaks we’ve thrown in since then, along with links to previous discussions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Searching / Filtering&lt;/strong&gt;&lt;br&gt;
We’ve implemented Elasticsearch and you can search/filter ALL the things! Read more &lt;a title=&quot;Exceptionless 2.0 Elasticsearch&quot; href=&quot;https://exceptionless.com/making-move-elastic-search-exceptionless-2-0/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and watch a quick demo video &lt;a title=&quot;Exceptionless Search Filters&quot; href=&quot;https://exceptionless.com/filter-your-exceptions-video-demo/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cross Organization Views&lt;/strong&gt;&lt;br&gt;
You now have the ability to view all events across all organizations, a single organization, or a project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PCL Support&lt;/strong&gt;&lt;br&gt;
We’ve built in client support for &lt;a title=&quot;Exceptionless.Portable&quot; href=&quot;https://www.nuget.org/packages/exceptionless.portable&quot; target=&quot;_blank&quot;&gt;portable class libraries&lt;/a&gt;!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;****New Clients!&lt;br&gt;
**** Including: &lt;a title=&quot;Exceptionless.Portable&quot; href=&quot;https://www.nuget.org/packages/exceptionless.portable&quot; target=&quot;_blank&quot;&gt;Exceptionless.Portable&lt;/a&gt; for console apps and &lt;a title=&quot;Exceptionless NLOG Client&quot; href=&quot;http://www.nuget.org/packages/exceptionless.nlog&quot; target=&quot;_blank&quot;&gt;Exceptionless.NLog&lt;/a&gt;, an nlog target that reports to Exceptionless&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fully Documented API&lt;/strong&gt;&lt;br&gt;
For all your API needs, check out the &lt;a title=&quot;Exceptionless API Documentation&quot; href=&quot;https://api.exceptionless.io/docs/index&quot; target=&quot;_blank&quot;&gt;API Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Bulk Actions&lt;br&gt;
** Select multiple events or instances of events and do with them as you please! &lt;a title=&quot;Exceptionless 2.0 Bulk Actions&quot; href=&quot;https://exceptionless.com/bulk-actions-sneak-peak-exceptionless-2-0-video/&quot; target=&quot;_blank&quot;&gt;Watch the preview demo.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Faster than Ever!&lt;br&gt;
** Exceptionless 2.0 is a single page app (SPA) and is lightning fast. &lt;a title=&quot;Exceptionless 2.0 AngularJS&quot; href=&quot;https://exceptionless.com/angularjs-exceptionless-2-0/&quot; target=&quot;_blank&quot;&gt;We’re using AngularJS&lt;/a&gt; and we’re stoked to give our users a super quick experience!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**And more…&lt;br&gt;
** Check out more new features, including source links, in our &lt;a title=&quot;Exceptionless 2.0 Overview&quot; href=&quot;https://exceptionless.com/upcoming-exceptionless-version-2-0-overview-review/&quot; target=&quot;_blank&quot;&gt;Exceptionless 2.0 Overview article&lt;/a&gt;. Includes details on: Event Based Reporting System, Simplified API, The Pluggable System, Client Rewrite, New Message Bus &amp;amp; Queuing, and Job System Enhancement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Help Us Make Exceptionless 2.0 Even Better&lt;/h2&gt;
&lt;p&gt;We’ve asked a few times already in this post, but we have to ask, once again, for your &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/new&quot; target=&quot;_blank&quot;&gt;feedback &lt;/a&gt;on the V2.0 platform. Our users define Exceptionless, and to make it the absolute best we can, we rely on &lt;strong&gt;you&lt;/strong&gt; to let us know what’s good, what’s bad, and what we shouldn’t have even wasted the bytes on. So please, give it a go and use &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/new&quot; target=&quot;_blank&quot;&gt;GitHub Issues&lt;/a&gt; to give us your thoughts. We appreciate it more than you know. Thanks!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-03-12-its-go-time-exceptionless-2-0-launched/"/>
    <updated>2015-03-12T14:56:18-05:00</updated>
    <id>https://exceptionless.com/2015-03-12-its-go-time-exceptionless-2-0-launched/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-12751&quot; src=&quot;http://exceptionless.com/assets/version-2.0-launched.png&quot; alt=&quot;version-2.0-launched&quot; width=&quot;174&quot; height=&quot;155&quot; data-id=&quot;12751&quot;&gt;Today, after much development and &lt;a href=&quot;#preview&quot;&gt;weeks of live user testing and feedback&lt;/a&gt;, we have officially released Exceptionless 2.0 into the wild!&lt;/p&gt;
&lt;p&gt;Users will notice a completely new interface and experience &lt;strong&gt;numerous new features and improvements&lt;/strong&gt;, highlighted below. Existing users that &lt;a title=&quot;Update Exceptionless Client to 2.0&quot; href=&quot;http://docs.exceptionless.com/contents/upgrading/&quot; target=&quot;_blank&quot;&gt;update their clients&lt;/a&gt; (not required) will experience improved client efficiency, the ability to send us logs, and more. We believe 2.0 will usher in a new era in event reporting and logging, becoming a true asset to developers everywhere.&lt;/p&gt;
&lt;p&gt;Shipping 2.0 out to our amazing customers has us &lt;strong&gt;overwhelmed with excitement&lt;/strong&gt;, and we can’t wait to see all the new ways in which Exceptionless will be used to squash bugs and improve apps everywhere. Read on for more details on updating existing clients and all the new features and changes. &lt;strong&gt;We know you’ll love it.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://be.exceptionless.io/&quot; target=&quot;_blank&quot;&gt;Check Out Exceptionless 2.0 Now!&lt;/a&gt;
&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2&gt;Updating Clients for Existing Users&lt;/h2&gt;
&lt;p&gt;Follow these quick and easy steps below to update your Exceptionless client to 2.0.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the NuGet Package Manager dialog.&lt;/li&gt;
&lt;li&gt;Click on the Updates tab.&lt;/li&gt;
&lt;li&gt;Select the Exceptionless NuGet packages and click the Update button.&lt;/li&gt;
&lt;li&gt;**You should be good to go!&lt;br&gt;
** If you need more info, view our &lt;a title=&quot;Upgrading Exceptionless&quot; href=&quot;http://docs.exceptionless.com/contents/upgrading/&quot; target=&quot;_blank&quot;&gt;updating documentation&lt;/a&gt; or contact us via in-app support. We’re always here to help if you have any questions!&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Exceptionless 2.0 Feature Recap&lt;/h2&gt;
&lt;h3&gt;Check out these awesome new and improved features&lt;figure id=&quot;attachment_12762&quot; class=&quot;thumbnail wp-caption alignright&quot; style=&quot;width: 150px&quot;&gt;&lt;/figure&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/version-2-launch-screenshot.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-12762 size-thumbnail&quot; src=&quot;http://exceptionless.com/assets/version-2-launch-screenshot-150x150.jpg&quot; alt=&quot;Exceptionless 2.0 Screenshot&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;12762&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Version 2.0 Screenshot&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;Exceptionless 2.0 is faster, sleeker, mobile-friendly, more functional, includes all the below major improvements, and has countless smaller tweaks and changes we poured our heart and soul into. It’s a whole new system – check it out!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Searching / Filtering&lt;/strong&gt;&lt;br&gt;
We’ve implemented Elasticsearch and you can search/filter ALL the things! Read more &lt;a title=&quot;Exceptionless 2.0 Elasticsearch&quot; href=&quot;http://exceptionless.com/making-move-elastic-search-exceptionless-2-0/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and watch a quick demo video &lt;a title=&quot;Exceptionless Search Filters&quot; href=&quot;http://exceptionless.com/filter-your-exceptions-video-demo/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cross Organization Views&lt;/strong&gt;&lt;br&gt;
You now have the ability to view all events across all organizations, a single organization, or a project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PCL Support&lt;/strong&gt;&lt;br&gt;
We’ve built in client support for &lt;a title=&quot;Exceptionless.Portable&quot; href=&quot;https://www.nuget.org/packages/exceptionless.portable&quot; target=&quot;_blank&quot;&gt;portable class libraries&lt;/a&gt;!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;****New Clients!&lt;br&gt;
**** Including: &lt;a title=&quot;Exceptionless.Portable&quot; href=&quot;https://www.nuget.org/packages/exceptionless.portable&quot; target=&quot;_blank&quot;&gt;Exceptionless.Portable&lt;/a&gt; for console apps and &lt;a title=&quot;Exceptionless NLOG Client&quot; href=&quot;http://www.nuget.org/packages/exceptionless.nlog&quot; target=&quot;_blank&quot;&gt;Exceptionless.NLog&lt;/a&gt;, an nlog target that reports to Exceptionless&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fully Documented API&lt;/strong&gt;&lt;br&gt;
For all your API needs, check out the &lt;a title=&quot;Exceptionless API Documentation&quot; href=&quot;https://api.exceptionless.io/docs/index&quot; target=&quot;_blank&quot;&gt;API Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Bulk Actions&lt;br&gt;
** Select multiple events or instances of events and do with them as you please! &lt;a title=&quot;Exceptionless 2.0 Bulk Actions&quot; href=&quot;http://exceptionless.com/bulk-actions-sneak-peak-exceptionless-2-0-video/&quot; target=&quot;_blank&quot;&gt;Watch the preview demo.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Faster than Ever!&lt;br&gt;
** Exceptionless 2.0 is a single page app (SPA) and is lightning fast. &lt;a title=&quot;Exceptionless 2.0 AngularJS&quot; href=&quot;http://exceptionless.com/angularjs-exceptionless-2-0/&quot; target=&quot;_blank&quot;&gt;We’re using AngularJS&lt;/a&gt; and we’re stoked to give our users a super quick experience!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;li id=&quot;preview&quot;&gt;
  &lt;strong&gt;And more…&lt;br&gt; &lt;/strong&gt;Check out more new features, including source links, in our &lt;a title=&quot;Exceptionless 2.0 Overview&quot; href=&quot;http://exceptionless.com/upcoming-exceptionless-version-2-0-overview-review/&quot; target=&quot;_blank&quot;&gt;Exceptionless 2.0 Overview article&lt;/a&gt;. Includes details on: Event Based Reporting System, Simplified API, The Pluggable System, Client Rewrite, New Message Bus &amp; Queuing, and Job System Enhancement.
&lt;/li&gt;
&lt;h2&gt;Live User Testing Review &amp;amp; Notes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Our live preview went great! Thank you EVERYONE that sent feedback and comments.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We received some awesome feedback from many of our customers, made some UI/usability tweaks and improvements, and fixed a few minor bugs. We also added the ability to search custom fields, which is a pretty big deal for some.&lt;/p&gt;
&lt;p&gt;Naturally, we used Exceptionless 2.0 to log, report on, and gather data for the preview – and it worked amazingly! (shameless, but true, promotion)&lt;/p&gt;
&lt;p&gt;On average, we traced &lt;strong&gt;200,000+ anonymous log messages&lt;/strong&gt; within the app &lt;strong&gt;each day&lt;/strong&gt; from preview activity. That data allowed us to learn a lot more about the behavior of Exceptionless 2.0 in areas such as jobs and gave us additional insight into what was going on. We were able to use a combination of errors, logs, and feature usage metrics to track down and fix an issue with external logins, as well. Awesome!&lt;/p&gt;
&lt;p&gt;The system also helped us track down and identify a performance issue that we were able to fix and improve.&lt;/p&gt;
&lt;p&gt;Overall, we had no major surprises and were able to tweak and improve several pieces of the app that we think will make it even more awesome.&lt;/p&gt;
&lt;h2&gt;Keep The Feedback Coming&lt;/h2&gt;
&lt;p&gt;No software application is ever “done,” so make sure to keep the feedback coming. We’ve made a huge leap from Exceptionless 1.x, but we want to keep improving the system in all areas. &lt;strong&gt;We love hearing from our users&lt;/strong&gt;, and respond to each email, in-app message, website form submission, etc. So, please, let us know what you think!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-03-25-logging-feature-usages-with-exceptionless/"/>
    <updated>2015-03-25T13:19:17-05:00</updated>
    <id>https://exceptionless.com/2015-03-25-logging-feature-usages-with-exceptionless/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-12860&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/feature-usage.png&quot; alt=&quot;Exceptionless Feature Usage&quot; width=&quot;198&quot; height=&quot;161&quot; data-id=&quot;12860&quot;&gt;The ability to log feature usages is one of the many &lt;a title=&quot;Exceptionless 2.0 Launch Article&quot; href=&quot;http://exceptionless.com/its-go-time-exceptionless-2-0-launched/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;new… features… of Exceptionless 2.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to know when a button is being clicked, or what users are doing certain tasks, feature usage logging will help you track and visualize each occurrence.&lt;/p&gt;
&lt;p&gt;What you learn from logging these types of feature usages might surprise you, and at the very least you’ll know more about how users interact with your system.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;How to Submit a Feature Usage&lt;/h2&gt;
&lt;h3&gt;Using the client&lt;/h3&gt;
&lt;p&gt;For this example, we are assuming that you have already created an account and installed and &lt;a title=&quot;Configure Exceptionless&quot; href=&quot;https://github.com/exceptionless/Exceptionless.Net/wiki/Configuration&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;configured&lt;/a&gt; the Exceptionless 2.0 client. If you are still using the 1.x client, you will need to &lt;a title=&quot;Upgrade Exceptionless Client&quot; href=&quot;https://github.com/exceptionless/Exceptionless.Net/wiki/Upgrading&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;upgrade&lt;/a&gt; to send us feature usage events. Please contact support via an in-app support message or our &lt;a title=&quot;Contact Exceptionless&quot; href=&quot;http://exceptionless.com/contact/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;contact page&lt;/a&gt; if you have any questions or need assistance in this area.&lt;/p&gt;
&lt;h4&gt;Example 1 – Signup&lt;/h4&gt;
&lt;p&gt;In the example below, we are going to submit a feature usage when any user signs up.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To submit the feature occurrence, you just need to call our api as follows:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;using Exceptionless;
ExceptionlessClient.Default.SubmitFeatureUsage(&quot;Signup&quot;);&lt;/pre&gt;
&lt;p&gt;SubmitFeatureUsage creates a simple feature usage and submits it. To include more information, please use CreateFeatureUsage (example below).&lt;/p&gt;
&lt;h4&gt;More detailed examples&lt;/h4&gt;
&lt;p&gt;You can also submit additional information with a feature usage using our fluent api. This is nice when you want to add contextual information, contact information, or a tag.&lt;/p&gt;
&lt;h4&gt;Example 2 – Signup with tags&lt;/h4&gt;
&lt;p&gt;If, for instance, you wanted to indicate how a user signs up, you can add a tag to the feature usage occurrence. In the below example, we are tagging a feature usage that uses GitHub to sign up.&lt;/p&gt;
&lt;pre&gt;using Exceptionless;
ExceptionlessClient.Default.CreateFeatureUsage(&quot;Signup&quot;).AddTags(&quot;GitHub&quot;).Submit();&lt;/pre&gt;
&lt;h4&gt;Example 3 – Who’s Searching?&lt;/h4&gt;
&lt;p&gt;As another example, maybe we want to log a feature usage when users search, and then set their identity.&lt;/p&gt;
&lt;pre&gt;using Exceptionless;
ExceptionlessClient.Default.CreateFeatureUsage(&quot;Searching&quot;).SetUserIdentity(&quot;John Smith&quot;);&lt;/pre&gt;
&lt;h4&gt;What else can I add to a submission?&lt;/h4&gt;
&lt;p&gt;There are a number of additional pieces of data you can use for your event. The below bullets include the current EventBuilder list, but we are always adding more that can be found on &lt;a title=&quot;Exceptionless EventBuilder.cs&quot; href=&quot;https://github.com/exceptionless/Exceptionless.Net/blob/master/src/Exceptionless/EventBuilder.cs&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;GitHub&lt;/a&gt;. Also, view more examples here on our &lt;a title=&quot;Send Exceptionless Events&quot; href=&quot;https://github.com/exceptionless/Exceptionless.Net/wiki/Sending-Events&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;Sending Events&lt;/a&gt; page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AddTags&lt;/li&gt;
&lt;li&gt;SetProperty&lt;/li&gt;
&lt;li&gt;AddObject&lt;/li&gt;
&lt;li&gt;MarkAsCritical&lt;/li&gt;
&lt;li&gt;SetUserIdentity&lt;/li&gt;
&lt;li&gt;SetUserDescription&lt;/li&gt;
&lt;li&gt;SetVersion&lt;/li&gt;
&lt;li&gt;SetSource&lt;/li&gt;
&lt;li&gt;SetSessionId&lt;/li&gt;
&lt;li&gt;SetReferenceId&lt;/li&gt;
&lt;li&gt;SetMessage&lt;/li&gt;
&lt;li&gt;SetGeo&lt;/li&gt;
&lt;li&gt;SetValue&lt;/li&gt;
&lt;li&gt;And more, depending on your client&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using the REST API&lt;/h3&gt;
&lt;p&gt;You can also submit a feature usage by posting JSON to our API. See details in our &lt;a title=&quot;Exceptionless JSON Post API Documentation&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Event/Event_Post&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;API Documentation&lt;/a&gt;. If you need an API key for simply posting events, you can find it in your &lt;a title=&quot;Exceptionless&quot; href=&quot;https://be.exceptionless.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;project settings&lt;/a&gt;. Otherwise, please refer to the &lt;a title=&quot;Exceptionless Auth Login API Documentation&quot; href=&quot;https://api.exceptionless.io/docs/index.html#!/Auth/Auth_Login&quot; target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot;&gt;auth login documentation&lt;/a&gt; to get a user scoped api key.&lt;/p&gt;
&lt;pre&gt;{
 &quot;type&quot;: &quot;usage&quot;,
 &quot;source&quot;: &quot;Signup&quot;
 }&lt;/pre&gt;
&lt;h2&gt;The Dashboard&lt;/h2&gt;
&lt;p&gt;Feature usage logging makes it very easy to see how often a feature, such as logging into an account, is used over time. If usage of one type of login, for instances, is never used, there might be an issue or you could consider removing it (less code debt). Or, if one is used the majority of the time, maybe it should be first in the list. There are almost unlimited ways you can use feature usage data to improve user experience.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/feature-usage-dashboard.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-12854 size-large&quot; src=&quot;http://exceptionless.com/assets/feature-usage-dashboard-1024x603.png&quot; alt=&quot;Exceptionless Feature Usage Dashboard&quot; width=&quot;940&quot; height=&quot;554&quot; data-id=&quot;12854&quot; srcset=&quot;https://exceptionless.com/assets/feature-usage-dashboard-1024x603.png 1024w, https://exceptionless.com/assets/feature-usage-dashboard-300x177.png 300w, https://exceptionless.com/assets/feature-usage-dashboard.png 1111w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If we click on the stack for the signup feature, it shows the tag list of the providers that have been used to signup (GitHub and Google, in this instance).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/feature-usage-stack-tags.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-12855 size-full&quot; src=&quot;http://exceptionless.com/assets/feature-usage-stack-tags.png&quot; alt=&quot;Exceptionless Feature Usage Stack&quot; width=&quot;901&quot; height=&quot;498&quot; data-id=&quot;12855&quot; srcset=&quot;https://exceptionless.com/assets/feature-usage-stack-tags.png 901w, https://exceptionless.com/assets/feature-usage-stack-tags-300x166.png 300w&quot; sizes=&quot;(max-width: 901px) 100vw, 901px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can even go further and filter by a tag to see exactly how people are logging into your system using the search filter. Example: “tag:GitHub”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/feature-usage-tag-github.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-12856 size-full&quot; src=&quot;http://exceptionless.com/assets/feature-usage-tag-github.png&quot; alt=&quot;Exceptionless Feature Usage Filtering Searching&quot; width=&quot;903&quot; height=&quot;681&quot; data-id=&quot;12856&quot; srcset=&quot;https://exceptionless.com/assets/feature-usage-tag-github.png 903w, https://exceptionless.com/assets/feature-usage-tag-github-300x226.png 300w&quot; sizes=&quot;(max-width: 903px) 100vw, 903px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Regarding the SetUserIdentity example above, we can see that user information being appended to a feature usage occurrence if we visit the “Search” feature and view an occurrence.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/feature-usage-searching-userID.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-12858 size-full&quot; src=&quot;http://exceptionless.com/assets/feature-usage-searching-userID.png&quot; alt=&quot;Exceptionless Feature Usage User Info&quot; width=&quot;840&quot; height=&quot;553&quot; data-id=&quot;12858&quot; srcset=&quot;https://exceptionless.com/assets/feature-usage-searching-userID.png 840w, https://exceptionless.com/assets/feature-usage-searching-userID-300x198.png 300w&quot; sizes=&quot;(max-width: 840px) 100vw, 840px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Cool Stuff, Right?&lt;/h2&gt;
&lt;p&gt;We think so, and we hope you do too. Either way, we’re always looking for feedback, so let us know what you think via the comments below, an in app support message, or via the &lt;a href=&quot;http://exceptionless.com/contact/&quot; title=&quot;Contact Exceptionless&quot;&gt;contact page&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-03-31-sending-log-messages-to-exceptionless/"/>
    <updated>2015-03-31T11:47:58-05:00</updated>
    <id>https://exceptionless.com/2015-03-31-sending-log-messages-to-exceptionless/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-12886 size-full&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/log-messages.png&quot; alt=&quot;Exceptionless Log Message Events&quot; width=&quot;199&quot; height=&quot;200&quot; data-id=&quot;12886&quot; srcset=&quot;https://exceptionless.com/assets/log-messages.png 199w, https://exceptionless.com/assets/log-messages-150x150.png 150w&quot; sizes=&quot;(max-width: 199px) 100vw, 199px&quot;&gt;We’re all about exceptions, but sometimes, as developers, we run into bugs that don’t throw them but still cause major havoc in the system. There are also times we just need to record an event with a custom message to help track down bottlenecks, etc.&lt;/p&gt;
&lt;p&gt;That’s where Exceptionless meets log messages.&lt;/p&gt;
&lt;p&gt;In Exceptionless 2.0, you can now send custom log messages to a Log Messages dashboard where they can be tracked and view just like exceptions and other events.&lt;/p&gt;
&lt;p&gt;Lets take a closer look…&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;How to Submit a Log Message to Exceptionless&lt;/h2&gt;
&lt;h3&gt;Using the Client&lt;/h3&gt;
&lt;p&gt;For this example, we are assuming that you have already created an account and installed and &lt;a title=&quot;Configure Exceptionless&quot; href=&quot;http://docs.exceptionless.com/contents/configuration/&quot; target=&quot;_blank&quot;&gt;configured&lt;/a&gt; the Exceptionless 2.0 client. If you are still using the 1.x client, you will need to &lt;a title=&quot;Upgrade Exceptionless Client&quot; href=&quot;http://docs.exceptionless.com/contents/upgrading/&quot; target=&quot;_blank&quot;&gt;upgrade&lt;/a&gt; to send us log messages. Please contact support via an in-app support message or our &lt;a title=&quot;Contact Exceptionless&quot; href=&quot;http://exceptionless.com/contact/&quot; target=&quot;_blank&quot;&gt;contact page&lt;/a&gt; if you have any questions or need assistance in this area.&lt;/p&gt;
&lt;h4&gt;Let’s submit a log message&lt;/h4&gt;
&lt;pre&gt;using Exceptionless;
ExceptionlessClient.Default.SubmitLog(&quot;Application starting up&quot;);&lt;/pre&gt;
&lt;p&gt;That’s your basic log message.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Getting fancier&lt;/strong&gt;, you can also specify the log source and log level.&lt;/h4&gt;
&lt;p&gt;In the below example, “&lt;em&gt;typeof(MainWindow)__.FullName&lt;/em&gt;” specifies the log source, and “&lt;em&gt;Info&lt;/em&gt;” specifies the log level. If no log source is specified, the log messages will be stacked under a global log stack.&lt;/p&gt;
&lt;p&gt;We recommend specifying one of the following log levels, all of which add a visual indicator to each log message (see below screenshot).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trace&lt;/li&gt;
&lt;li&gt;Debug&lt;/li&gt;
&lt;li&gt;Info&lt;/li&gt;
&lt;li&gt;Warn&lt;/li&gt;
&lt;li&gt;Error&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;ExceptionlessClient.Default.SubmitLog(typeof(MainWindow).FullName, &quot;Info log example&quot;, &quot;Info&quot;);
&lt;/pre&gt;
&lt;p&gt;Here’s a screenshot of what the visual indicators for the different types of log levels look like.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/log-messages-log-level.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-12887 size-full&quot; src=&quot;http://exceptionless.com/assets/log-messages-log-level.png&quot; alt=&quot;Exceptionless Log Message Preview&quot; width=&quot;813&quot; height=&quot;537&quot; data-id=&quot;12887&quot; srcset=&quot;https://exceptionless.com/assets/log-messages-log-level.png 813w, https://exceptionless.com/assets/log-messages-log-level-300x198.png 300w&quot; sizes=&quot;(max-width: 813px) 100vw, 813px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;You can also add additional information using our fluent API.&lt;/h4&gt;
&lt;p&gt;This is helpful wen you want to add contextual information, contact information, or a tag.&lt;/p&gt;
&lt;p&gt;In the below example, we will use the “&lt;em&gt;CreateLog&lt;/em&gt;” method to add a tag to the log message.&lt;/p&gt;
&lt;pre&gt;using Exceptionless;
ExceptionlessClient.Default.CreateLog(typeof(MainWindow).FullName, &quot;Info log example&quot;, &quot;Info&quot;).AddTags(&quot;Wpf&quot;).Submit();
&lt;/pre&gt;
&lt;p&gt;There are a number of additional pieces of data you can use for your event. The below bullets include the current EventBuilder list, but we are always adding more that can be found on &lt;a title=&quot;Exceptionless EventBuilder.cs&quot; href=&quot;https://github.com/exceptionless/Exceptionless.Net/blob/master/Source/Shared/EventBuilder.cs&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;. Also, view more examples here on our &lt;a title=&quot;Send Exceptionless Events&quot; href=&quot;http://docs.exceptionless.com/contents/sendingevents/&quot; target=&quot;_blank&quot;&gt;Sending Events&lt;/a&gt; page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AddTags&lt;/li&gt;
&lt;li&gt;SetProperty&lt;/li&gt;
&lt;li&gt;AddObject&lt;/li&gt;
&lt;li&gt;MarkAsCritical&lt;/li&gt;
&lt;li&gt;SetUserIdentity&lt;/li&gt;
&lt;li&gt;SetUserDescription&lt;/li&gt;
&lt;li&gt;SetVersion&lt;/li&gt;
&lt;li&gt;SetSource&lt;/li&gt;
&lt;li&gt;SetSessionId&lt;/li&gt;
&lt;li&gt;SetReferenceId&lt;/li&gt;
&lt;li&gt;SetMessage&lt;/li&gt;
&lt;li&gt;SetGeo&lt;/li&gt;
&lt;li&gt;SetValue&lt;/li&gt;
&lt;li&gt;And more, depending on your client&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Using the REST API&lt;/h3&gt;
&lt;p&gt;You can also submit a log message with an HTTP post to our &lt;a title=&quot;Exceptionless Events Endpoint&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Event/Event_Post&quot; target=&quot;_blank&quot;&gt;events endpoint&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;My log message
My second log message.&lt;/pre&gt;
&lt;p&gt;By default, any content that is submitted to the API post is a log message. The above example will be broken into two log messages because it automatically splits text content by the new line.&lt;/p&gt;
&lt;h4&gt;You can submit a log message via JSON, too.&lt;/h4&gt;
&lt;p&gt;See details in our &lt;a title=&quot;Exceptionless JSON Post API Documentation&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Event/Event_Post&quot; target=&quot;_blank&quot;&gt;API Documentation&lt;/a&gt;. If you need an API key for simply posting events, you can find it in your &lt;a title=&quot;Exceptionless&quot; href=&quot;https://be.exceptionless.io/&quot; target=&quot;_blank&quot;&gt;project settings&lt;/a&gt;. Otherwise, please refer to the &lt;a title=&quot;Exceptionless Auth Login API Documentation&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Auth/Auth_Login&quot; target=&quot;_blank&quot;&gt;auth login documentation&lt;/a&gt; to get a user scoped api key.&lt;/p&gt;
&lt;p&gt;Below is a JSON example of a log message, with source, message, and log level.&lt;/p&gt;
&lt;pre&gt;{
  &quot;type&quot;: &quot;log&quot;,
  &quot;source&quot;: &quot;WpfApplication3.MainWindow&quot;,
  &quot;message&quot;: &quot;Application started&quot;,
  &quot;data&quot;: {
    &quot;@level&quot;: &quot;Info&quot;,
  }
}
&lt;/pre&gt;
&lt;h3&gt;Using NLog or Log4net Targets&lt;/h3&gt;
&lt;p&gt;We also have integrations with major logging frameworks. The benefits of using a logging framework is finer, more granular control over what is logged.&lt;/p&gt;
&lt;p&gt;For example, you can log only warnings or errors project-wide, but then enable trace level messages for a specific class. &lt;a title=&quot;Exceptionless NLog Log Message Implementation&quot; href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Api/NLog.config#L31-L34&quot; target=&quot;_blank&quot;&gt;We do this on our project&lt;/a&gt; to keep our system from getting filled up with noise that doesn’t add any value unless there is an issue.&lt;/p&gt;
&lt;p&gt;This also allows you to quickly change what you want to log to. Maybe you want to turn off logging to Exceptionless, or log to Exceptionless and to disk.&lt;/p&gt;
&lt;h4&gt;NLog or Log4net Usage&lt;/h4&gt;
&lt;p&gt;To use the &lt;a title=&quot;Exceptionless NLog Nuget Package&quot; href=&quot;https://www.nuget.org/packages/exceptionless.nlog&quot; target=&quot;_blank&quot;&gt;NLog &lt;/a&gt;or &lt;a title=&quot;Exceptionless Log4net Nuget Package&quot; href=&quot;https://www.nuget.org/packages/exceptionless.log4net&quot; target=&quot;_blank&quot;&gt;Log4net&lt;/a&gt; clients, you’ll just need to bring down the nuget package and follow the detailed readme. You can also take a look at our &lt;a title=&quot;Exceptionless NLog Log4net Logging Sample&quot; href=&quot;https://github.com/exceptionless/Exceptionless.Net/tree/master/Source/Samples/SampleConsole&quot; target=&quot;_blank&quot;&gt;sample app&lt;/a&gt;, which uses both frameworks.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;span style=&quot;color: #993300;&quot;&gt;&lt;strong&gt;Note on performance: Use in-memory event storage for high volumes&lt;/strong&gt;&lt;/span&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There are some performance considerations you should be aware of when you are logging very high numbers of log events and using our client. We’ve spent a lot of time to ensure Exceptionless doesn’t degrade your applications performance. However, if you are logging thousands of messages a minute, you should use the in-memory event storage.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;using Exceptionless;
ExceptionlessClient.Default.Configuration.UseInMemoryStorage();
&lt;/pre&gt;
&lt;p&gt;This tells the client not to serialize the log events to disk before sending and thus is much faster (the client doesn’t need to serialize the event to disk and read it from disk before sending). This comes at the expense that if the application dies, you will lose any unsent events that were in memory. When you use the NLog or Log4net targets and specify the API key as part of the target configuration, we will automatically create a second client instance that uses in-memory storage only for log messages. This way, any logged exceptions or feature usages still use disk storage, while log messages use in-memory storage, allowing maximum performance.&lt;/p&gt;
&lt;p&gt;**Another Note: **We are also working on updating the &lt;a title=&quot;Exceptionless Serilog Github Issue&quot; href=&quot;https://github.com/serilog/serilog/issues/381&quot; target=&quot;_blank&quot;&gt;Serilog implementation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Log Messages Dashboard&lt;/h2&gt;
&lt;p&gt;The Log Messages Dashboard makes it easy to see log occurrences. You can keep track of how active a component is, or how long code takes to execute using existing metrics.&lt;/p&gt;
&lt;p&gt;For metrics, we have created an &lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot; target=&quot;_blank&quot;&gt;open source metrics library called Foundatio&lt;/a&gt;. We use it for Exceptionless, and think you will find it extremely helpful as well. Check it out! We’ll be posting an article on Foundatio soon, so check back.&lt;/p&gt;
&lt;h2&gt;&lt;a href=&quot;http://exceptionless.com/assets/log-messages-dashboard.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-12889&quot; src=&quot;http://exceptionless.com/assets/log-messages-dashboard.png&quot; alt=&quot;log-messages-dashboard&quot; width=&quot;796&quot; height=&quot;867&quot; data-id=&quot;12889&quot; srcset=&quot;https://exceptionless.com/assets/log-messages-dashboard.png 796w, https://exceptionless.com/assets/log-messages-dashboard-275x300.png 275w&quot; sizes=&quot;(max-width: 796px) 100vw, 796px&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;How Are You Liking Exceptionless 2.0?&lt;/p&gt;
&lt;p&gt;We think we’ve added some pretty cool features to Exceptionless 2.0, including logging, but you are the ultimate judge. What’s good? What’s bad? What’s missing? Let us know via a comment on the blog, social media, in-app, or however else you want to get in touch!&lt;/p&gt;
&lt;p&gt;If you’re new to Exceptionless 2.0, make sure to &lt;a href=&quot;http://exceptionless.com/its-go-time-exceptionless-2-0-launched/&quot; title=&quot;Exceptionless 2.0 Launched&quot;&gt;check out the launch article&lt;/a&gt; for more details on the new features and enhancements.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-04-06-how-to-add-a-plugin-to-affect-events-in-exceptionless/"/>
    <updated>2015-04-06T21:07:23-05:00</updated>
    <id>https://exceptionless.com/2015-04-06-how-to-add-a-plugin-to-affect-events-in-exceptionless/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-12927&quot; style=&quot;margin-top: 10px; margin-bottom: 15px;&quot; src=&quot;http://exceptionless.com/assets/plugins-code-featured1.jpg&quot; alt=&quot;Exceptionless Plugins&quot; width=&quot;708&quot; height=&quot;200&quot; data-id=&quot;12927&quot; srcset=&quot;https://exceptionless.com/assets/plugins-code-featured1.jpg 708w, https://exceptionless.com/assets/plugins-code-featured1-300x85.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;A plugin is a client-side addin that is run every time you submit an event.&lt;/p&gt;
&lt;p&gt;Plugins can be used to add or remove data from an event, or even allow you to cancel an event submission.&lt;/p&gt;
&lt;p&gt;Each client-specific implementation registers a plugin to provide client-specific information like request info, environmental info, etc. These abilities make plugins very powerful.&lt;/p&gt;
&lt;p&gt;Let’s take a more in-depth look at Exceptionless Plugins and how they are used.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Pre-Reqs&lt;/h2&gt;
&lt;p&gt;First, we are assuming that you have already created an account and installed and &lt;a title=&quot;Configure Exceptionless&quot; href=&quot;http://docs.exceptionless.com/contents/configuration/&quot; target=&quot;_blank&quot;&gt;configured&lt;/a&gt; the latest version of the Exceptionless client (plugins require client v3 – released 4/6/2015). If you are still using the 1.x client, you will need to &lt;a title=&quot;Upgrade Exceptionless Client&quot; href=&quot;http://docs.exceptionless.com/contents/upgrading/&quot; target=&quot;_blank&quot;&gt;upgrade&lt;/a&gt; to use plugins.  Please contact support via an in-app support message or our &lt;a title=&quot;Contact Exceptionless&quot; href=&quot;https://exceptionless.com/contact/&quot; target=&quot;_blank&quot;&gt;contact page&lt;/a&gt; if you have any questions or need assistance in this area.&lt;/p&gt;
&lt;h2&gt;Creating a New Plugin&lt;/h2&gt;
&lt;p&gt;Before we create our first plugin, it’s important to keep in mind that &lt;strong&gt;each plugin will run every time an event is submitted&lt;/strong&gt;. As such, you should ensure your plugins are fast and not super resource-intensive so your app remains as quick as possible.&lt;/p&gt;
&lt;p&gt;To create a plugin, you have to specify a System.Action&lt;EventPluginContext&gt;, or create a class that derives from &lt;a title=&quot;Exceptionless IEventPlugin&quot; href=&quot;https://github.com/exceptionless/Exceptionless.Net/blob/master/Source/Shared/Plugins/IEventPlugin.cs&quot; target=&quot;_blank&quot;&gt;IEventPlugin&lt;/a&gt;.&lt;/EventPluginContext&gt;&lt;/p&gt;
&lt;p&gt;Every plugin is passed an &lt;a title=&quot;Exceptionless Plugin Contect&quot; href=&quot;https://github.com/exceptionless/Exceptionless.Net/blob/master/Source/Shared/Plugins/EventPluginContext.cs&quot; target=&quot;_blank&quot;&gt;EventPluginContext&lt;/a&gt;, which contains all the valuable contextual information that your plugin may need via the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**Client&lt;br&gt;
** The ExceptionlessClient that created the event.&lt;/li&gt;
&lt;li&gt;**Event&lt;br&gt;
** The target event.&lt;/li&gt;
&lt;li&gt;**ContextData&lt;br&gt;
** Allows plugins to access additional contextual data to allow them to add additional data to events.&lt;/li&gt;
&lt;li&gt;**Log&lt;br&gt;
** An ExceptionlessLog implementation that lets you write to the internal logger. This internal logger is used only when debugging the client.&lt;/li&gt;
&lt;li&gt;****Resolver&lt;br&gt;
**** The ExceptionlessClient`s dependency resolver. This is useful for resolving other dependencies at runtime that were not requested via constructor injection.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Exceptionless Plugin Example – Add System Uptime to Feature Usages&lt;/h3&gt;
&lt;p&gt;The &lt;a title=&quot;Exceptionless System Uptime Plugin Example&quot; href=&quot;https://github.com/exceptionless/Exceptionless.Net/blob/master/Source/Samples/SampleConsole/Plugins/SystemUptimePlugin.cs&quot; target=&quot;_blank&quot;&gt;following system uptime plugin&lt;/a&gt; derives from IEventPlugin and places the system uptime into every feature usage event as extended data when the plugin’s Run(context) method is called.&lt;/p&gt;
&lt;pre&gt;using System;
using System.Diagnostics;
using Exceptionless.Plugins;
using Exceptionless.Models;

namespace Exceptionless.SampleConsole.Plugins {
    [Priority(100)]
    public class SystemUptimePlugin : IEventPlugin {
        public void Run(EventPluginContext context) {
            // Only update feature usage events.
            if (context.Event.Type != Event.KnownTypes.FeatureUsage)
                return;

            // Get the system uptime
            using (var pc = new PerformanceCounter(&quot;System&quot;, &quot;System Up Time&quot;)) {
                pc.NextValue();

                var uptime = TimeSpan.FromSeconds(pc.NextValue());

                // Store the system uptime as an extended property.
                context.Event.SetProperty(&quot;System Uptime&quot;, String.Format(&quot;{0} Days {1} Hours {2} Minutes {3} Seconds&quot;, uptime.Days, uptime.Hours, uptime.Minutes, uptime.Seconds));
            }
        }
    }
}
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Output in Exceptionless:&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;http://exceptionless.com/assets/exceptionless-plugin-system-uptime.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-12937 size-full&quot; src=&quot;http://exceptionless.com/assets/exceptionless-plugin-system-uptime.png&quot; alt=&quot;Exceptionless Plugin System Uptime&quot; width=&quot;755&quot; height=&quot;350&quot; data-id=&quot;12922&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-plugin-system-uptime.png 755w, https://exceptionless.com/assets/exceptionless-plugin-system-uptime-300x139.png 300w&quot; sizes=&quot;(max-width: 755px) 100vw, 755px&quot;&gt;&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; We kept the formatting of the uptime simple for the sake of this example, but we recommend using our &lt;a title=&quot;Exceptionless Date Time Extensions Library&quot; href=&quot;https://github.com/exceptionless/Exceptionless.DateTimeExtensions&quot; target=&quot;_blank&quot;&gt;open source DateTimeExtensions library&lt;/a&gt; if you wish to format it in a really pretty manner.&lt;/p&gt;
&lt;h4&gt;Plugin Priority&lt;/h4&gt;
&lt;p&gt;You might have noticed that there is a priority attribute with a value of 100. The priority of a plugin determines the order that the plugin will run in (runs in order of lowest to highest, and then by order added). All plugins that ship as part of the client start with a priority of 10 and increment by multiples of 10. If you want your addin to run first, give it a low priority (e.g., 0, 1, 2, 3, 4, 5). If you want it to run last, give it a high priority (&amp;gt;100). By default, if you don’t specify a priority, 0 will be used.&lt;/p&gt;
&lt;p&gt;To make sure your plugin runs first (if required), you can inspect the configuration’s plugin property in Visual Studio while debugging.&lt;/p&gt;
&lt;pre&gt;foreach (var plugin in Exceptionless.ExceptionlessClient.Default.Configuration.Plugins)
    Console.WriteLine(plugin);
&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/exceptionless-plugin-priority.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-12923 size-full&quot; src=&quot;http://exceptionless.com/assets/exceptionless-plugin-priority.png&quot; alt=&quot;Exceptionless Plugin Priority&quot; width=&quot;938&quot; height=&quot;276&quot; data-id=&quot;12923&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-plugin-priority.png 938w, https://exceptionless.com/assets/exceptionless-plugin-priority-300x88.png 300w&quot; sizes=&quot;(max-width: 938px) 100vw, 938px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Adding the Plugin to Your App&lt;/h2&gt;
&lt;p&gt;Now that we’ve created the plugin, we’ll add it when our application starts up by calling one of the Exceptionless.ExceptionlessClient.Default.Configuration.AddPlugin() overloads.&lt;/p&gt;
&lt;p&gt;In most cases, we use the following overload to register plugins:&lt;/p&gt;
&lt;pre&gt;using Exceptionless;            
ExceptionlessClient.Default.Configuration.AddPlugin&amp;lt;SystemUptimePlugin&amp;gt;();
&lt;/pre&gt;
&lt;p&gt;When you add a plugin by specifying the type, we inspect the type and try to find a PriorityAttribute. If we can’t find one, the default value of 0 will be used.&lt;/p&gt;
&lt;p&gt;You can also add a plugin by passing a System.Action&lt;EventPluginContext&gt; to AddPlugin.&lt;br&gt;
&lt;em&gt;Please note that we are specifying a key when adding the action plugin so we can remove it later. If you are not going to be removing your plugin, then you can omit the first argument.&lt;/em&gt;&lt;/EventPluginContext&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We pass AddPlugin three arguments:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A unique plugin key&lt;/strong&gt; (which can be used to remove the plugin later)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Priority&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;An action&lt;/strong&gt; that contains all of our logic to add the system uptime (or whatever your plugin does).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;using Exceptionless;  
ExceptionlessClient.Default.Configuration.AddPlugin(&quot;system-uptime&quot;, 100, context =&amp;gt; {
    // Only update feature usage events.
    if (context.Event.Type != Event.KnownTypes.FeatureUsage)
        return;

    // Get the system uptime
    using (var pc = new PerformanceCounter(&quot;System&quot;, &quot;System Up Time&quot;)) {
         pc.NextValue();
         var uptime = TimeSpan.FromSeconds(pc.NextValue());

         // Store the system uptime as an extended property.
         context.Event.SetProperty(&quot;&amp;lt;wbr /&gt;System Uptime&quot;, String.Format(&quot;{0} Days {1} Hours {2} Minutes {3} Seconds&quot;, uptime.Days, uptime.Hours, uptime.Minutes, uptime.Seconds));

     }
});
&lt;/pre&gt;
&lt;h2&gt;Removing an Existing Plugin&lt;/h2&gt;
&lt;p&gt;To remove a previously added plugin, you need to call one of the Exceptionless.ExceptionlessClient.Default.Configuration.RemovePlugin overloads.&lt;/p&gt;
&lt;pre&gt;using Exceptionless;
ExceptionlessClient.Default.Configuration.RemovePlugin&amp;lt;SystemUptimePlugin&amp;gt;();
&lt;/pre&gt;
&lt;p&gt;If you registered your plugin via an action, you will need to remove the plugin with the key it was added with.&lt;/p&gt;
&lt;pre&gt;using Exceptionless;
ExceptionlessClient.Default.Configuration.RemovePlugin(&quot;system-uptime&quot;);
&lt;/pre&gt;
&lt;h2&gt;How Can You Use Plugins?&lt;/h2&gt;
&lt;p&gt;Can you think of ways that plugins can help your app? Are you already building some? Let us know what they are and how they help! Eventually, we plan on building a library of useful and common plugins that other developers can easily implement. The more help we’ve got, the faster that library will grow!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-04-16-an-exceptionless-nuget-package-tour/"/>
    <updated>2015-04-16T10:21:59-05:00</updated>
    <id>https://exceptionless.com/2015-04-16-an-exceptionless-nuget-package-tour/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-12970&quot; style=&quot;margin-left: 20px;&quot; src=&quot;http://exceptionless.com/assets/nugetlogo.png&quot; alt=&quot;Exceptionless NuGet Packages&quot; width=&quot;228&quot; height=&quot;75&quot; data-id=&quot;12970&quot;&gt;Giving back to the development community is important to us over here at Exceptionless. &lt;a title=&quot;Exceptionless on GitHub&quot; href=&quot;https://github.com/exceptionless&quot; target=&quot;_blank&quot;&gt;We love open source!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As such, the Exceptionless &lt;a title=&quot;Exceptionless NuGet Assembly Library&quot; href=&quot;https://www.nuget.org/profiles/exceptionless?showAllPackages=True&quot; target=&quot;_blank&quot;&gt;NuGet assembly library&lt;/a&gt;, with 31 assemblies and over 176,000 package downloads, is ever growing and expanding right along with our &lt;a title=&quot;Exceptionless GitHub Repos&quot; href=&quot;https://github.com/exceptionless&quot; target=&quot;_blank&quot;&gt;GitHub repos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We thought we would give everyone a quick tour, and at the same time perhaps provide a good resource and reference page.&lt;/p&gt;
&lt;p&gt;Don’t forget, though – this page may be out-dated by the time you view it, so please &lt;a title=&quot;Exceptionless NuGet Packages&quot; href=&quot;https://www.nuget.org/profiles/exceptionless?showAllPackages=True&quot; target=&quot;_blank&quot;&gt;view our full library on NuGet&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless NuGet Clients&lt;/h2&gt;
&lt;p&gt;Exceptionless, our primary &lt;a title=&quot;Exceptionless GitHub Repo&quot; href=&quot;https://github.com/exceptionless/Exceptionless.net&quot; target=&quot;_blank&quot;&gt;open source&lt;/a&gt; application, provides real-time error, feature, and log reporting for ASP.NET, Web API, WebForms, WPF, Console, and MVC apps (and more, soon!).&lt;/p&gt;
&lt;p&gt;Below you will find the NuGet assemblies for all the platforms we currently support.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless.Portable NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.Portable/&quot; target=&quot;_blank&quot;&gt;Exceptionless.Portable&lt;/a&gt;&lt;br&gt;
Exceptionless client for portable (PCL) applications. This is the base library all the other implementations build on top of. It contains all the basic functionality that powers the Exceptionless clients! This library can be used on many different platforms. It’s worth noting that this is a very basic client and as such you won’t get all the bells and whistles as described &lt;a title=&quot;Exeptionless Configuration Documentation&quot; href=&quot;http://docs.exceptionless.com/contents/configuration/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; in the PCL configuration section. For those bells and whistles, see the Exceptionless package, below.&lt;br&gt;
Frameworks: .NET 4, .NET 4.5, SIlverlight 5, Windows 8, Windows Phone 8.1, Windows Phone Silverlight 8&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless/&quot; target=&quot;_blank&quot;&gt;Exceptionless&lt;br&gt; &lt;/a&gt;Exceptionless client for non visual (ie. Console and Services) applications.** **We recommend using this package if you are not using any other platform specific packages (E.G., Exceptionless.Mvc), as it provides all the bells and whistles that are missing in the portable package.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless.Mvc NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.Mvc/&quot; target=&quot;_blank&quot;&gt;Exceptionless.Mvc&lt;br&gt; &lt;/a&gt;Exceptionless client for ASP.NET MVC 3+ applications.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless.WebApi NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.WebApi/&quot; target=&quot;_blank&quot;&gt;Exceptionless.WebApi&lt;br&gt; &lt;/a&gt;Exceptionless client for ASP.NET Web API applications.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless.Web NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.Web/&quot; target=&quot;_blank&quot;&gt;Exceptionless.Web&lt;br&gt; &lt;/a&gt;Exceptionless client for ASP.NET WebForms applications.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless.Nancy NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.Nancy/&quot; target=&quot;_blank&quot;&gt;Exceptionless.Nancy&lt;br&gt; &lt;/a&gt;Exceptionless client for &lt;a title=&quot;NancyFX&quot; href=&quot;http://nancyfx.org/&quot; target=&quot;_blank&quot;&gt;Nancy&lt;/a&gt; applications.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless.Wpf NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.Wpf/&quot; target=&quot;_blank&quot;&gt;Exceptionless.Wpf&lt;/a&gt;&lt;br&gt;
Exceptionless client for WPF applications.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless.Windows NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.Windows/&quot; target=&quot;_blank&quot;&gt;Exceptionless.Windows&lt;br&gt; &lt;/a&gt;Exceptionless client for Windows Forms applications.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless.NLog NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.NLog/&quot; target=&quot;_blank&quot;&gt;Exceptionless.NLog&lt;br&gt; &lt;/a&gt;NLog target that sends log entries to Exceptionless.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless.Log4net NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.Log4net/&quot; target=&quot;_blank&quot;&gt;Exceptionless.Log4net&lt;br&gt; &lt;/a&gt;Log4net appender that sends log entries to Exceptionless.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Serilog.Sinks.Exceptionless NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Serilog.Sinks.ExceptionLess/&quot; target=&quot;_blank&quot;&gt;Serilog.Sinks.ExceptionLess&lt;br&gt; &lt;/a&gt;Serilog sink that sends log entries to Exceptionless.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;br&gt;
&lt;a title=&quot;Exceptionless sink for Serilog Source Code&quot; href=&quot;https://github.com/serilog/serilog-sinks-exceptionless&quot; target=&quot;_blank&quot;&gt;View Source&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Signed Assemblies&lt;/h3&gt;
&lt;p&gt;We also have signed versions of most assemblies on our &lt;a title=&quot;Exceptionless NuGet Profile&quot; href=&quot;https://www.nuget.org/profiles/exceptionless?showAllPackages=True&quot; target=&quot;_blank&quot;&gt;NuGet Profile&lt;/a&gt;. See MSDN for additional info on signing assemblies (&lt;a title=&quot;Strong-Named Signed Assemblies&quot; href=&quot;https://msdn.microsoft.com/en-us/library/wd40t7ad%28v=vs.110%29.aspx&quot; target=&quot;_blank&quot;&gt;Strong-Named Assemblies&lt;/a&gt;).&lt;/p&gt;
&lt;h2&gt;Foundatio by Exceptionless&lt;/h2&gt;
&lt;p&gt;Foundatio (Requires .NET 4.5) is an open source library for building distributed applications that we built, use, and think you will find helpful. Foundatio provides in memory, redis, and azure implementations. This allows you to do development or testing using in-memory versions and switch them out for redis or azure implementations in production. This saves you time (setup and maintaining) and money (not paying for cloud resources) during development and testing! Foundatio source code can be found at &lt;a title=&quot;Foiundatio Source Code on GitHub&quot; href=&quot;https://github.com/exceptionless/Foundatio&quot; target=&quot;_blank&quot;&gt;https://github.com/exceptionless/Foundatio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Exceptionless was built using Foundatio and utilizes implementations for caching, queues, locks, messaging, jobs, file storage, and metrics.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Foundatio Exceptionless NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Foundatio/&quot; target=&quot;_blank&quot;&gt;Foundatio&lt;/a&gt;&lt;br&gt;
Foundatio consists of pluggable foundation blocks for building distributed apps, including caching, queues, locks, messaging, jobs, file storage, and metrics.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Foundatio Redis Implementations NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Foundatio.Redis/&quot; target=&quot;_blank&quot;&gt;Foundatio Redis Implementations&lt;/a&gt;&lt;br&gt;
Contains the redis implementations of caching, queues, locks, messaging, jobs, file storage.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Foundatio Azure ServiceBus Implementations NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Foundatio.AzureServiceBus/&quot; target=&quot;_blank&quot;&gt;Foundatio Azure ServiceBus Implementations&lt;/a&gt;&lt;br&gt;
Contains the redis implementations of queues and messaging. The azure packages are split into different packages so you don’t have to take extra azure dependencies on things you don’t need.&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Foundatio Azure Storage Implementations NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Foundatio.AzureStorage/&quot; target=&quot;_blank&quot;&gt;Foundatio Azure Storage Implementations&lt;/a&gt;&lt;br&gt;
Contains the redis implementations of file storage. The azure packages are split into different packages so you don’t have to take extra azure dependencies on things you don’t need.&lt;/p&gt;
&lt;h2&gt;Other&lt;/h2&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless Lucene Query Parser NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.LuceneQueryParser/&quot; target=&quot;_blank&quot;&gt;Exceptionless LuceneQueryParser&lt;/a&gt;&lt;br&gt;
Lucene Query Parser is a lucene style query parser that is extensible and allows additional syntax features. We use this in &lt;a title=&quot;Exceptionless Source Code&quot; href=&quot;https://github.com/exceptionless/Exceptionless&quot; target=&quot;_blank&quot;&gt;Exceptionless&lt;/a&gt; to &lt;a title=&quot;Exceptionless Query Source Code&quot; href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Filter/QueryProcessorVisitor.cs&quot; target=&quot;_blank&quot;&gt;ensure the query is valid before executing it, check to see if you are trying to a basic or premium search query and much more&lt;/a&gt;!&lt;br&gt;
Frameworks: .NET 4.5&lt;br&gt;
&lt;a title=&quot;Exceptionless LuceneQueryParser Source on GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless.LuceneQueryParser&quot; target=&quot;_blank&quot;&gt;View Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless Random Data NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.RandomData/&quot; target=&quot;_blank&quot;&gt;Exceptionless RandomData&lt;/a&gt;&lt;br&gt;
RandomData is a utility class for easily generating random data, making the creation of good unit test data a breeze.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5&lt;br&gt;
&lt;a title=&quot;Exceptionless Random Data Source Code&quot; href=&quot;https://github.com/exceptionless/Exceptionless.RandomData&quot; target=&quot;_blank&quot;&gt;View Source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a title=&quot;Exceptionless Date Time Extensions NuGet Package&quot; href=&quot;https://www.nuget.org/packages/Exceptionless.DateTimeExtensions/&quot; target=&quot;_blank&quot;&gt;Exceptionless DateTimeExtensions&lt;/a&gt;&lt;br&gt;
This package includes DateTimeRange, Business Day, and various DateTime, DateTimeOffset, and TimeSpan extension methods.&lt;br&gt;
Frameworks: .NET 4.0, .NET 4.5, Windows 8, Windows Phone 8.1&lt;br&gt;
&lt;a title=&quot;Exceptionless DateTimeExtensions Source Code on GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless.DateTimeExtensions&quot; target=&quot;_blank&quot;&gt;View Source&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;We’ll Keep Building!&lt;/h2&gt;
&lt;p&gt;We don’t plan on stopping anytime soon, and will continue writing assemblies to make life easier for developers everywhere. Naturally, we could always use your help, so &lt;a title=&quot;Exceptionless GitHub&quot; href=&quot;https://github.com/exceptionless&quot; target=&quot;_blank&quot;&gt;fork us on GitHub&lt;/a&gt; if you feel like chipping in. We always appreciate our contributors!&lt;/p&gt;
&lt;p&gt;Otherwise, let us know what you think of Exceptionless, Foundatio, and all our other projects. Feedback is always welcomed and appreciated.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-04-30-filter-and-searching-tutorial-video-exceptionless/"/>
    <updated>2015-04-30T16:00:20-05:00</updated>
    <id>https://exceptionless.com/2015-04-30-filter-and-searching-tutorial-video-exceptionless/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-13067 size-full&quot; style=&quot;margin-left: 20px;&quot; src=&quot;https://exceptionless.com/assets/filter-search.png&quot; alt=&quot;Exceptionless Search Filtering&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;13054&quot; srcset=&quot;https://exceptionless.com/assets/filter-search.png 260w, https://exceptionless.com/assets/filter-search-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;One of the most requested features from the beginning of Exceptionless 1.0 was a filtering and searching system. When we started developing Exceptionless 2.0, we knew it was one of the major features we wanted to include.&lt;/p&gt;
&lt;p&gt;We couldn’t just throw in a string search and hope for the best. We had to build it in a way that let users perform basic and advanced filtering, easily, with fast and streamlined results.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter Exceptionless filtering and searching.&lt;/strong&gt; You can filter by organization, project, multiple time frame selectors, and specific event variables (with modifiers).&lt;/p&gt;
&lt;p&gt;Watch the video below for a quick test drive, and read further down the page for more details and links!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Filtering and Search Demo Video&lt;/h2&gt;
&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;Filter by Organization &amp;amp; Project&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/filter-by-project-organization.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-13047&quot; style=&quot;margin-left: 20px;&quot; src=&quot;https://exceptionless.com/assets/filter-by-project-organization-300x208.png&quot; alt=&quot;Exceptionless Organizations and Projects&quot; width=&quot;300&quot; height=&quot;208&quot; data-id=&quot;13047&quot; srcset=&quot;https://exceptionless.com/assets/filter-by-project-organization-300x208.png 300w, https://exceptionless.com/assets/filter-by-project-organization.png 593w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;By default, the dashboard loads up with all projects selected.&lt;/p&gt;
&lt;p&gt;To show only data from a specific organization or project within an organization, simply click on the “All Projects” drop down in the top left of the dashboard and select your organization or project.&lt;/p&gt;
&lt;p&gt;Whatever view you are in will then be transformed to display only data from that organization/project.&lt;/p&gt;
&lt;p&gt;To change it back to all projects, simply select the drop down again and click on “All Projects.”&lt;/p&gt;
&lt;h2&gt;Filter by Time Frame&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/filter-by-timeframe.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-13048&quot; style=&quot;margin-left: 20px;&quot; src=&quot;https://exceptionless.com/assets/filter-by-timeframe-300x205.png&quot; alt=&quot;Exceptionles Time Frame Filters&quot; width=&quot;300&quot; height=&quot;205&quot; data-id=&quot;13048&quot; srcset=&quot;https://exceptionless.com/assets/filter-by-timeframe-300x205.png 300w, https://exceptionless.com/assets/filter-by-timeframe.png 675w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;Exceptionless offers multiple preset time frame options, as well as the ability to customize the time frame down to the second.&lt;/p&gt;
&lt;p&gt;To select your time frame of choice, click on the calendar icon next to the project drop down on the top navigation bar of your dashboard.&lt;/p&gt;
&lt;p&gt;Once there, you can select “Last Hour,” “Last 24 Hours,” “Last Week,” “Last 30 Days,” “All Time,” or “Custom.”&lt;/p&gt;
&lt;p&gt;Most of these options are pretty self explanatory, but if you click on “Custom,” a popup will appear that lets you select the start and end date, as well as start and end hours, minutes, and seconds of those dates.&lt;/p&gt;
&lt;p&gt;Another way to control the data time frame is to simply select a period of time on the history graph itself by clicking, dragging, and releasing. This will automatically update the custom time frame points and refresh the data to match that period.&lt;/p&gt;
&lt;h2&gt;Filter and Search by Specific Criteria&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/filter-by-search-filter-criteria.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-13063 size-medium&quot; style=&quot;margin-left: 20px;&quot; src=&quot;https://exceptionless.com/assets/filter-by-search-filter-criteria-300x203.png&quot; alt=&quot;Exceptionless Search Filter Feature&quot; width=&quot;300&quot; height=&quot;203&quot; data-id=&quot;13049&quot; srcset=&quot;https://exceptionless.com/assets/filter-by-search-filter-criteria-300x203.png 300w, https://exceptionless.com/assets/filter-by-search-filter-criteria.png 774w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;Being able to search your errors and events by specific criteria is, perhaps, the largest improvement for version 2.0.&lt;/p&gt;
&lt;p&gt;By selecting the magnifying glass icon next to the calendar icon in the top navigation, you can enter &lt;a title=&quot;Exceptionless Search Filter Documentation&quot; href=&quot;http://docs.exceptionless.com/contents/search/&quot; target=&quot;_blank&quot;&gt;search criteria&lt;/a&gt; and select whether you want the results to include fixed and/or hidden events/errors.&lt;/p&gt;
&lt;p&gt;You can filter by tag, ID, organization, project, stack, type, value, IP, architecture, user, and much much more. Some searches, such as ID, require a prefix (“id:”) on the search, but others, such as error.message, can be entered as strings (“A NullReferenceException occurred”). View a complete list of searchable terms, examples, and FAQs on our &lt;a title=&quot;Exceptionless Search Documentation&quot; href=&quot;http://docs.exceptionless.com/contents/search/&quot; target=&quot;_blank&quot;&gt;Searching Documentation Page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;We’re Always Improving – What Could be Better?&lt;/h2&gt;
&lt;p&gt;Please let us know what you think of the filtering and searching abilities by commenting here on the blog, sending us an in-app support message, or filling out our &lt;a href=&quot;https://exceptionless.com/contact/&quot; title=&quot;Exceptionless Contact Form&quot;&gt;contact form&lt;/a&gt;. We’re always looking for feedback, and genuinely want to know what you think!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-05-06-exceptionless-api-usage-and-overview/"/>
    <updated>2015-05-06T18:04:14-05:00</updated>
    <id>https://exceptionless.com/2015-05-06-exceptionless-api-usage-and-overview/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/Screenshot-2015-05-06-16.26.42.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-13131&quot; style=&quot;margin-left: 15px; margin-top: 8px;&quot; src=&quot;https://exceptionless.com/assets/Screenshot-2015-05-06-16.26.42-300x220.png&quot; alt=&quot;Exceptionless API&quot; width=&quot;300&quot; height=&quot;220&quot; data-id=&quot;13131&quot; srcset=&quot;https://exceptionless.com/assets/Screenshot-2015-05-06-16.26.42-300x220.png 300w, https://exceptionless.com/assets/Screenshot-2015-05-06-16.26.42.png 996w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;So you’ve been using Exceptionless for a while, but you wish you had a different dashboard, or maybe you’d like to integrate event data into one of your apps. No problem, &lt;strong&gt;just use the API!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Through our adventures while building Exceptionless, we’ve kept open source, automation, and ease of use in mind. With that, we think our API, which utilizes &lt;a title=&quot;Swagger API Framework&quot; href=&quot;http://swagger.io/&quot; target=&quot;_blank&quot;&gt;Swagger&lt;/a&gt; and &lt;a title=&quot;Swashbuckle&quot; href=&quot;https://github.com/domaindrivendev/Swashbuckle&quot; target=&quot;_blank&quot;&gt;Swashbuckle&lt;/a&gt; to automatically generate, update, and display documentation (which means it works automatically on self-hosted environments), is a great resource for our users that want to get their hands dirty and use Exceptionless data to roll their own tools, dashboards, etc.&lt;/p&gt;
&lt;p&gt;Lets take a closer look at the API, how to use it, and some quick examples of what can be done.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Start Using the Exceptionless API&lt;/h2&gt;
&lt;h3&gt;Accessing the API&lt;/h3&gt;
&lt;p&gt;To access the Exceptionless API, visit &lt;a title=&quot;Exceptionless API&quot; href=&quot;https://api.exceptionless.io/&quot; target=&quot;_blank&quot;&gt;https://api.exceptionless.io&lt;/a&gt; and click on the “API Documentation” link to be taken to the API documentation.&lt;/p&gt;
&lt;h3&gt;Get Your User Scoped Token&lt;/h3&gt;
&lt;p&gt;Tokens are used to access the api and have roles (scopes). When you authenticate via the login controller action, you are getting a token that impersonates your user so it has the same roles as your user account (e.g., client and user).&lt;/p&gt;
&lt;h4&gt;&lt;span style=&quot;text-decoration: underline;&quot;&gt;&lt;a title=&quot;Exceptionless API Auth&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Auth/Auth_Login&quot; target=&quot;_blank&quot;&gt;Go to Auth controller action&lt;/a&gt;&lt;/span&gt; and enter your login credentials.&lt;/h4&gt;
&lt;p&gt;You can enter JSON into the model field, or you an click the yellow box on the right to pre-populate the field with acceptable JSON fields. Just replace the values that you want to specify and remove the fields you don’t need, like invite token.&lt;figure id=&quot;attachment_13097&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/01get-user-scope-token1.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-13097 size-medium&quot; src=&quot;https://exceptionless.com/assets/01get-user-scope-token1-300x218.png&quot; alt=&quot;Exceptionless API Get User Scoped Token&quot; width=&quot;300&quot; height=&quot;218&quot; data-id=&quot;13097&quot; srcset=&quot;https://exceptionless.com/assets/01get-user-scope-token1-300x218.png 300w, https://exceptionless.com/assets/01get-user-scope-token1.png 984w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Enter account credentials to get user scoped token.&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;Click “Try it out!” and generate your token. Take note of the response messages section above the button, as it details the possible codes that would be returned in the event of an error (e.g. 401 if the user name or email address was incorrect).&lt;figure id=&quot;attachment_13101&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/01get-user-scope-token2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13101&quot; src=&quot;https://exceptionless.com/assets/01get-user-scope-token2-300x105.png&quot; alt=&quot;Retrieve Exceptionless User Scoped Token&quot; width=&quot;300&quot; height=&quot;105&quot; data-id=&quot;13101&quot; srcset=&quot;https://exceptionless.com/assets/01get-user-scope-token2-300x105.png 300w, https://exceptionless.com/assets/01get-user-scope-token2.png 984w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Copy your user scoped token that you just generated.&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;You can see from the response that it returned our token from the request url above. Take your generated token and put it in the “api_key” field at the top of the page and click “Explore.” This authorizes you via bearer authentication, authenticates you to the rest api, and allows you to call controller actions.&lt;figure id=&quot;attachment_13102&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/02add-token-refresh-page.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13102&quot; src=&quot;https://exceptionless.com/assets/02add-token-refresh-page-300x50.png&quot; alt=&quot;Add Exceptionless User Scoped Token &quot; width=&quot;300&quot; height=&quot;50&quot; data-id=&quot;13102&quot; srcset=&quot;https://exceptionless.com/assets/02add-token-refresh-page-300x50.png 300w, https://exceptionless.com/assets/02add-token-refresh-page.png 307w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Add your token in the api_key field at top of page and click “Explore”&lt;/figcaption&gt;&lt;/p&gt;
&lt;h3&gt;Get a New Token&lt;/h3&gt;
&lt;p&gt;Now, we’ll get a new token for the project we want to work on and assign it a user role (scope) of “user.” We want to get a new user scoped token because we want to do more than just post events (client scoped tokens only allow you to post events), we want to retrieve them. Creating a new token also allows us to revoke the token later.&lt;/p&gt;
&lt;p&gt;First, get your project ID from the Exceptionless Dashboard. It can be found in the URL of that project’s dashboard.&lt;figure id=&quot;attachment_13104&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/03get-project-ID.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-13104 size-medium&quot; src=&quot;https://exceptionless.com/assets/03get-project-ID-300x141.png&quot; alt=&quot;Get Exceptionless Project ID&quot; width=&quot;300&quot; height=&quot;141&quot; data-id=&quot;13104&quot; srcset=&quot;https://exceptionless.com/assets/03get-project-ID-300x141.png 300w, https://exceptionless.com/assets/03get-project-ID.png 578w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Get Project ID&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;Now, we’ll navigate to &lt;a title=&quot;Exceptionless Create Token&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Token/Token_PostByProject&quot; target=&quot;_blank&quot;&gt;Tokens &amp;gt; POST /api/v2/projects/{projectId}/tokens&lt;/a&gt;, enter our Project ID, and set up our token to include the user scope and a quick note.&lt;figure id=&quot;attachment_13105&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/04get-new-token1.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13105&quot; src=&quot;https://exceptionless.com/assets/04get-new-token1-300x220.png&quot; alt=&quot;Create Exceptionless Token&quot; width=&quot;300&quot; height=&quot;220&quot; data-id=&quot;13105&quot; srcset=&quot;https://exceptionless.com/assets/04get-new-token1-300x220.png 300w, https://exceptionless.com/assets/04get-new-token1.png 979w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Enter project ID and create a new token with scope “user.”&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;Next, we’ll click “Try it out!” and generate our new token id.&lt;figure id=&quot;attachment_13106&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/04get-new-token2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13106&quot; src=&quot;https://exceptionless.com/assets/04get-new-token2-300x146.png&quot; alt=&quot;Get new Exceptionless Token ID&quot; width=&quot;300&quot; height=&quot;146&quot; data-id=&quot;13106&quot; srcset=&quot;https://exceptionless.com/assets/04get-new-token2-300x146.png 300w, https://exceptionless.com/assets/04get-new-token2.png 982w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Copy your new token id and paste it into the api_key field at the top of the page and click “Explore” again.&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;Now, once again, copy this new token and place it in the “api_key” field at the top of the page and click “Explore.” Now everything we do will be authenticated to this new user token you’ve just created.&lt;/p&gt;
&lt;h3&gt;Posting an Event&lt;/h3&gt;
&lt;p&gt;Now, lets post an event with a reference ID that we’ll use for a few other examples.&lt;/p&gt;
&lt;p&gt;First, navigate to &lt;a title=&quot;Exceptionless API Post Event&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Event/Event_PostAsync&quot; target=&quot;_blank&quot;&gt;Event &amp;gt; POST /api/v{version}/events&lt;/a&gt;&lt;figure id=&quot;attachment_13108&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/05post-event1.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13108&quot; src=&quot;https://exceptionless.com/assets/05post-event1-300x204.png&quot; alt=&quot;Exceptionless API Post Event&quot; width=&quot;300&quot; height=&quot;204&quot; data-id=&quot;13108&quot; srcset=&quot;https://exceptionless.com/assets/05post-event1-300x204.png 300w, https://exceptionless.com/assets/05post-event1.png 980w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Navigate to Event &amp;gt; POST /api/v{version}/events&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;You’ll see a few basic examples of events and some explanation of the resource in this panel. Make sure to give it a read. For this example, we’ll use a simple log event, with a brief message, and add a reference ID to it. &lt;em&gt;Note that you must also enter the current API version in the “version” field.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When we click “Try it out!” and get a 202 response code, we know we’ve created an event.&lt;figure id=&quot;attachment_13110&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/06-post-event1half.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13110&quot; src=&quot;https://exceptionless.com/assets/06-post-event1half-300x200.png&quot; alt=&quot;Exceptionless API Create Event Example&quot; width=&quot;300&quot; height=&quot;200&quot; data-id=&quot;13110&quot; srcset=&quot;https://exceptionless.com/assets/06-post-event1half-300x200.png 300w, https://exceptionless.com/assets/06-post-event1half.png 981w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Create your event and enter API version&lt;/figcaption&gt; &lt;figure id=&quot;attachment_13109&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/05post-event2-e1430946143322.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-13109 size-medium&quot; src=&quot;https://exceptionless.com/assets/05post-event2-e1430946143322-300x92.png&quot; alt=&quot;Exceptionless API Created Event&quot; width=&quot;300&quot; height=&quot;92&quot; data-id=&quot;13109&quot; srcset=&quot;https://exceptionless.com/assets/05post-event2-e1430946143322-300x92.png 300w, https://exceptionless.com/assets/05post-event2-e1430946143322.png 981w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Successful Event Creation&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;Get Event by Reference ID&lt;/h3&gt;
&lt;p&gt;If we want to get the event we just created by it’s reference_id, we can navigate to &lt;a title=&quot;Get Exceptionless Event by ID&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Event/Event_GetByReferenceId&quot; target=&quot;_blank&quot;&gt;Event &amp;gt; GET /api/v2/events/by-ref/{referenceId}&lt;/a&gt;, enter that reference ID, and get back the details of the event.&lt;figure id=&quot;attachment_13115&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/06-get-by-reference-ID2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-13115 size-medium&quot; src=&quot;https://exceptionless.com/assets/06-get-by-reference-ID2-300x271.png&quot; alt=&quot;Get Exceptionless Event by ReferenceID&quot; width=&quot;300&quot; height=&quot;271&quot; data-id=&quot;13113&quot; srcset=&quot;https://exceptionless.com/assets/06-get-by-reference-ID2-300x271.png 300w, https://exceptionless.com/assets/06-get-by-reference-ID2.png 977w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Navigate to Event &amp;gt; GET /api/v2/events/by-ref/{referenceId} and enter reference ID&lt;/figcaption&gt;&lt;/p&gt;
&lt;h3&gt;Getting the Event via a Search Filter&lt;/h3&gt;
&lt;p&gt;Another example of getting an event may include using the reference ID or another search filter we just created and getting all by a reference filter. You can use any &lt;a title=&quot;Exceptionless Search Filter Documentation&quot; href=&quot;http://docs.exceptionless.com/contents/search/&quot; target=&quot;_blank&quot;&gt;search filter&lt;/a&gt; in the filter parameter.&lt;/p&gt;
&lt;p&gt;To do so, navigate to &lt;a title=&quot;Exceptionless API Get All&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Event/Event_Get&quot; target=&quot;_blank&quot;&gt;Event &amp;gt; GET /api/v2/events&lt;/a&gt; and use the reference term to filter events by the reference ID.&lt;figure id=&quot;attachment_13116&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/07-get-all-filter-reference.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13116&quot; src=&quot;https://exceptionless.com/assets/07-get-all-filter-reference-300x168.png&quot; alt=&quot;Exceptionless API Get All Filter Search&quot; width=&quot;300&quot; height=&quot;168&quot; data-id=&quot;13116&quot; srcset=&quot;https://exceptionless.com/assets/07-get-all-filter-reference-300x168.png 300w, https://exceptionless.com/assets/07-get-all-filter-reference.png 978w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Navigate to Event &amp;gt; GET /api/v2/events and user the filter field to search for the reference ID&lt;/figcaption&gt;&lt;/p&gt;
&lt;p&gt;Results&lt;figure id=&quot;attachment_13117&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/07-get-all-filter-reference2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13117&quot; src=&quot;https://exceptionless.com/assets/07-get-all-filter-reference2-300x183.png&quot; alt=&quot;Exceptionless API Get Al Filter Search Results&quot; width=&quot;300&quot; height=&quot;183&quot; data-id=&quot;13117&quot; srcset=&quot;https://exceptionless.com/assets/07-get-all-filter-reference2-300x183.png 300w, https://exceptionless.com/assets/07-get-all-filter-reference2.png 983w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Get All results&lt;/figcaption&gt;&lt;/p&gt;
&lt;h3&gt;Get Organizations and Projects&lt;/h3&gt;
&lt;p&gt;Naturally, we can get all the organizations or projects associated with the current authorized token, as well.&lt;/p&gt;
&lt;h4&gt;Organizations&lt;/h4&gt;
&lt;p&gt;Navigate to &lt;a title=&quot;Exceptionless API Get Organizations&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Organization/Organization_Get&quot; target=&quot;_blank&quot;&gt;Organization &amp;gt; GET /api/v2/organizations&lt;/a&gt; and click “Try it out!”&lt;figure id=&quot;attachment_13118&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/08get-organizations1.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13118&quot; src=&quot;https://exceptionless.com/assets/08get-organizations1-300x210.png&quot; alt=&quot;Exceptionless API Get Organizations&quot; width=&quot;300&quot; height=&quot;210&quot; data-id=&quot;13118&quot; srcset=&quot;https://exceptionless.com/assets/08get-organizations1-300x210.png 300w, https://exceptionless.com/assets/08get-organizations1.png 979w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Navigate to Organization &amp;gt; GET /api/v2/organizations and click “Try it out!”&lt;/figcaption&gt; &lt;figure id=&quot;attachment_13119&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 300px&quot;&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/08get-organizations2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13119&quot; src=&quot;https://exceptionless.com/assets/08get-organizations2-300x202.png&quot; alt=&quot;Exceptionless API Get Organization Results&quot; width=&quot;300&quot; height=&quot;202&quot; data-id=&quot;13119&quot; srcset=&quot;https://exceptionless.com/assets/08get-organizations2-300x202.png 300w, https://exceptionless.com/assets/08get-organizations2.png 990w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Get Organizations Results&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 style=&quot;clear: both;&quot;&gt;
  Projects
&lt;/h4&gt;
&lt;p&gt;Navigate to &lt;a title=&quot;Exceptionless API Get Projects&quot; href=&quot;https://api.exceptionless.io/docs/index#!/Project/Project_Get&quot; target=&quot;_blank&quot;&gt;Project &amp;gt; GET /api/v2/projects&lt;/a&gt; and click “Try it out!”&lt;figure id=&quot;attachment_13121&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/09get-projects1.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13121&quot; src=&quot;https://exceptionless.com/assets/09get-projects1-300x208.png&quot; alt=&quot;Exceptionless API Get Projects&quot; width=&quot;300&quot; height=&quot;208&quot; data-id=&quot;13121&quot; srcset=&quot;https://exceptionless.com/assets/09get-projects1-300x208.png 300w, https://exceptionless.com/assets/09get-projects1.png 982w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Navigate to Project&amp;gt; GET /api/v2/projects and click “Try it out!”&lt;/figcaption&gt; &lt;figure id=&quot;attachment_13122&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 300px&quot;&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/09get-projects2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13122&quot; src=&quot;https://exceptionless.com/assets/09get-projects2-300x204.png&quot; alt=&quot;Exceptionless API Get Projects Results&quot; width=&quot;300&quot; height=&quot;204&quot; data-id=&quot;13122&quot; srcset=&quot;https://exceptionless.com/assets/09get-projects2-300x204.png 300w, https://exceptionless.com/assets/09get-projects2.png 984w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Get Projects Results&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 style=&quot;clear: both;&quot;&gt;
  How to Authenticate to the API
&lt;/h2&gt;
&lt;h3&gt;1. Bearer Authentication&lt;/h3&gt;
&lt;p&gt;The api documentation uses bearer authentication to authenticate to the API. You can do this in your apps too by specifying a bearer authorization header with your token as shown below.&lt;figure id=&quot;attachment_13125&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/10-bearer-auth-key.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13125&quot; src=&quot;https://exceptionless.com/assets/10-bearer-auth-key-300x164.png&quot; alt=&quot;Exceptionless Bearer Authentication&quot; width=&quot;300&quot; height=&quot;164&quot; data-id=&quot;13125&quot; srcset=&quot;https://exceptionless.com/assets/10-bearer-auth-key-300x164.png 300w, https://exceptionless.com/assets/10-bearer-auth-key-1024x559.png 1024w, https://exceptionless.com/assets/10-bearer-auth-key.png 1861w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Bearer Authentication Example&lt;/figcaption&gt;&lt;/p&gt;
&lt;h3&gt;2. Authenticate via the Query String&lt;/h3&gt;
&lt;p&gt;Everything we’ve shown you today can be easily and cleanly accessed via a URL query string and your access token.&lt;/p&gt;
&lt;p&gt;For example, if we want to view our organizations, we simply navigate to https://api.exceptionless.io/api/v2/organizations, add the query string “?access_token={token}” and press enter to get the data.&lt;figure id=&quot;attachment_13126&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/11-url-query-string-version.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-13126&quot; src=&quot;https://exceptionless.com/assets/11-url-query-string-version-300x145.png&quot; alt=&quot;Exceptionless Query String API Authentication&quot; width=&quot;300&quot; height=&quot;145&quot; data-id=&quot;13126&quot; srcset=&quot;https://exceptionless.com/assets/11-url-query-string-version-300x145.png 300w, https://exceptionless.com/assets/11-url-query-string-version.png 934w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Query String API Authentication&lt;/figcaption&gt;&lt;/p&gt;
&lt;h2&gt;Let Us Know What You Think!&lt;/h2&gt;
&lt;p&gt;We’ve tried to make the API as easy and intuitive to use as possible, but we’re always open to feedback and comments, so please let us know what could be better, easier, faster, etc.&lt;/p&gt;
&lt;p&gt;And, of course, if you have any questions about the API, please leave a comment here, send us an in-app support message, or simply submit the website &lt;a href=&quot;https://exceptionless.com/contact/&quot; title=&quot;Contact Exceptionless&quot;&gt;contact form&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-05-07-exceptionless-v2-0-1-shipped/"/>
    <updated>2015-05-07T18:16:42-05:00</updated>
    <id>https://exceptionless.com/2015-05-07-exceptionless-v2-0-1-shipped/</id>
    <content type="html">&lt;p&gt;This release focused on bug fixes since the 2.0 release and include the below notable changes.&lt;/p&gt;
&lt;h2&gt;Exceptionless Server&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;API Status page now also checks the status of Storage, Queues and Message Bus.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Added&lt;/strong&gt; the ability to requeue events (E.X., archived or events that failed to process).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Added&lt;/strong&gt; the ability to send out system and release notifications.&lt;/li&gt;
&lt;li&gt;Made the event posting and processing async. This has huge performance gains under load.&lt;/li&gt;
&lt;li&gt;The GeoIP Database is now stored in the storage folder. This made it easier to update it via a job as well as removed some extra configuration settings.&lt;/li&gt;
&lt;li&gt;Made some minor changes that make it a bit easier to self host (more to come 2.1).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please take a look at the Exceptionless &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/compare/v2.0.0...v2.0.1&quot;&gt;changelog&lt;/a&gt; for a full list of the changes.&lt;/p&gt;
&lt;h2&gt;Exceptionless.UI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Added&lt;/strong&gt; a busy indicators to some buttons allowing you to see the state of an action (E.G., Marking a stack as fixed).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Added&lt;/strong&gt; the ability to refresh the app if there is a critical website bug.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Fixed&lt;/strong&gt; a bug where some stack traces couldn’t be displayed.&lt;/li&gt;
&lt;li&gt;Made some minor changes that make it a bit easier to self host (more to come 2.1).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please take a look at the Exceptionless.UI &lt;a title=&quot;Exceptionless v2.0.1 Changelog&quot; href=&quot;https://github.com/exceptionless/Exceptionless.UI/compare/v2.0.0...v2.0.1&quot; target=&quot;_blank&quot;&gt;changelog&lt;/a&gt; for a full list of the changes.&lt;/p&gt;
&lt;h2&gt;Let us know if you have any questions!&lt;/h2&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-05-13-javascript-client-available-for-preview-testing/"/>
    <updated>2015-05-13T09:41:51-05:00</updated>
    <id>https://exceptionless.com/2015-05-13-javascript-client-available-for-preview-testing/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13180 size-full&quot; src=&quot;https://exceptionless.com/_site/assets/javascript-client-header.jpg&quot; alt=&quot;Exceptionless JavaScript Client&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;13180&quot; srcset=&quot;https://exceptionless.com/assets/javascript-client-header.jpg 708w, https://exceptionless.com/assets/javascript-client-header-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;That’s right ladies and gentlemen, we’ve been working on a &lt;a title=&quot;Exceptionless Javascript Client GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript&quot; target=&quot;_blank&quot;&gt;JavaScript client&lt;/a&gt;, and it’s ready to peak it’s head out into the wild.&lt;/p&gt;
&lt;p&gt;We’re talking beta status here, but version 1.0 is on its way and we wanted to let you guys play with it as soon as possible to &lt;a title=&quot;Exceptionless JavaScript Client GitHub Issues&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript/issues&quot; target=&quot;_blank&quot;&gt;provide feedback&lt;/a&gt; and help us work out the bugs, etc, quicker.&lt;/p&gt;
&lt;p&gt;It’s tough to contain our excitement about getting this out there, and we hope you’ll check it out!&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript&quot;&gt;Check it Out!&lt;/a&gt;
&lt;/div&gt;
&lt;h2&gt;Exceptionless JavaScript Client Overview&lt;/h2&gt;
&lt;p&gt;The client supports Node.js and JavaScript, and you can find up-to-date installation, configuration, and usage documentation over on the &lt;a title=&quot;Exceptionless Javascript Client GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript&quot; target=&quot;_blank&quot;&gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just like the non-JavaScript client, unhandled exceptions will be automatically sent upon configuration, and you can send log messages, feature usage events, etc. All the normal Exceptionless functionality is available.&lt;/p&gt;
&lt;h2&gt;Wanted!&lt;/h2&gt;
&lt;p&gt;Testers, developers, contributors, and feedback wanted! We want to make the Exceptionless Javascript client &lt;strong&gt;awesome&lt;/strong&gt;, but we need your help. Give us any feedback you might have via &lt;a title=&quot;GitHub Exceptionless Javascript Issues&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript/issues&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; an in-app message, &lt;a href=&quot;https://exceptionless.com/contact/&quot; title=&quot;Contact Exceptionless&quot;&gt;contact form&lt;/a&gt; submission, or comment right here on this blog post. We’re more than happy to answer any and all questions, or help you get up and running.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-05-20-exceptionless-node-js-javascript-client-demo/"/>
    <updated>2015-05-20T16:07:05-05:00</updated>
    <id>https://exceptionless.com/2015-05-20-exceptionless-node-js-javascript-client-demo/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-13218&quot; src=&quot;https://exceptionless.com/_site/assets/node-js-header.jpg&quot; alt=&quot;Exceptionless Node.js Javascript Client&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;13218&quot; srcset=&quot;https://exceptionless.com/assets/node-js-header.jpg 708w, https://exceptionless.com/assets/node-js-header-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;Last week we announced our full featured &lt;a title=&quot;Exceptionless JavaScript Client&quot; href=&quot;https://exceptionless.com/javascript-client-available-for-preview-testing/&quot; target=&quot;_blank&quot;&gt;JavaScript client&lt;/a&gt;, and we’re super excited about releasing a version 1.0 soon.&lt;/p&gt;
&lt;p&gt;This week we’d like to put more details out there on the Node.js version of the JavaScript client, including installation, configuration, and usage. We’ve also set up an &lt;a title=&quot;Exceptionless Express.js Sample App&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/example/express/app.js&quot; target=&quot;_blank&quot;&gt;Express.js sample app&lt;/a&gt; that you can spin up locally to play with things.&lt;/p&gt;
&lt;p&gt;Let’s take a look.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;How the JavaScript Client was Built&lt;/h2&gt;
&lt;p&gt;Our javascript client is built in &lt;a title=&quot;TypeScript&quot; href=&quot;https://github.com/Microsoft/TypeScript&quot; target=&quot;_blank&quot;&gt;typescript 1.5&lt;/a&gt; and is transpiled to es5. We have a single client that works with both Node.js and JavaScript due to dependency injection and a &lt;a title=&quot;Universal Module Definition (UMD)&quot; href=&quot;https://github.com/umdjs/umd&quot; target=&quot;_blank&quot;&gt;Universal Module Definition (UMD)&lt;/a&gt;. For capturing Node stack traces, we use &lt;a title=&quot;Node Stack Trace&quot; href=&quot;https://github.com/felixge/node-stack-trace&quot; target=&quot;_blank&quot;&gt;Felixge’s Node Stack Trace&lt;/a&gt; library.&lt;/p&gt;
&lt;h2&gt;Installing Exceptionless for Node.js&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Install the package by running &lt;code&gt;npm install exceptionless --save-dev&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the Exceptionless client to your app:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = require(&#39;exceptionless.node&#39;).ExceptionlessClient.default;&lt;/pre&gt;
&lt;h2&gt;Configuring the Client&lt;/h2&gt;
&lt;p&gt;You can configure the Exceptionless client a few different ways for Node.js. The below is the most common way, but for more configuration options and documentation, visit the &lt;a title=&quot;Exceptionless Javascript Client GitHub Page&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;Exceptionless.JavaScript GitHub repo&lt;/a&gt;. &lt;em&gt;NOTE: The only required setting you need to configure is the client’s apiKey.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Set the &lt;code&gt;apiKey&lt;/code&gt; on the default ExceptionlessClient instance.&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = require(&#39;exceptionless.node&#39;).ExceptionlessClient.default;
client.config.apiKey = &#39;API_KEY_HERE&#39;;
&lt;/pre&gt;
&lt;h2&gt;Sending Events&lt;/h2&gt;
&lt;p&gt;Once configured, the Exceptionless Node.js JavaScript client will automatically send your dashboard any unhandled exceptions that happen in your application. If you would like to send additional event types, such as log messages, feature usages, etc, take a look at the below examples.&lt;/p&gt;
&lt;p&gt;Make sure to check out the &lt;a title=&quot;Exceptionless.JavaScript GitHub Repo&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;Exceptionless.JavaScript GitHub Repo&lt;/a&gt; for the latest examples and documentation.&lt;/p&gt;
&lt;h3&gt;Sending Log Messages, Feature Usages, etc&lt;/h3&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = require(&#39;exceptionless.node&#39;).ExceptionlessClient.default;

client.submitLog(&#39;Logging made easy&#39;);

// You can also specify the log source and log level.
// We recommend specifying one of the following log levels: Trace, Debug, Info, Warn, Error
client.submitLog(&#39;app.logger&#39;, &#39;This is so easy&#39;, &#39;Info&#39;);
client.createLog(&#39;app.logger&#39;, &#39;This is so easy&#39;, &#39;Info&#39;).addTags(&#39;Exceptionless&#39;).submit();

// Submit feature usages
client.submitFeatureUsage(&#39;MyFeature&#39;);
client.createFeatureUsage(&#39;MyFeature&#39;).addTags(&#39;Exceptionless&#39;).submit();

// Submit a 404
client.submitNotFound(&#39;/somepage&#39;);
client.createNotFound(&#39;/somepage&#39;).addTags(&#39;Exceptionless&#39;).submit();

// Submit a custom event type
client.submitEvent({ message = &#39;Low Fuel&#39;, type = &#39;racecar&#39;, source = &#39;Fuel System&#39; });
&lt;/pre&gt;
&lt;h3&gt;Manually Sending Errors&lt;/h3&gt;
&lt;p&gt;In addition to automatically sending all unhandled exceptions, you can also manually send events to Exceptionless using our fluent &lt;a title=&quot;Exceptionless.JavaScript Event Builder API&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/src/EventBuilder.ts&quot; target=&quot;_blank&quot;&gt;event builder API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The below example demonstrates sending a new error, “test,” and setting the ReferenceID, Order and Quote properties, Tags, Geo, UserIdentity, and marking it as Critical.&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = require(&#39;exceptionless.node&#39;).ExceptionlessClient.default;

try {
  throw new Error(&#39;test&#39;);
} catch (error) {
  client.createException(error)
    // Set the reference id of the event so we can search for it later (reference:id).
    // This will automatically be populated if you call client.config.useReferenceIds();
    .setReferenceId(&#39;random guid&#39;)
    // Add the order object (the ability to exclude specific fields will be coming in a future version).
    .setProperty(&quot;Order&quot;, order)
    // Set the quote number.
    .setProperty(&quot;Quote&quot;, 123)
    // Add an order tag.
    .addTags(&quot;Order&quot;)
    // Mark critical.
    .markAsCritical()
    // Set the coordinates of the end user.
    .setGeo(43.595089, -88.444602)
    // Set the user id that is in our system and provide a friendly name.
    .setUserIdentity(user.Id, user.FullName)
    // Submit the event.
    .submit();
}
&lt;/pre&gt;
&lt;h2&gt;Express.js Support&lt;/h2&gt;
&lt;p&gt;If you are using &lt;a title=&quot;Express.JS&quot; href=&quot;http://expressjs.com/&quot; target=&quot;_blank&quot;&gt;Express.js&lt;/a&gt; to develop a web application, you can add Exceptionless and start collecting unhandled errors and 404s very quickly. To start, just add the following middleware to the bottom of your middleware definitions.&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;// This middleware processes any unhandled errors that may occur in your middleware.
app.use(function(err, req, res, next) {
 client.createUnhandledException(err, &#39;express&#39;).addRequestInfo(req).submit();
 res.status(500).send(&#39;Something broke!&#39;);
});

// This middleware processes 404’s.
app.use(function(req, res, next) {
 client.createNotFound(req.originalUrl).addRequestInfo(req).submit();
 res.status(404).send(&#39;Sorry cant find that!&#39;);
});
&lt;/pre&gt;
&lt;h2&gt;What Data is Collected?&lt;/h2&gt;
&lt;p&gt;The JavaScript/Node.js client is full featured, will collect all the information our other clients collect, and has a fluent API as shown above.&lt;/p&gt;
&lt;p&gt;By default, we wire up to the processes’ &lt;a title=&quot;Exceptionless Uncaught Exception Handler&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/src/bootstrap/NodeBootstrapper.ts#L24-L37&quot; target=&quot;_blank&quot;&gt;uncaught exception handler&lt;/a&gt; to automatically send any unhandled exceptions to your Exceptionless dashboard. We also submit a log message if your app doesn’t shut down properly via inspecting the &lt;a title=&quot;Exit Code&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/src/bootstrap/NodeBootstrapper.ts#L24-L37&quot; target=&quot;_blank&quot;&gt;exit code&lt;/a&gt;, which is very useful and lets you know what your app is doing. Additionally, any queued up events are processed and sent before your app closes.&lt;/p&gt;
&lt;p&gt;Each event contains environment and request information, as well, rounding out the complete list of Exceptionless features that we have made available via the JavaScript client, making it a great error and event reporting/logging solution for all your Node.js projects.&lt;figure id=&quot;attachment_13200&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/node-js-stacktrace-environment-info.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-13200&quot; src=&quot;https://exceptionless.com/assets/node-js-stacktrace-environment-info-150x150.png&quot; alt=&quot;Exceptionless Node.js Javascript Overview&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13200&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Event Overview&lt;/figcaption&gt; &lt;figure id=&quot;attachment_13201&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/node-js-event-details.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-13201&quot; src=&quot;https://exceptionless.com/assets/node-js-event-details-150x150.png&quot; alt=&quot;Exceptionless Node.js Client&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13201&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Event Details&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure id=&quot;attachment_13202&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/node-js-event-request.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-13202&quot; src=&quot;https://exceptionless.com/assets/node-js-event-request-150x150.png&quot; alt=&quot;Exceptionless Node.js Request Details&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13202&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Request Details&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure id=&quot;attachment_13203&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/node-js-event-environment-details.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-thumbnail wp-image-13203&quot; src=&quot;https://exceptionless.com/assets/node-js-event-environment-details-150x150.png&quot; alt=&quot;Exceptionless Node.js Event Environment Details&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13203&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Environment Details&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 style=&quot;clear: both;&quot;&gt;
  Sample Express.js App
&lt;/h2&gt;
&lt;p&gt;We have built a quick&lt;a title=&quot;Exceptionless Express.js Sample App&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/example/express/app.js&quot; target=&quot;_blank&quot;&gt; Express.js sample app&lt;/a&gt; that you can play around with to get an idea of how the Node.js JavaScript client works with Exceptionless.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run the sample app by following the steps below:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a title=&quot;Exceptionless Javascript Client GitHub&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;Clone or download our repository from GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Navigate to the example\express folder via the command line (e.g., cd example\express)&lt;/li&gt;
&lt;li&gt;Run npm install&lt;/li&gt;
&lt;li&gt;Open app.js in your favorite text editor and set the &lt;a title=&quot;Exceptionless.JavaScript Sample App apiKey and serverUrl&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/example/express/app.js#L5-L6&quot; target=&quot;_blank&quot;&gt;apiKey&lt;/a&gt;..&lt;/li&gt;
&lt;li&gt;Run node app.js.&lt;/li&gt;
&lt;li&gt;Navigate to &lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000&lt;/a&gt; in your browser to view the express app.&lt;/li&gt;
&lt;li&gt;To create an error, navigate to &lt;a href=&quot;http://localhost:3000/boom&quot;&gt;http://localhost:3000/boom&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Troubleshooting&lt;/h2&gt;
&lt;p&gt;We recommend enabling debug logging by calling &lt;code&gt;client.config.useDebugLogger();&lt;/code&gt;. This will output messages to the console regarding what the client is doing. Please &lt;a title=&quot;Exceptionless JavaScript Client Issues&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript/issues&quot; target=&quot;_blank&quot;&gt;contact us by creating an issue on GitHub&lt;/a&gt; if you need assistance or have any feedback for the project.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;As we move forward towards version 1.0 of our JavaScript client, we are looking for any and all feedback, so please don’t hesitate to &lt;a title=&quot;Exceptionless JavaScript Client Feedback&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript/issues&quot; target=&quot;_blank&quot;&gt;let us know what you think, report a bug, etc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-05-27-javascript-client-demo-exceptionless/"/>
    <updated>2015-05-27T17:38:38-05:00</updated>
    <id>https://exceptionless.com/2015-05-27-javascript-client-demo-exceptionless/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-13237&quot; src=&quot;https://exceptionless.com/_site/assets/blog-header-javascript.jpg&quot; alt=&quot;Exceptionless JavaScript Client&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;13237&quot; srcset=&quot;https://exceptionless.com/assets/blog-header-javascript.jpg 708w, https://exceptionless.com/assets/blog-header-javascript-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;We’re getting closer and closer to version 1.0 of our &lt;a title=&quot;Exceptionless JavaScript Client&quot; href=&quot;https://exceptionless.com/javascript-client-available-for-preview-testing/&quot; target=&quot;_blank&quot;&gt;JavaScript client&lt;/a&gt;, and we wanted to give everyone a demo of installation, configuration, and usage.&lt;/p&gt;
&lt;p&gt;If you’re using Node.js, make sure to check out last week’s blog post for &lt;a title=&quot;Exceptionless Node.js Demo&quot; href=&quot;https://exceptionless.com/exceptionless-node-js-javascript-client-demo/&quot; target=&quot;_blank&quot;&gt;Node specific examples&lt;/a&gt;. Otherwise, continue reading for Javascript examples.&lt;/p&gt;
&lt;p&gt;As you read and begin playing with the Exceptionless JavaScript client, please make note of any feedback, bugs, etc, and &lt;a title=&quot;Exceptionless.JavaScript GitHub Repo&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript/issues&quot; target=&quot;_blank&quot;&gt;submit a GitHub issue&lt;/a&gt; so we can fast track version 1.0 – we surely appreciate it!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;How the JavaScript Client was Built&lt;/h2&gt;
&lt;p&gt;We built our JavaScript client in &lt;a title=&quot;TypeScript&quot; href=&quot;https://github.com/Microsoft/TypeScript&quot; target=&quot;_blank&quot;&gt;typescript 1.5&lt;/a&gt; transpiled it to es5. Our single client works with both &lt;a title=&quot;Exceptionless.JavaScript Node.js Demo&quot; href=&quot;https://exceptionless.com/exceptionless-node-js-javascript-client-demo/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; and JavaScript due to dependency injection and a &lt;a title=&quot;Universal Module Definition (UMD)&quot; href=&quot;https://github.com/umdjs/umd&quot; target=&quot;_blank&quot;&gt;Universal Module Definition (UMD)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing the Exceptionless JavaScript Client&lt;/h2&gt;
&lt;h3&gt;Via Bower&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Install the package by running &lt;code&gt;bower install exceptionless&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add the Exceptionless script to your HTML page. We recommend placing the script at the top of the document to ensure Exceptionless picks up and reports the absolute most potential exceptions and events.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;script src=&quot;bower_components/exceptionless/dist/exceptionless.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;
&lt;h2&gt;Configuring the Client&lt;/h2&gt;
&lt;p&gt;Configuration of the Exceptionless JavaScript client can be accomplished a variety of ways. We list the common ways below, but make sure to check the &lt;a title=&quot;Exceptionless Javascript Client GitHub Page&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;Exceptionless.JavaScript GitHub repo&lt;/a&gt; for the most up to date documentation if you run into any problems using this example code.&lt;br&gt;
&lt;em&gt;NOTE: The only required setting you need to configure is the client’s apiKey.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Configuration Options&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Configure the &lt;code&gt;apiKey&lt;/code&gt; as part of the script tag. This method will be applied to all new instances of the ExceptionlessClient&lt;/p&gt;
&lt;pre class=&quot;brush: xml; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;script src=&quot;bower_components/exceptionless/dist/exceptionless.min.js?apiKey=API_KEY_HERE&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Set the &lt;code&gt;apiKey&lt;/code&gt; on the default ExceptionlessClient instance.&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = exceptionless.ExceptionlessClient.default;
client.config.apiKey = &#39;API_KEY_HERE&#39;;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Create a new instance of the ExceptionlessClient and specify the &lt;code&gt;apiKey&lt;/code&gt; or &lt;a title=&quot;Exceptionless.JavaScript Configuration Object&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/src/configuration/IConfigurationSettings.ts&quot; target=&quot;_blank&quot;&gt;configuration object&lt;/a&gt;. &lt;em&gt;Note that the configuration object is optional.&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = new exceptionless.ExceptionlessClient(&#39;API_KEY_HERE&#39;); // Required

// or with a configuration object
//var client = new exceptionless.ExceptionlessClient({
  //apiKey: &#39;API_KEY_HERE&#39;,
  //submissionBatchSize: 100
//});&lt;/pre&gt;
&lt;h2&gt;Sending Events&lt;/h2&gt;
&lt;p&gt;Unhandled exceptions will automatically be sent to your Exceptionless dashboard once the JavaScript client is configured properly. In order to send additional events, including log messages, feature usages, and more, you can use the code samples below and check the &lt;a title=&quot;Exceptionless.JavaScript GitHub Repo&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;Exceptionless.JavaScript GitHub Repo&lt;/a&gt; for the latest examples and documentation.&lt;/p&gt;
&lt;h3&gt;Sending Log Messages, Feature Usages, etc&lt;/h3&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = exceptionless.ExceptionlessClient.default;

client.submitLog(&#39;Logging made easy&#39;);

// You can also specify the log source and log level.
// We recommend specifying one of the following log levels: Trace, Debug, Info, Warn, Error
client.submitLog(&#39;app.logger&#39;, &#39;This is so easy&#39;, &#39;Info&#39;);
client.createLog(&#39;app.logger&#39;, &#39;This is so easy&#39;, &#39;Info&#39;).addTags(&#39;Exceptionless&#39;).submit();

// Submit feature usages
client.submitFeatureUsage(&#39;MyFeature&#39;);
client.createFeatureUsage(&#39;MyFeature&#39;).addTags(&#39;Exceptionless&#39;).submit();

// Submit a 404
client.submitNotFound(&#39;/somepage&#39;);
client.createNotFound(&#39;/somepage&#39;).addTags(&#39;Exceptionless&#39;).submit();

// Submit a custom event type
client.submitEvent({ message = &#39;Low Fuel&#39;, type = &#39;racecar&#39;, source = &#39;Fuel System&#39; });&lt;/pre&gt;
&lt;h3&gt;Manually Sending Errors&lt;/h3&gt;
&lt;p&gt;To manually send events other than the automatically reported unhandled exceptions, you can use our fluent &lt;a title=&quot;Exceptionless.JavaScript Event Builder API&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/src/EventBuilder.ts&quot; target=&quot;_blank&quot;&gt;event builder API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The below example demonstrates sending a new error, “test,” and setting the ReferenceID, Order and Quote properties, Tags, Geo, UserIdentity, and marking it as Critical.&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = exceptionless.ExceptionlessClient.default;

try {
  throw new Error(&#39;test&#39;);
} catch (error) {
  client.createException(error)
    // Set the reference id of the event so we can search for it later (reference:id).
    // This will automatically be populated if you call client.config.useReferenceIds();
    .setReferenceId(&#39;random guid&#39;)
    // Add the order object (the ability to exclude specific fields will be coming in a future version).
    .setProperty(&quot;Order&quot;, order)
    // Set the quote number.
    .setProperty(&quot;Quote&quot;, 123)
    // Add an order tag.
    .addTags(&quot;Order&quot;)
    // Mark critical.
    .markAsCritical()
    // Set the coordinates of the end user.
    .setGeo(43.595089, -88.444602)
    // Set the user id that is in our system and provide a friendly name.
    .setUserIdentity(user.Id, user.FullName)
    // Submit the event.
    .submit();
}&lt;/pre&gt;
&lt;h2&gt;What Data is Collected?&lt;/h2&gt;
&lt;p&gt;We built the JavaScript client to be full featured and allow you to report and log all the data our other clients do. It has a fluent API, as mentioned above, and is ready to rock and roll.&lt;/p&gt;
&lt;p&gt;We wire up to the window.onerror handler by default, in order to send unhandled exceptions to your Exceptionless dashboard automatically.&lt;/p&gt;
&lt;p&gt;Finishing off the Exceptionless JavaScript client features, every event also includes request information.&lt;/p&gt;
&lt;p&gt;A few screenshots of an individual event can be found below.&lt;figure id=&quot;attachment_13248&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/javascript-client-event-overview.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-13248 size-thumbnail&quot; src=&quot;https://exceptionless.com/assets/javascript-client-event-overview-150x150.png&quot; alt=&quot;Exceptionless Javascript Event Overview&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13200&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Event Overview&lt;/figcaption&gt; &lt;figure id=&quot;attachment_13249&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/javascript-client-exception-details.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-13249 size-thumbnail&quot; src=&quot;https://exceptionless.com/assets/javascript-client-exception-details-150x150.png&quot; alt=&quot;Exceptionless Javascript Event Details&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13201&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Event Details&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure id=&quot;attachment_13250&quot; class=&quot;thumbnail wp-caption alignleft&quot; style=&quot;width: 150px&quot;&gt;&lt;a href=&quot;https://exceptionless.com/_site/assets/javascript-client-event-request-info.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-13250 size-thumbnail&quot; src=&quot;https://exceptionless.com/assets/javascript-client-event-request-info-150x150.png&quot; alt=&quot;Exceptionless Javascript Event Request Details&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13202&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Request Details&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 style=&quot;clear: both;&quot;&gt;
  Sample
&lt;/h2&gt;
&lt;p&gt;We have put together an &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/tree/master/example&quot; target=&quot;_blank&quot;&gt;example&lt;/a&gt; that you can use to get an idea of how everything works. It is available on the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/tree/master/example&quot; target=&quot;_blank&quot;&gt;GitHub Repo&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;To Get the Example Running…&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone or download the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/tree/master/example&quot; target=&quot;_blank&quot;&gt;GitHub Repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Edit the HTML file in the root example folder and replace the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/example/index.html#L8&quot; target=&quot;_blank&quot;&gt;existing API Key&lt;/a&gt; with yours. Also, comment out the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/example/index.html#L16&quot; target=&quot;_blank&quot;&gt;serverUrl&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Open the HTML file in your browser&lt;/li&gt;
&lt;li&gt;Open the console so that you can see the debug messages that the example generates&lt;/li&gt;
&lt;li&gt;Click the buttons on the page to submit an event&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 style=&quot;clear: both;&quot;&gt;
  Troubleshooting
&lt;/h2&gt;
&lt;p&gt;Calling &lt;code&gt;client.config.useDebugLogger();&lt;/code&gt; to enable debug logging is recommend and will output messages to the console regarding what the client is doing. Please &lt;a title=&quot;Exceptionless JavaScript Client Issues&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript/issues&quot; target=&quot;_blank&quot;&gt;contact us by creating an issue on GitHub&lt;/a&gt; if you need help or have any feedback regarding the JavaScript client.&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;As we move forward towards version 1.0 of our JavaScript client, we are looking for any and all feedback, so please don’t hesitate to &lt;a title=&quot;Exceptionless JavaScript Client Feedback&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript/issues&quot; target=&quot;_blank&quot;&gt;let us know what you think, report a bug, etc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-06-04-javascript-node-js-client-version-1-release-candidate/"/>
    <updated>2015-06-04T09:51:28-05:00</updated>
    <id>https://exceptionless.com/2015-06-04-javascript-node-js-client-version-1-release-candidate/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13283 size-full&quot; src=&quot;https://exceptionless.com/_site/assets/javascript-release-candidate.jpg&quot; alt=&quot;Exceptionless JavaScript Client&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;13281&quot; srcset=&quot;https://exceptionless.com/assets/javascript-release-candidate.jpg 708w, https://exceptionless.com/assets/javascript-release-candidate-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;If you’ve been following along the last few weeks, you know we’ve been working hard to get the new &lt;a href=&quot;http://exceptionless.com/javascript-client-available-for-preview-testing/&quot; target=&quot;_blank&quot;&gt;JavaScript Client&lt;/a&gt; up to speed and ready for a version 1 release.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We think we’re there!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Whether you’re a &lt;a href=&quot;http://exceptionless.com/javascript-client-demo-exceptionless/&quot; target=&quot;_blank&quot;&gt;JavaScript&lt;/a&gt; or &lt;a href=&quot;http://exceptionless.com/exceptionless-node-js-javascript-client-demo/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; user, you’ll be able to enjoy the same full featured exception and event reporting platform that our primary .NET client offers, with fewer platform specific boundaries.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Sure It’s Ready?&lt;/h2&gt;
&lt;p&gt;We have been doing extensive testing over the course of the last month, which has allowed us to identify issues and inefficiencies throughout. Each of those has been addressed with several improvements and fixes, leaving us with a much faster, more stable client.&lt;/p&gt;
&lt;p&gt;Many of the tweaks we made were related to IE9 and Node. Those issues have been resolved and things are working well now. In addition, we further increased performance by shrinking the library size fairly drastically.&lt;/p&gt;
&lt;p&gt;Moving forward, we will just be working on bug fixes related to user-reported issues as usage picks up.&lt;/p&gt;
&lt;h3&gt;Recent Bug Fixes, Issue Resolutions, &amp;amp; Improvements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Ensured compatibility with module formats like &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts&quot; target=&quot;_blank&quot;&gt;es6&lt;/a&gt; (&lt;a href=&quot;https://github.com/systemjs/systemjs&quot; target=&quot;_blank&quot;&gt;SystemJS&lt;/a&gt;/&lt;a href=&quot;http://jspm.io/&quot; target=&quot;_blank&quot;&gt;jspm&lt;/a&gt;) and &lt;a href=&quot;http://requirejs.org/&quot; target=&quot;_blank&quot;&gt;RequireJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Various IE9 and Node compatibility issues fixed&lt;/li&gt;
&lt;li&gt;Decreased library size to improve performance and efficiency&lt;/li&gt;
&lt;li&gt;Various other performance improvements&lt;/li&gt;
&lt;li&gt;Fixed Angular integration failures with Angular Router&lt;/li&gt;
&lt;li&gt;Fixed – Unable to integrate with Aurelia due to node being improperly detected&lt;/li&gt;
&lt;li&gt;Changed the implementation of the InMemoryStorage to do a get instead of a get and delete&lt;/li&gt;
&lt;li&gt;Unable to post events with the NodeSubmissionClient over http fixed&lt;/li&gt;
&lt;li&gt;Fixed – Unit tests are failing due to transpilation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Start Using It!&lt;/h2&gt;
&lt;p&gt;We’ve already released a few blog posts (linked below) that detail how to get up and running, but please visit the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;Exceptionless.JavaScript GitHub Repo&lt;/a&gt; for the most up-to-date documentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://exceptionless.com/javascript-client-demo-exceptionless/&quot; target=&quot;_blank&quot;&gt;JavaScript Users&lt;/a&gt;&lt;/strong&gt; can find installation, configuration, usage details and examples &lt;a href=&quot;http://exceptionless.com/javascript-client-demo-exceptionless/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you’re a &lt;strong&gt;&lt;a href=&quot;http://exceptionless.com/exceptionless-node-js-javascript-client-demo/&quot; target=&quot;_blank&quot;&gt;Node.js&lt;/a&gt; user&lt;/strong&gt;, follow &lt;a href=&quot;http://exceptionless.com/exceptionless-node-js-javascript-client-demo/&quot; target=&quot;_blank&quot;&gt;this article&lt;/a&gt; to get set up and running.&lt;/p&gt;
&lt;p&gt;We’ve also got &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/tree/master/example&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;examples/samples on GitHub&lt;/strong&gt;&lt;/a&gt; for JavaScript, Express, TypeScript, SystemJS, and RequireJS.&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot;&gt;Try It Today!&lt;/a&gt;
&lt;/div&gt;
&lt;h2&gt;Let Us Know What You Think&lt;/h2&gt;
&lt;p&gt;We’re suckers for feedback, so let us have it whether good, bad, or indifferent. Bugs, etc should be reported on the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/issues&quot; target=&quot;_blank&quot;&gt;GitHub Issues&lt;/a&gt; page, but feel free to shoot us an in-app message, email, etc and let us know what you think and if you had any issues getting everything working.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-06-09-javascript-node-js-client-v1-release-notes/"/>
    <updated>2015-06-09T16:56:15-05:00</updated>
    <id>https://exceptionless.com/2015-06-09-javascript-node-js-client-v1-release-notes/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-2978&quot; style=&quot;margin-left: 20px;&quot; src=&quot;https://exceptionless.com/assets/exceptionless-logoBLK-300x75.png&quot; alt=&quot;Exceptionless Logo&quot; width=&quot;300&quot; height=&quot;75&quot; data-id=&quot;2978&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-logoBLK-300x75.png 300w, https://exceptionless.com/assets/exceptionless-logoBLK.png 1000w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;Last week we announced the &lt;a href=&quot;http://exceptionless.com/javascript-node-js-client-version-1-release-candidate/&quot; target=&quot;_blank&quot;&gt;V1 release candidate&lt;/a&gt; for the Exceptionless JavaScript/Node.js Client. This week we’ve got official release notes for you! Have a look.&lt;/p&gt;
&lt;h2&gt;Release Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Client supports &lt;strong&gt;JavaScript and Node&lt;/strong&gt; (Works everywhere)&lt;/li&gt;
&lt;li&gt;Send your errors, logs or feature usages to your &lt;a href=&quot;https://be.exceptionless.io/&quot; target=&quot;_blank&quot;&gt;Exceptionless dashboard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Supports various module formats&lt;/strong&gt; such as &lt;a href=&quot;http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts&quot; target=&quot;_blank&quot;&gt;es6&lt;/a&gt; (&lt;a href=&quot;https://github.com/systemjs/systemjs&quot; target=&quot;_blank&quot;&gt;SystemJS&lt;/a&gt;/&lt;a href=&quot;http://jspm.io/&quot; target=&quot;_blank&quot;&gt;jspm&lt;/a&gt;), &lt;a href=&quot;https://github.com/umdjs/umd&quot; target=&quot;_blank&quot;&gt;UMD&lt;/a&gt;, &lt;a href=&quot;http://requirejs.org/&quot; target=&quot;_blank&quot;&gt;RequireJS&lt;/a&gt;, &lt;a href=&quot;http://www.commonjs.org/&quot; target=&quot;_blank&quot;&gt;CommonJS&lt;/a&gt;, or global&lt;/li&gt;
&lt;li&gt;We built the Exceptionless JavaScript/Nodes.js Client with the past and future browsers in mind. Everything is testable via components injected on startup (via dependency injection), which means you can &lt;strong&gt;replace any component of the system to fit your specific needs&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Client is a &lt;strong&gt;full feature parity of our .NET clients&lt;/strong&gt;, including:
&lt;ul&gt;
&lt;li&gt;Support for custom objects&lt;/li&gt;
&lt;li&gt;Mark events as critical&lt;/li&gt;
&lt;li&gt;Server side settings&lt;/li&gt;
&lt;li&gt;Data exclusions&lt;/li&gt;
&lt;li&gt;Plugins&lt;/li&gt;
&lt;li&gt;and more…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Includes first class integration for third party libraries like &lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot;&gt;AngularJS&lt;/a&gt; and &lt;a href=&quot;http://expressjs.com/&quot; target=&quot;_blank&quot;&gt;Express&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://github.com/exceptionless/Exceptionless.javascript&quot;&gt;Start Using it Today&lt;/a&gt;
&lt;/div&gt;
&lt;h2&gt;Usage, Examples, and more…&lt;/h2&gt;
&lt;p&gt;Everything you need to get up and running (including contributing/developing) can be found on the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;Exceptionless.JavaScript GitHub repo&lt;/a&gt;. Javascript, Express, TypeScript, SystemJS, and RequireJS examples &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/tree/master/example&quot; target=&quot;_blank&quot;&gt;can be found in the example folder&lt;/a&gt;. As always, you can contact us via an in-app message for help, or &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/issues&quot; target=&quot;_blank&quot;&gt;submit an issue on GitHub&lt;/a&gt; with bugs, feedback, etc. We’re here to make sure you get things working properly so you can take full advantage of Exceptionless!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-06-17-the-power-of-real-time-project-settings/"/>
    <updated>2015-06-17T23:32:15-05:00</updated>
    <id>https://exceptionless.com/2015-06-17-the-power-of-real-time-project-settings/</id>
    <content type="html">&lt;p&gt;Did you know there are customizable server/client configuration values within your Exceptionless Project’s settings? Well &lt;strong&gt;now you do&lt;/strong&gt; – and knowing’s half the battle!&lt;/p&gt;
&lt;p&gt;These project level settings are a dictionary of key value pairs (string key, string value). They are defined server-side and automatically pushed to the client when they are updated. Using this feature allows you to control what you send without redeploying your app, which we think is pretty cool!&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You can use these client configuration settings for a variety of applications, including:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controlling &lt;a href=&quot;http://docs.exceptionless.com/contents/security/&quot; target=&quot;_blank&quot;&gt;data exclusions&lt;/a&gt; for protecting sensitive information&lt;/li&gt;
&lt;li&gt;Enabling / Disabling user signups&lt;/li&gt;
&lt;li&gt;Turning logging on or off&lt;/li&gt;
&lt;li&gt;Enabling analytics&lt;/li&gt;
&lt;li&gt;Controlling information collection&lt;/li&gt;
&lt;li&gt;And many more! You can send any key value pair to control whatever you like within your app.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s take a look at a JavaScript and .NET client usage example to get your rolling with this feature.&lt;/p&gt;
&lt;h2&gt;Adding a New Client Configuration Value&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/project-settings-page.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-13327 size-medium&quot; style=&quot;margin-left: 15px; margin-bottom: 15px;&quot; src=&quot;http://exceptionless.com/assets/project-settings-page-300x209.png&quot; alt=&quot;Exceptionless Client Configuration Settings&quot; width=&quot;300&quot; height=&quot;209&quot; data-id=&quot;13327&quot; srcset=&quot;https://exceptionless.com/assets/project-settings-page-300x209.png 300w, https://exceptionless.com/assets/project-settings-page.png 813w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before we get started with more of an explanation and an example, we need to add a new key and value. To do so, we go to &lt;code&gt;Admin &amp;gt; Projects&lt;/code&gt; in our Exceptionless Dashboard, select the project we are working on, then go to the “Settings” tab.&lt;/p&gt;
&lt;p&gt;This is where we can add a “New Client Configuration,” which simply consists of the key and value. For the example below, we’ll add the (fictional) &lt;code&gt;enableLogSubmission&lt;/code&gt; key and set it to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;How it Works&lt;/h2&gt;
&lt;p&gt;When your application first starts up, your project’s client configuration settings are read (from storage) and applied.&lt;/p&gt;
&lt;p&gt;If a setting value doesn’t exist in storage, it will be retrieved from the server after the next event submission occurs. We do this by inspecting the response headers and comparing a response header that contains the setting version. If the version doesn’t match the saved setting value then we make a request to get the setting and apply it.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It’s worth noting that we allow you to define your own default settings and overwrite them with server side settings, which we’ll include in our example.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;How do I use the client configuration settings?&lt;/h3&gt;
&lt;p&gt;In the example below, we will dynamically turn on or off the log event submissions at runtime without restarting the app or logging into the server to change configuration settings.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why, you ask?&lt;/strong&gt; Maybe we don’t care about log submission until there is a really tough issue to solve. With Client Configuration Values, we can simply turn it on only when needed.&lt;/p&gt;
&lt;p&gt;We’ll assume for this example that we are using the &lt;code&gt;enableLogSubmission&lt;/code&gt; key we created above to control this. This setting is made up and doesn’t have to exist server side since we will be providing a default value client side. This allows us to define it via the project settings page at anytime and change our applications behavior.&lt;/p&gt;
&lt;p&gt;To control this we will be registering a new &lt;a href=&quot;https://exceptionless.com/how-to-add-a-plugin-to-affect-events-in-exceptionless/&quot; target=&quot;_blank&quot;&gt;client side plugin&lt;/a&gt; that runs every time an event is created. If our key (&lt;code&gt;enableLogSubmission&lt;/code&gt;) is set to false and the event type is set to log, we will discard the event.&lt;/p&gt;
&lt;h3&gt;.NET Example&lt;/h3&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;ExceptionlessClient.Default.Configuration.AddPlugin(&quot;Conditionally cancel log submission&quot;, 100, context =&amp;gt; {
    var enableLogSubmission = context.Client.Configuration.Settings.GetBoolean(&quot;enableLogSubmission&quot;, true);

    // only cancel event submission if it’s a log event and enableLogSubmission is false
    if (context.Event.Type == Event.KnownTypes.Log &amp;&amp; !enableLogSubmission) {
        context.Cancel = true;
    }
});
&lt;/pre&gt;
&lt;p&gt;You might notice that we are calling the &lt;code&gt;GetBoolean&lt;/code&gt; method to check the &lt;code&gt;enableLogSubmission&lt;/code&gt; key. This is a helper method that makes it easy to consume saved client configuration values. The first parameter defines the settings key (name). The second parameter is optional and &lt;strong&gt;allows you to set a default value&lt;/strong&gt; if the key doesn’t exist in the settings or was unable to be converted to the proper type (e.g., a boolean).&lt;/p&gt;
&lt;h4&gt;.NET Helpers&lt;/h4&gt;
&lt;p&gt;Above, we used the &lt;code&gt;GetBoolean&lt;/code&gt; helper method. In the .NET client, we have a few helpers to convert string configuration values to different system types. These methods also contain overloads that allow you to specify default values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Helper List&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GetString&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetBoolean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetInt32&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetInt64&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetDouble&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetDateTime&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetDateTimeOffset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetGuid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetStringCollection&lt;/code&gt; (breaks a comma delimited list into an IEnumerable of strings)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;JavaScript Example&lt;/h3&gt;
&lt;p&gt;The same functionality above can also be achieved using our new &lt;a href=&quot;http://exceptionless.com/javascript-node-js-client-v1-release-notes/&quot;&gt;JavaScript Client&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.ExceptionlessClient.default.config.addPlugin(&#39;Conditionally cancel log submission&#39;, 100, function (context, next) {
    var enableLogSubmission = context.client.config.settings[&#39;enableLogSubmission&#39;];

    // only cancel event submission if it’s a log event and
    // enableLogSubmission is set to a value and the value is not true.
    if (context.event.type === &#39;log&#39; &amp;&amp; (!!enableLogSubmission &amp;&amp; enableLogSubmission !== &#39;true&#39;)) {
       context.cancelled = true;
    }

    next();
});
&lt;/pre&gt;
&lt;h2&gt;Subscribing to Setting Changes&lt;/h2&gt;
&lt;p&gt;If you would like to be notified when client configuration settings are changed, you can subscribe to them using something like the below code. This is useful when you want to update your application in real time when settings change server side.&lt;/p&gt;
&lt;h3&gt;.NET&lt;/h3&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;ExceptionlessClient.Default.Configuration.Settings.Changed += SettingsOnChanged;

private void SettingsOnChanged(object sender, ChangedEventArgs&amp;lt;KeyValuePair&amp;lt;string, string&amp;gt;&amp;gt; args) {
   Console.WriteLine(&quot;The key {0} was {1}&quot;, args.Item.Key, args.Action);
}
&lt;/pre&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.SettingsManager.onChanged(function(configuration)  {
   // configuration.settings contains the new settings
});
&lt;/pre&gt;
&lt;h2&gt;Any Questions?&lt;/h2&gt;
&lt;p&gt;These Client Configuration Values are somewhat of a hidden Exceptionless gem, but we think they are power and that many of our users can find real value in using them to control the flow of information, specifically sensitive data.&lt;/p&gt;
&lt;p&gt;If you have any questions or comments, please let us know. As usual, we’re all ears!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-06-22-exclude-and-protect-sensitive-data-within-exceptionless/"/>
    <updated>2015-06-22T20:47:44-05:00</updated>
    <id>https://exceptionless.com/2015-06-22-exclude-and-protect-sensitive-data-within-exceptionless/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-13354 size-full&quot; src=&quot;https://exceptionless.com/assets/data-exclusions.png&quot; alt=&quot;Exceptionless Data Exclusions for Security&quot; width=&quot;260&quot; height=&quot;167&quot; data-id=&quot;13354&quot;&gt;We realize you may have sensitive data that could potentially be transmitted within an Exceptionless error, event, log message, etc.&lt;/p&gt;
&lt;p&gt;In order to help make sure that information is not compromised, we have included a &lt;a href=&quot;http://docs.exceptionless.com/contents/security/&quot;&gt;simple comma delimited field for data exclusions&lt;/a&gt; on the Exceptionless Project Settings page where you can add field names that you would like to be excluded from any error or event that is reported.&lt;/p&gt;
&lt;p&gt;Once set, the excluded field data is discarded at the client level and never hits our servers.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Types of Data You Can Exclude&lt;/h2&gt;
&lt;p&gt;You can exclude data from any of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extended Data Properties&lt;/li&gt;
&lt;li&gt;Form Fields&lt;/li&gt;
&lt;li&gt;Cookies&lt;/li&gt;
&lt;li&gt;Query Parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Data Exclusion Wildcards&lt;/h2&gt;
&lt;p&gt;To be extra careful with your data, using * allows you to specify wildcards that can be used to dictate “starts with,” “ends with,” or “contains.”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string*&lt;/code&gt;&lt;br&gt;
Following the string with a wildcard removes any field that starts with the string from the event report.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*string&lt;/code&gt;&lt;br&gt;
If you prefix the field name with a wildcard, it will remove any field that ends with the string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*string*&lt;/code&gt;&lt;br&gt;
Using a wildcard before and after the string means that the system will remove any field that contains the string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Example&lt;/h3&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13355 size-full&quot; src=&quot;https://exceptionless.com/_site/assets/data-exclusion-examples.png&quot; alt=&quot;Exceptionless Security&quot; width=&quot;520&quot; height=&quot;44&quot; data-id=&quot;13355&quot; srcset=&quot;https://exceptionless.com/assets/data-exclusion-examples.png 520w, https://exceptionless.com/assets/data-exclusion-examples-300x25.png 300w&quot; sizes=&quot;(max-width: 520px) 100vw, 520px&quot;&gt; 
&lt;p&gt;One potential example is, let’s say, user addresses. Perhaps you have multiple user addresses that may get transmitted, and you want to exclude some or all of them. Maybe you have “HomeAddress” and “WorkAddress”.&lt;/p&gt;
&lt;p&gt;To exclude only “HomeAddress” data, you would just add &lt;code&gt;HomeAddress&lt;/code&gt; as an exclusion. The same goes for “WorkAddress.”&lt;/p&gt;
&lt;p&gt;To exclude both, you could either add &lt;code&gt;HomeAddress&lt;/code&gt; and &lt;code&gt;WorkAddress&lt;/code&gt;, separated by a comma, or you could use &lt;code&gt;*Address&lt;/code&gt; if those were the only two fields that ended with “Address.” If those were the only fields that contained “Address” at all, you could use &lt;code&gt;*Address*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It’s easy stuff, but powerful enough to be aware of and use where possible to ensure security.&lt;/p&gt;
&lt;h2&gt;What Do You Exclude?&lt;/h2&gt;
&lt;p&gt;We are sure you can come up with some creative exclusions for various types of sensitive data. At Exceptionless, we exclude any and all relatively sensitive data to protect our users as much as possible.&lt;/p&gt;
&lt;p&gt;Obviously, things like passwords, credit card info, etc are encrypted, but other fields such as addresses, etc, are also relatively sensitive information that typically doesn’t need to be displayed.&lt;/p&gt;
&lt;p&gt;What do you exclude? Do you have any feedback about this Exceptionless feature? Let us know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-06-29-exceptionless-case-study-scientific-lab-equipment/"/>
    <updated>2015-06-29T22:50:40-05:00</updated>
    <id>https://exceptionless.com/2015-06-29-exceptionless-case-study-scientific-lab-equipment/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-13383&quot; src=&quot;http://exceptionless.com/assets/blog-header-image-small-case-study.png&quot; alt=&quot;blog-header-image-small-case-study&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;13383&quot; srcset=&quot;https://exceptionless.com/assets/blog-header-image-small-case-study.png 260w, https://exceptionless.com/assets/blog-header-image-small-case-study-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;It’s always great to hear back from our users, whether it’s a simple “atta boy” or a full page’s worth of feedback.&lt;/p&gt;
&lt;p&gt;Today we thought it would be nice to share a recent case study from one of our users that lives in the scientific laboratory and processing equipment space. Their company is a leading provider of stirring, mixing, and kneading machines, among other things, that are used by the pharmaceutical, chemical, food, paint, cosmetic, and plastics industries around the world. Neat!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“It helps me zero in on what could be the issue, AND have a documented track of what all errors I’ve seen.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;h2&gt;The Questions&lt;/h2&gt;
&lt;p&gt;When a user hits a certain number of sessions with Exceptionless, we shoot them a quick survey email asking them a few things that might help us improve our product and get a better feel for how our users are utilizing it’s features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In a nutshell, we ask the following:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What’s the number one customer-facing bug Exceptionless helped you squash?&lt;/li&gt;
&lt;li&gt;Were you surprised at the initial results of using Exceptionless for the first time? How many errors were you seeing?&lt;/li&gt;
&lt;li&gt;What is the number one internal bug you were able to track down with Exceptionless?&lt;/li&gt;
&lt;li&gt;If you had one feature you’d like us to add to Exceptionless, what would it be?&lt;/li&gt;
&lt;li&gt;What other examples or feedback do you have?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Answer Time!&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;“I’d say that Exceptionless helps me find all the bugs which I’d have to spend more time on zeroing in on, faster.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The user was gracious enough to provide us with the following answers to the above general questions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;“Well, since our application is not yet released to the customer, I’m using Exceptionless to report bugs/crashes which I encounter routinely while testing the UI. It helps me zero in on what could be the issue, AND have a documented track of what all errors I’ve seen.”&lt;/li&gt;
&lt;li&gt;“Since Exceptionless is being used by me DURING development, it’s not surprising at all! 🙂 Maybe 4-5 bugs per day in sporadic bouts of crashes. Sometimes no bugs for a long time!”&lt;/li&gt;
&lt;li&gt;“&lt;strong&gt;More than ONE major bug&lt;/strong&gt;, I’d say that Exceptionless helps me find all the bugs which I’d have to spend more time on zeroing in on, faster.”&lt;/li&gt;
&lt;li&gt;“Support for snapshots (user reviewed), memory dump files is my number ONE feature request.”&lt;/li&gt;
&lt;li&gt;“Will update you on this once I release to customers. But it’s nice having the &lt;strong&gt;confidence&lt;/strong&gt; that Exceptionless will help me squash bugs AS they get reported, instead of having to wait for that brave customer who girdles up his loins and takes up the onerous task of finding out how to report bugs and whom to report them to! Most customers would have just cursed me and gone ahead with workarounds! :)”&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;How About You? Got Any Feedback?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Consider this for a second:&lt;/strong&gt; If every user provided 10 minutes of feedback on the products they use and love, the owners of those products/programs/tools/experiences would be able to improve them much faster and with drastically more focus and drive.&lt;/p&gt;
&lt;p&gt;With that said… give us 5, 10, or maybe 15 minutes and answer the above questions for us in the comments below. We’re no Microsoft – your voice &lt;strong&gt;will be heard&lt;/strong&gt;, and any suggestions will be strongly considered/debated. Who knows – maybe we work on your feature request next!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-07-09-exceptionless-documentation-has-moved-grown/"/>
    <updated>2015-07-09T22:41:18-05:00</updated>
    <id>https://exceptionless.com/2015-07-09-exceptionless-documentation-has-moved-grown/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-13419&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/Exceptionless-documentation-github.png&quot; alt=&quot;Exceptionless-documentation-github&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;13419&quot; srcset=&quot;https://exceptionless.com/assets/Exceptionless-documentation-github.png 260w, https://exceptionless.com/assets/Exceptionless-documentation-github-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;The &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki&quot; target=&quot;_blank&quot;&gt;Exceptionless documentation has moved to GitHub&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Over the past few weeks, we have taken all the existing documentation on the docs subdomain and migrated it over to the respective GitHub repo.&lt;/p&gt;
&lt;p&gt;We also pulled out worthy examples, demos, and tutorials from past blog posts and created pages for those, so information is in a more centralized area that is hopefully easier for our users to locate and utilize.&lt;/p&gt;
&lt;p&gt;As new features, demos, examples, and clients come online, expect to see them added to the new documentation system and updated regularly.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Documentation Tour&lt;/h2&gt;
&lt;h3&gt;Primary Documentation (hub)&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/github-primary-docs.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-thumbnail wp-image-13414&quot; style=&quot;margin-left: 20px;&quot; src=&quot;http://exceptionless.com/assets/github-primary-docs-150x150.png&quot; alt=&quot;github-primary-docs&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13414&quot;&gt;&lt;/a&gt;This documentation contains all the documentation and details/usage for the platform’s features and dashboard/ui. That includes information on project settings, security, API usage, filtering &amp;amp; searching, email notifications, bulk actions, frequently asked questions, how to contribute to the project, and the basic requirements to run the platform.&lt;/p&gt;
&lt;p&gt;And, of course, you can get to the documentation for the individual clients (below) from this primary site as well.&lt;/p&gt;
&lt;p&gt;Basically, you can always start here and branch out to whatever client or feature you’re looking for documentation for.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki&quot; target=&quot;_blank&quot;&gt;Check it out!&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;.NET Client Documentation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/github-dotnet.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-thumbnail wp-image-13415&quot; style=&quot;margin-left: 20px;&quot; src=&quot;http://exceptionless.com/assets/github-dotnet-150x150.png&quot; alt=&quot;github-dotnet&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13415&quot;&gt;&lt;/a&gt;As you may have guessed, this documentation site resides within the Exceptionless.NET repo and contains .NET-specific info, examples, demos, and tutorials for different features. If you’re a .NET user, this should be where you look for examples if you’re just getting started or solutions to troubleshooting problems if you’ve run into a snag.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/wiki&quot; target=&quot;_blank&quot;&gt;View the .NET Docs&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;JavaScript / Node.js Client Documentation&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/github-javascript.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-thumbnail wp-image-13416&quot; style=&quot;margin-left: 20px;&quot; src=&quot;http://exceptionless.com/assets/github-javascript-150x150.png&quot; alt=&quot;github-javascript&quot; width=&quot;150&quot; height=&quot;150&quot; data-id=&quot;13416&quot;&gt;&lt;/a&gt;The newest addition to Exceptionless, our JavaScript / Node.js client, needs a place for documentation too! Naturally, that place is within the Exceptionless.JavaScript repo! Here you’ll find JavaScript-specific details, examples, and tutorials for things like configuring the cilent, sending events, self hosting, RequireJS, SystemJS, TypeScript, Express, and client configuration values.&lt;/p&gt;
&lt;p&gt;We really hope this helps users familiarize themselves with the JavaScript client and get the most benefit out of it. We know its flexibility will help a ton of developers get their apps in order.&lt;/p&gt;
&lt;h2&gt;You Can Contribute, Too!&lt;/h2&gt;
&lt;p&gt;Do you know something that could use a better example, description, or tutorial? Have you put together something that would add value for other Exceptionless users if added to the documentation? Shoot any thoughts, examples, feedback, or requests our way and we’ll make sure it gets handled properly.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-07-14-foundatio-pluggable-blocks-building-distributed-apps/"/>
    <updated>2015-07-14T12:18:58-05:00</updated>
    <id>https://exceptionless.com/2015-07-14-foundatio-pluggable-blocks-building-distributed-apps/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-13436&quot; style=&quot;margin-left: 10px;&quot; src=&quot;http://exceptionless.com/assets/foundatio-article-featured-image.png&quot; alt=&quot;Exceptionless Foundatio App Building Blocks&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;13436&quot; srcset=&quot;https://exceptionless.com/assets/foundatio-article-featured-image.png 260w, https://exceptionless.com/assets/foundatio-article-featured-image-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;In the process of developing Exceptionless, we realized there was a lack of good, simple, open source solutions for caching, queues, locks, messaging, jobs, file storage, and metrics when building scaleable applications.&lt;/p&gt;
&lt;p&gt;We tried an open source Redis cache client for caching, but it went commercial (expensive) and there wasn’t any in-memory implementations. For the message bus, we looked at &lt;a href=&quot;http://particular.net/nservicebus&quot; target=&quot;_blank&quot;&gt;NServiceBus&lt;/a&gt; (good product, high cost, not open source friendly) and &lt;a href=&quot;http://masstransit-project.com/&quot; target=&quot;_blank&quot;&gt;MassTransit&lt;/a&gt; (local setup a pain, Azure support lacking), but were left disappointed. For storage, we simply could not find a solution that was decoupled and supported in memory, file storage, or Azure Blog Storage.&lt;/p&gt;
&lt;p&gt;So, naturally, we built our own!&lt;/p&gt;
&lt;p&gt;Meet &lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot; target=&quot;_blank&quot;&gt;Foundatio&lt;/a&gt; – your key to painless, scalable development and testing for your app! Let’s take a look at some examples, below.&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://github.com/exceptionless/Foundatio&quot; target=&quot;_blank&quot;&gt;Try Foundatio Today&lt;/a&gt;
&lt;/div&gt;
&lt;!--more--&gt;
&lt;h2&gt;Using Foundatio&lt;/h2&gt;
&lt;p&gt;To start using Foundatio for your project, simply &lt;a href=&quot;https://www.nuget.org/packages?q=Foundatio&quot; target=&quot;_blank&quot;&gt;get the appropriate package from NuGet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below are small examples of what is possible with Foundatio caching, queues, locks, messaging, jobs, file storage, and metrics. We hope you find these explanations and samples useful, but please let us know if you have any questions or comments.&lt;/p&gt;
&lt;h3&gt;Caching&lt;/h3&gt;
&lt;p&gt;Foundatio provides four cache implementations, all derived from the &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Caching/ICacheClient.cs&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;ICacheClient&lt;/code&gt; interface&lt;/a&gt;, that save you expensive operations when creating or getting data by allowing you to store and access the data super fast.&lt;/p&gt;
&lt;p&gt;These implementations include &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Caching/InMemoryCacheClient.cs&quot; target=&quot;_blank&quot;&gt;InMemoryCacheClient&lt;/a&gt;, &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Caching/HybridCacheClient.cs&quot; target=&quot;_blank&quot;&gt;HybridCacheClient&lt;/a&gt;, &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Redis/Cache/RedisCacheClient.cs&quot; target=&quot;_blank&quot;&gt;RedisCacheClient&lt;/a&gt;, and &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Redis/Cache/RedisHybridCacheClient.cs&quot; target=&quot;_blank&quot;&gt;RedisHybridCacheClient&lt;/a&gt;. Learn more about each in the &lt;a href=&quot;https://github.com/exceptionless/Foundatio#caching&quot; target=&quot;_blank&quot;&gt;Foundatio Readme Caching section&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For Exceptionless, we use RedisHybridCacheClient to cache users, organizations, and projects, which has a huge performance boost since we don’t have to serialize the item if it’s in local memory cache.&lt;/p&gt;
&lt;h4&gt;Foundatio Caching Sample&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Foundatio.Caching;

ICacheClient cache = new InMemoryCacheClient();
cache.Set(&quot;test&quot;, 1);
var value = cache.Get&amp;lt;int&amp;gt;(&quot;test&quot;);
&lt;/pre&gt;
&lt;h3&gt;Queues&lt;/h3&gt;
&lt;p&gt;Foundatio includes three queue implementations, each derived from the &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Queues/IQueue.cs&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;IQueue&lt;/code&gt; interface&lt;/a&gt;, for First In, First Out (FIFO) message delivery. These include &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Queues/InMemoryQueue.cs&quot; target=&quot;_blank&quot;&gt;InMemoryQueue&lt;/a&gt;, &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Redis/Queues/RedisQueue.cs&quot; target=&quot;_blank&quot;&gt;RedisQueue&lt;/a&gt;, and &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Azure/Queues/ServiceBusQueue.cs&quot; target=&quot;_blank&quot;&gt;ServiceBusQueue&lt;/a&gt;. Read more in the &lt;a href=&quot;https://github.com/exceptionless/Foundatio#queues&quot; target=&quot;_blank&quot;&gt;queues section of the readme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Api/Controllers/EventController.cs#L420-L428&quot; target=&quot;_blank&quot;&gt;We use queues&lt;/a&gt;, along with Foundatio Storage (below) to queue events for Exceptionless. Using both allows us to keep payloads small and limit system load.&lt;/p&gt;
&lt;h4&gt;Foundatio Queue Example&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Foundatio.Queues;

IQueue queue = new InMemoryQueue();

queue.Enqueue(new SimpleWorkItem {
Data = &quot;Hello&quot;
});

var workItem = queue.Dequeue(TimeSpan.Zero);
&lt;/pre&gt;
&lt;h3&gt;Locks&lt;/h3&gt;
&lt;p&gt;To ensure any resource is only accessed by one consumer at any one time, use one of the two Foundatio Locks implementations, each derived from the &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Lock/ILockProvider.cs&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;ILockProvider&lt;/code&gt; interface&lt;/a&gt;. These implementations include &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Lock/CacheLockProvider.cs&quot; target=&quot;_blank&quot;&gt;CacheLockProvider&lt;/a&gt; and &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Lock/ThrottlingLockProvider.cs&quot; target=&quot;_blank&quot;&gt;ThrottlingLockProvider&lt;/a&gt;. These providers take an &lt;code&gt;ICacheClient&lt;/code&gt;, ensuring code locks across machines. &lt;a href=&quot;https://github.com/exceptionless/Foundatio#locks&quot; target=&quot;_blank&quot;&gt;Read more on the repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We use locks to only run single instances of jobs (below), and more.&lt;/p&gt;
&lt;h4&gt;Foundatio Locks Sample&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Foundatio.Lock;

ILockProvider locker = new CacheLockProvider(new InMemoryCacheClient());

using (locker) {
  locker.ReleaseLock(&quot;test&quot;);

  using (locker.AcquireLock(&quot;test&quot;, acquireTimeout: TimeSpan.FromSeconds(1))) {
    // ...
  }
}
&lt;/pre&gt;
&lt;h3&gt;Messaging&lt;/h3&gt;
&lt;p&gt;Derived from the &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Messaging/IMessageBus.cs&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;IMessageBus&lt;/code&gt; interface&lt;/a&gt;, our three message bus implementations let you publish and subscribe to messages within your application. Use the &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Messaging/InMemoryMessageBus.cs&quot; target=&quot;_blank&quot;&gt;InMemoryMessageBus&lt;/a&gt;, &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Redis/Messaging/RedisMessageBus.cs&quot; target=&quot;_blank&quot;&gt;RedisMessageBus&lt;/a&gt;,or &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Azure/Messaging/ServiceBusMessageBus.cs&quot; target=&quot;_blank&quot;&gt;ServiceBusMessageBus&lt;/a&gt; implementations based on your needs. &lt;a href=&quot;https://github.com/exceptionless/Foundatio#messaging&quot; target=&quot;_blank&quot;&gt;Read more about each implementation on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Api/Hubs/MessageBusHub.cs#L25-L32&quot; target=&quot;_blank&quot;&gt;Exceptionless utilizes the message bus&lt;/a&gt; extensively to pass messages such as events being created, stacks being changed, etc, throughout the system.&lt;/p&gt;
&lt;h4&gt;Foundatio Messaging Example&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Foundatio.Messaging;

IMessageBus messageBus = new InMemoryMessageBus();

using (messageBus) {
  messageBus.Subscribe&amp;lt;SimpleMessageA&amp;gt;(msg =&amp;gt; {
    // Got message
  });

  messageBus.Publish(new SimpleMessageA {
      Data = &quot;Hello&quot;
  });
}
&lt;/pre&gt;
&lt;h3&gt;Jobs&lt;/h3&gt;
&lt;p&gt;Run jobs by calling &lt;code&gt;Run()&lt;/code&gt; or passing it to the &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Jobs/JobRunner.cs&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;JobRunner&lt;/code&gt; class&lt;/a&gt;, which allows you to easily run jobs as Azure Web Jobs. All jobs are required to derive from the &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Jobs/JobBase.cs&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;JobBase&lt;/code&gt; class&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Around here, &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/tree/master/Source/Core/Jobs&quot; target=&quot;_blank&quot;&gt;we use the jobs feature&lt;/a&gt; for processing events, sending mail messages, and more. Some jobs, such as our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Jobs/DailySummaryJob.cs#L41-L43&quot; target=&quot;_blank&quot;&gt;DailySummaryJob&lt;/a&gt;, which we only want to run once, also use locks (above) to only run one instance.&lt;/p&gt;
&lt;h4&gt;Foundatio Jobs Sample&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Foundatio.Jobs;

public class HelloWorldJob : JobBase {
  public int RunCount { get; set; }

  protected override Task&amp;lt;JobResult&amp;gt; RunInternalAsync(CancellationToken token) {
    RunCount++;

    return Task.FromResult(JobResult.Success);
  }
}

var job = new HelloWorldJob();
job.Run(); // job.RunCount = 1;
job.RunContinuous(iterationLimit: 2); // job.RunCount = 3;
job.RunContinuous(token: new CancellationTokenSource(TimeSpan.FromMilliseconds(10)).Token); // job.RunCount &amp;gt; 10;
&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Job.exe -t &amp;quot;MyLib.HelloWorldJob,MyLib&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;File Storage&lt;/h3&gt;
&lt;p&gt;Derived from the &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Storage/IFileStorage.cs&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;IFileStorage&lt;/code&gt; interface&lt;/a&gt;, we offer three file storage implementations, including &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Storage/InMemoryFileStorage.cs&quot; target=&quot;_blank&quot;&gt;InMemoryFileStorage&lt;/a&gt;, &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Storage/FolderFileStorage.cs&quot; target=&quot;_blank&quot;&gt;FolderFileStorage&lt;/a&gt;, and &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/AzureStorage/Storage/AzureFileStorage.cs&quot; target=&quot;_blank&quot;&gt;AzureFileStorage&lt;/a&gt;. Read more on each in the &lt;a href=&quot;https://github.com/exceptionless/Foundatio#file-storage&quot; target=&quot;_blank&quot;&gt;ReadMe&lt;/a&gt;. &lt;em&gt;Using all &lt;code&gt;IFileStorage&lt;/code&gt; implementations as singletons is recommended.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;File storage is used by Exceptionless in conjunction with queues (above), among other things.&lt;/p&gt;
&lt;h4&gt;Foundatio File Storage Example&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Foundatio.Storage;

IFileStorage storage = new InMemoryFileStorage();
storage.SaveFile(&quot;test.txt&quot;, &quot;test&quot;);
string content = storage.GetFileContents(&quot;test.txt&quot;)
&lt;/pre&gt;
&lt;h3&gt;Metrics&lt;/h3&gt;
&lt;p&gt;Our three metric implementations derive from the &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Metrics/IMetricsClient.cs&quot; target=&quot;_blank&quot;&gt;&lt;code&gt;IMetricsClient&lt;/code&gt; interface&lt;/a&gt; and include &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Metrics/InMemoryMetricsClient.cs&quot; target=&quot;_blank&quot;&gt;InMemoryMetricsClient&lt;/a&gt;, &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/Core/Metrics/StatsDMetricsClient.cs&quot; target=&quot;_blank&quot;&gt;StatsDMetricsClient&lt;/a&gt;, and &lt;a href=&quot;https://github.com/exceptionless/Foundatio/blob/master/src/MetricsNET/MetricsNETClient.cs&quot; target=&quot;_blank&quot;&gt;MetricsNETClient&lt;/a&gt;. &lt;a href=&quot;https://github.com/exceptionless/Foundatio#metrics&quot; target=&quot;_blank&quot;&gt;Get the details on the repo&lt;/a&gt;. &lt;em&gt;Note that these implementations should be used as singletons.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Metrics are used throughout the Exceptionless system to provide insight into how the system is working and get external alerts if events are not processing or report how much load is on the current system.&lt;/p&gt;
&lt;h4&gt;Foundatio Metrics Sample&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;metrics.Counter(&quot;c1&quot;);
metrics.Gauge(&quot;g1&quot;, 2.534);
metrics.Timer(&quot;t1&quot;, 50788);
&lt;/pre&gt;
&lt;h2&gt;Development&lt;/h2&gt;
&lt;p&gt;If you would like to contribute to Foundatio, clone the repo and open the Foundatio.sln Visual Studio solution file to get started. Let us know if you have any questions or need any assistance.&lt;/p&gt;
&lt;h2&gt;The Future of Foundatio&lt;/h2&gt;
&lt;p&gt;As with any development project, Foundatio is a work in progress and we will continue developing it, however it is extremely stable and used in production by various companies, including Exceptionless (obviously). The next major steps are &lt;strong&gt;full Async support&lt;/strong&gt; (some implementations already have it), and &lt;strong&gt;vnext support&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Naturally, we want to know what you think and what we should work on next, so &lt;a href=&quot;https://github.com/exceptionless/Foundatio/issues&quot;&gt;please let us know&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-07-23-exceptionless-3-0-changes-to-build-process-dependencies-self-hosting/"/>
    <updated>2015-07-23T17:28:18-05:00</updated>
    <id>https://exceptionless.com/2015-07-23-exceptionless-3-0-changes-to-build-process-dependencies-self-hosting/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-13461&quot; src=&quot;http://exceptionless.com/assets/version-3-featured.png&quot; alt=&quot;version-3-featured&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;13461&quot; srcset=&quot;https://exceptionless.com/assets/version-3-featured.png 260w, https://exceptionless.com/assets/version-3-featured-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;Version 2.0 was a pretty big rewrite for us, and we’re happy with how everything played out, but that doesn’t mean we’re done!&lt;/p&gt;
&lt;p&gt;We’ve been working on 3.0, and it’s ready.&lt;/p&gt;
&lt;p&gt;What was the focus, you ask? To make life &lt;strong&gt;easier&lt;/strong&gt; for &lt;strong&gt;you&lt;/strong&gt;! We’ve simplified the build process, removed dependencies, and drastically improved the ease of self hosting.&lt;/p&gt;
&lt;p&gt;Check out the details, below, and upgrade today!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Removed Dependencies&lt;/h2&gt;
&lt;p&gt;Previously, MongoDB was a major dependency that increase the complexity of the overall project. All the data previously hosted in MongoDB is now hosted in ElasticSearch, making it &lt;strong&gt;super easy&lt;/strong&gt; for users to self host or develop Exceptionless since you only need to set up ElasticSearch (which you had to do anyway).&lt;/p&gt;
&lt;p&gt;With this, Redis is no longer configured by default, but you can set it up easily by setting the connection string. We definitely recommend using it.&lt;/p&gt;
&lt;p&gt;Removal of the MongoDB dependency brings us one step closer to running Exceptionless on vNext, on any operating system. We hope to achieve this soon, but do not have a timeline.&lt;/p&gt;
&lt;h2&gt;Easier Self Hosting&lt;/h2&gt;
&lt;p&gt;The goal is to make self hosting &lt;strong&gt;as easy as possible&lt;/strong&gt; so anyone can set it up and try Exceptionless out.&lt;/p&gt;
&lt;p&gt;With Exceptionless 3.0, we now have a single build artifact that contains bo the SPA app and the API end server, with default configuration. The ZIP file contains a batch file you can run to download and start ElasticSearch, launch IIS Express with a temp website, and load your browser automatically with the Exceptionless test instance. This lets you load up everything and play around with Exceptionless &lt;strong&gt;in a single click!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another change to the configuration is that you now have the ability to set every Exceptionless API Setting via Environmental Variables.&lt;/p&gt;
&lt;p&gt;Check out the documentation wiki for &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting&quot; target=&quot;_blank&quot;&gt;detailed Self Hosting Configuration docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Simplified Build Process&lt;/h2&gt;
&lt;p&gt;In order to make it easier and faster to deploy, we removed the &lt;a href=&quot;http://octopusdeploy.com/&quot; target=&quot;_blank&quot;&gt;OctopusDeploy&lt;/a&gt; build dependency and are now using &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/&quot; target=&quot;_blank&quot;&gt;Azure Git deploy&lt;/a&gt;, which pulls directly from a GitHub repository that contains the build artifacts.&lt;/p&gt;
&lt;p&gt;With this move, our mindset changed regarding the master branch. For us it means production, but for you it means that whatever is in our master branch is stable and currently deployed to live. We &lt;strong&gt;no longer have to wait&lt;/strong&gt; for a build to complete, create a production release in OctopusDeploy, then manually deploy it, we just commit to git and the rest is history!&lt;/p&gt;
&lt;p&gt;Expect more on this topic from us soon. In the mean time, enjoy the simplified build process.&lt;/p&gt;
&lt;h2&gt;Upgrading to 3.0&lt;/h2&gt;
&lt;p&gt;The only users that need to worry about upgrading anything for this new release are self hosters. If you are self hosting Exceptionless, please review the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting&quot; target=&quot;_blank&quot;&gt;Self Hosting Documentation&lt;/a&gt;, which contains information about upgrading your existing install.&lt;/p&gt;
&lt;h2&gt;So What?&lt;/h2&gt;
&lt;p&gt;Well, what all this means for you is that we will be able to update things much quicker, and that life just got way easier for all you self hosters out there!&lt;/p&gt;
&lt;p&gt;Let us know what else we can do to make life easier for you.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-07-29-self-hosting-exceptionless-free-and-fast/"/>
    <updated>2015-07-29T15:13:08-05:00</updated>
    <id>https://exceptionless.com/2015-07-29-self-hosting-exceptionless-free-and-fast/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-13489&quot; src=&quot;http://exceptionless.com/assets/blog-header-image-self-hosting.jpg&quot; alt=&quot;Self Hosting Exceptionless&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;13489&quot; srcset=&quot;https://exceptionless.com/assets/blog-header-image-self-hosting.jpg 708w, https://exceptionless.com/assets/blog-header-image-self-hosting-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;&lt;strong&gt;Self hosting allows you to run your own instance of &lt;a href=&quot;http://exceptionless.com/&quot; target=&quot;_blank&quot;&gt;Exceptionless&lt;/a&gt;, our real-time error, feature, and log reporting tool, on your own systems – FOR FREE!&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Not Just Free, but Fast!&lt;/h2&gt;
&lt;p&gt;When developing &lt;a href=&quot;http://exceptionless.com/exceptionless-3-0-changes-to-build-process-dependencies-self-hosting/&quot; target=&quot;_blank&quot;&gt;Exceptionless 3.0&lt;/a&gt;, we put extensive focus on making self hosting much easier, and therefore more viable, for our users.&lt;/p&gt;
&lt;p&gt;It is now possible to get a test environment up and running on your local machine in &lt;strong&gt;only a few minutes&lt;/strong&gt;, and production environments can be set up very quickly as well.&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting&quot; target=&quot;_blank&quot;&gt;Self Host Today!&lt;/a&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  Or continue reading for more information and a demonstration.
&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;How Easy? Super Easy!&lt;/h2&gt;
&lt;h3&gt;Demo Time!&lt;/h3&gt;
&lt;p&gt;Getting your self hosted instance of Exceptionless up and running is super easy. In the video below, Blake does the entire install on his local machine and is sending events to Exceptionless in &lt;strong&gt;less than 2 minutes!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Please note that you should review the requirements on the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting&quot; target=&quot;_blank&quot;&gt;Self Hosting Documentation&lt;/a&gt; page before installing your own instance.&lt;/p&gt;
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;/div&gt;
&lt;h2&gt;We’re Always Improving&lt;/h2&gt;
&lt;p&gt;Exceptionless has come a long way, and it’s only going to get easier, faster, and more robust moving forward. Our users are a huge part of that, so please &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues&quot; target=&quot;_blank&quot;&gt;submit an issue on GitHub&lt;/a&gt; or send us an in-app message if you have any feedbacks, bugs, installation questions, etc. Thanks!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-08-17-user-spotlight-fun-stats-thanks-users/"/>
    <updated>2015-08-17T13:57:40-05:00</updated>
    <id>https://exceptionless.com/2015-08-17-user-spotlight-fun-stats-thanks-users/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-13533&quot; src=&quot;http://exceptionless.com/assets/blog-header-image-small-growth.png&quot; alt=&quot;Exceptionless Growth Statistics&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;13533&quot; srcset=&quot;https://exceptionless.com/assets/blog-header-image-small-growth.png 260w, https://exceptionless.com/assets/blog-header-image-small-growth-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;This month (Aug, ’15) we will surpass &lt;strong&gt;5 MILLION EVENTS PER MONTH!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s pretty huge, so we thought we would celebrate by &lt;strong&gt;highlighting a few of the awesome companies&lt;/strong&gt; that use Exceptionless and throw out a some pretty cool statistics we dug up from the database.&lt;/p&gt;
&lt;p&gt;If your company isn’t on this list, don’t worry – it’s not because we don’t love you! If you would like your company highlighted on the website, simply send us an in-app message explaining how Exceptionless has helped you squash bugs and improve your development.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Fun Stats&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Nearly &lt;strong&gt;2000 ACTIVE projects&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;More than &lt;strong&gt;1350 ACTIVE organizations&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Right at &lt;strong&gt;100 new organizations&lt;/strong&gt; and &lt;strong&gt;140 new users&lt;/strong&gt; per month!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;800,000 new events each month&lt;/strong&gt;, month over month – &lt;strong&gt;4,600,000&lt;/strong&gt; total in July!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;A Few of Our Awesome Users/Companies&lt;/h2&gt;
&lt;h3&gt;User Report&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.userreport.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-13510&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/userreport_logo_cmyk.png&quot; alt=&quot;userreport_logo_cmyk&quot; width=&quot;277&quot; height=&quot;55&quot; data-id=&quot;13510&quot;&gt;&lt;/a&gt;User Report is an online survey and feedback tool used to collect information about and from website visitors. The data User Report’s tools identifies is useful in usability studies, helps websites better identify their demographics, gives users an easy way to provide feedback, and more. The company’s solutions are used by ebay, Toyota, National Geographic, and other large national and international brands.&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href=&quot;http://www.userreport.com/&quot; target=&quot;_blank&quot;&gt;User Report website&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;h3&gt;eMarketer&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.emarketer.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-13515&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/eMarketerLogo-black-300x93.png&quot; alt=&quot;eMarketerLogo-black&quot; width=&quot;300&quot; height=&quot;93&quot; data-id=&quot;13515&quot; srcset=&quot;https://exceptionless.com/assets/eMarketerLogo-black-300x93.png 300w, https://exceptionless.com/assets/eMarketerLogo-black.png 424w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;Used by Facebook, MasterCard, and other large worldwide brands, &lt;a href=&quot;http://www.emarketer.com/&quot; target=&quot;_blank&quot;&gt;eMarketer&lt;/a&gt; provides insights into the digital marketing world by providing customers with the information they need to run their business effectively and efficiently online. This information includes industry-specific research, insights, and benchmarks.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“Exceptionless allows us to prioritize fixes smarter by showing frequently occurring errors. In real time!” – Ryan Hoffman, eMarketer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Actipro Software&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.actiprosoftware.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-13513 size-full&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/PageHeaderCompanyLogo.png&quot; alt=&quot;PageHeaderCompanyLogo&quot; width=&quot;236&quot; height=&quot;64&quot; data-id=&quot;13513&quot;&gt;&lt;/a&gt;Actipro Software provides industry-leading .NET user interface controls for a variety of frameworks, including WPF, WinRT, Silverlight, and WinForms. They are known for their syntax-highlighting code editor control, SyntaxEditor, among other things.&lt;/p&gt;
&lt;p&gt;.NET developers should definitely check out &lt;a href=&quot;http://www.actiprosoftware.com/&quot; target=&quot;_blank&quot;&gt;Actipro Software&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Beth Israel Deaconess Medical Center – Harvard Medical School Teaching Hospital&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.bidmc.org/&quot; target=&quot;_blank&quot;&gt;BIDMC &lt;/a&gt;is one of the nation’s preeminent academic medical centers focusing on excellence in clinical care, research, and education.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.bidmc.org/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13522 size-full&quot; src=&quot;http://exceptionless.com/assets/header_logo.png&quot; alt=&quot;header_logo&quot; width=&quot;428&quot; height=&quot;86&quot; data-id=&quot;13522&quot; srcset=&quot;https://exceptionless.com/assets/header_logo.png 428w, https://exceptionless.com/assets/header_logo-300x60.png 300w&quot; sizes=&quot;(max-width: 428px) 100vw, 428px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“The primary reasons that we switched to Exceptionless from our own code is that Exceptionless captures additional detail (including code line numbers), Exceptionless has a better interface and design for reviewing and managing errors and bugs (including summary views that we didn’t previously have), and we no longer need to maintain our own error-logging code.” – Philip Dickerson, BIDMC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;LegalDesk&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://legaldesk.it/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-13512&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/legaldesk.logo_-150x150.png&quot; alt=&quot;legaldesk.logo&quot; width=&quot;100&quot; height=&quot;100&quot; data-id=&quot;13512&quot; srcset=&quot;https://exceptionless.com/assets/legaldesk.logo_-150x150.png 150w, https://exceptionless.com/assets/legaldesk.logo_-300x300.png 300w, https://exceptionless.com/assets/legaldesk.logo_.png 1000w&quot; sizes=&quot;(max-width: 100px) 100vw, 100px&quot;&gt;&lt;/a&gt;LegalDesk is software designed for managing law firms or independent legal practices and includes everything from document organization and sharing to timesheets and finances/billing.&lt;/p&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://legaldesk.it/&quot; target=&quot;_blank&quot;&gt;LegalDesk’s Website&lt;/a&gt; (Italian)&lt;/p&gt;
&lt;h3&gt;CodeSmith Tools&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.codesmithtools.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-13516&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/codesmith-tools-large-300x51.png&quot; alt=&quot;codesmith-tools-large&quot; width=&quot;300&quot; height=&quot;51&quot; data-id=&quot;13516&quot; srcset=&quot;https://exceptionless.com/assets/codesmith-tools-large-300x51.png 300w, https://exceptionless.com/assets/codesmith-tools-large.png 594w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;CodeSmith Tools is a Dallas-based software development company focused on creating software tools that increase developer productivity. Their flagship product, CodeSmith Generator, has seen huge success over the years as a template driven source code generator that automates common application source code creation for text-based languages. They also provide a variety of frameworks for generating proven architectures.&lt;/p&gt;
&lt;p&gt;Learn more about &lt;a href=&quot;http://www.codesmithtools.com/product/generator&quot; target=&quot;_blank&quot;&gt;CodeSmith Generator&lt;/a&gt; or CodeSmith’s other &lt;a href=&quot;http://www.codesmithtools.com/product/frameworks&quot; target=&quot;_blank&quot;&gt;Frameworks&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;IKA&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://ika.in/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-13523&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/imagesX-e1439833186121.png&quot; alt=&quot;imagesX&quot; width=&quot;150&quot; height=&quot;33&quot; data-id=&quot;13523&quot;&gt;&lt;/a&gt;IKA is a laboratory equipment maker in the research and development field that builds innovative magnetic stirrers, mixers, overhead stirrers, shakers, homogenizers, mills, rotary evaporators, calorimeters, laboratory reactors and the specially developed software for analysis applications.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“I’m using Exceptionless to report bugs /crashes which I encounter routinely while testing the UI. It helps me zero in on what could be the issue, AND have a documented track of what all errors I’ve seen… I’d say that Exceptionless helps me find all the bugs which I’d have to spend more time on zeroing in on, faster.” – Bharat Mallapur, IKA&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Want to learn more, visit &lt;a href=&quot;http://ika.in/&quot; target=&quot;_blank&quot;&gt;IKA.in&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Teamaton&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.teamaton.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-13517&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/logo-tagline-teamaton-300x78.png&quot; alt=&quot;logo-tagline-teamaton&quot; width=&quot;300&quot; height=&quot;78&quot; data-id=&quot;13517&quot; srcset=&quot;https://exceptionless.com/assets/logo-tagline-teamaton-300x78.png 300w, https://exceptionless.com/assets/logo-tagline-teamaton.png 822w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;Teamaton is a small software development company focused on creating user-friendly and profitable web applications for its clients using .NET technologies.&lt;/p&gt;
&lt;p&gt;Right now, Teamaton is working on an intuitive time tracking tool where they have implemented Exceptionless to monitor errors during development.&lt;/p&gt;
&lt;p&gt;Learn more at &lt;a href=&quot;http://www.teamaton.com/&quot; target=&quot;_blank&quot;&gt;Teamaton.com&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;The Agileist&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://theagileist.com/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-13514&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/the-agileist-300x124.png&quot; alt=&quot;the-agileist&quot; width=&quot;300&quot; height=&quot;124&quot; data-id=&quot;13514&quot; srcset=&quot;https://exceptionless.com/assets/the-agileist-300x124.png 300w, https://exceptionless.com/assets/the-agileist.png 962w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;The Agileist is a development company based in Kansas City that specializes in Azure web development, systems development, and systems integration in an agile environment.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://theagileist.com/&quot; target=&quot;_blank&quot;&gt;TheAgileist.com&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Thanks Again!&lt;/h2&gt;
&lt;p&gt;Once again, we’d like to extend our thanks to all the awesome users we have that make Exceptionless such a great project to work on and use. Everyone has provided excellent feedback, allowing us to continue pushing towards a faster, more efficient, more effective solution for all your error and event reporting needs.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-08-27-squash-bugs-faster-speed-up-development-with-exceptionless/"/>
    <updated>2015-08-27T12:38:19-05:00</updated>
    <id>https://exceptionless.com/2015-08-27-squash-bugs-faster-speed-up-development-with-exceptionless/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-13638&quot; src=&quot;http://exceptionless.com/assets/blog-header-image-js-demo.jpg&quot; alt=&quot;Developer Bug Tracking&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;13638&quot; srcset=&quot;https://exceptionless.com/assets/blog-header-image-js-demo.jpg 708w, https://exceptionless.com/assets/blog-header-image-js-demo-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;h2 style=&quot;margin-top: 30px;&quot;&gt;
  Calling All Developers!
&lt;/h2&gt;
&lt;h3 style=&quot;font-size: 18px; line-height: 26px; color: #555; margin-bottom: 20px;&quot;&gt;
  &lt;strong&gt;Stop&lt;/strong&gt; beating your head against the keyboard tracking down those hard-to-find bugs and cut down your development time in general by using Exceptionless to &lt;strong&gt;report and log errors, feature usages, and any other event&lt;/strong&gt; within your project.
&lt;/h3&gt;
&lt;p style=&quot;clear: both;&quot;&gt;
  We&amp;#8217;re not just for &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net&quot; target=&quot;_blank&quot;&gt;.NET developers&lt;/a&gt; anymore. Our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;JavaScript client&lt;/a&gt; allows you to use Exceptionless in almost &lt;strong&gt;any development environment&lt;/strong&gt;, and you can get it up and running in minutes!
&lt;/p&gt;
&lt;p style=&quot;clear: both;&quot;&gt;
  Learn more below, including how to get started in &lt;strong&gt;just about a minute and a half&lt;/strong&gt;!&lt;!--more--&gt;
&lt;/p&gt;
&lt;p style=&quot;text-align: center; padding: 20px 0; background: #f6f6f6; margin-top: 30px;&quot;&gt;
  &lt;span style=&quot;text-decoration: underline;&quot;&gt;Now Serving&amp;#8230;&lt;/span&gt;&lt;br&gt; &lt;span style=&quot;color: #777; font-size: 24px; line-height: 28px;&quot;&gt;&lt;strong&gt;5,000,000+ Events Per Month&lt;br&gt; 2000+ Active Projects&lt;/strong&gt;&lt;/span&gt;
&lt;/p&gt;
&lt;blockquote style=&quot;margin-top: 40px;&quot;&gt;
  &lt;p&gt;
    “Exceptionless is &lt;strong&gt;awesome&lt;/strong&gt;. I&amp;#8217;ve &lt;strong&gt;STOPPED&lt;/strong&gt; worrying about whether I&amp;#8217;m losing customers to bugs I don&amp;#8217;t know about.” &amp;#8211; Eric B.
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13619 size-full&quot; src=&quot;http://exceptionless.com/assets/codesmith-client-logo-bar-left-short.png&quot; alt=&quot;&quot; width=&quot;585&quot; height=&quot;97&quot; data-id=&quot;13594&quot; srcset=&quot;https://exceptionless.com/assets/codesmith-client-logo-bar-left-short.png 585w, https://exceptionless.com/assets/codesmith-client-logo-bar-left-short-300x50.png 300w&quot; sizes=&quot;(max-width: 585px) 100vw, 585px&quot;&gt; 
&lt;h2&gt;Up &amp;amp; Running In Minutes&lt;/h2&gt;
&lt;p&gt;This 1:37 video demonstrates how quick and easy it is to get the Exceptionless JavaScript client up and running. Take a few minutes to integrate it with your project and &lt;strong&gt;gain visibility you’ve never had before&lt;/strong&gt; on bugs, feature usages, and more!&lt;/p&gt;
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;/div&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13620 size-full&quot; style=&quot;margin-top: 20px;&quot; src=&quot;http://exceptionless.com/assets/codesmith-client-logo-bar-right-short.png&quot; alt=&quot;&quot; width=&quot;585&quot; height=&quot;97&quot; data-id=&quot;13593&quot; srcset=&quot;https://exceptionless.com/assets/codesmith-client-logo-bar-right-short.png 585w, https://exceptionless.com/assets/codesmith-client-logo-bar-right-short-300x50.png 300w&quot; sizes=&quot;(max-width: 585px) 100vw, 585px&quot;&gt; 
&lt;h2&gt;&lt;strong&gt;IT’S. THAT. EASY.&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote style=&quot;margin-top: 20px;&quot;&gt;
  &lt;p&gt;
    “Exceptionless allows us to prioritize fixes smarter by showing frequently occurring errors. In real time!” &amp;#8211; Ryan H.
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The only thing you need to get started is a &lt;a href=&quot;https://be.exceptionless.io/signup&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;free&lt;/strong&gt; Exceptionless account&lt;/a&gt;, or you can even &lt;a href=&quot;http://exceptionless.com/self-hosting-exceptionless-free-and-fast/&quot; target=&quot;_blank&quot;&gt;host it yourself&lt;/a&gt;! Once you have that, you can user the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;JavaScript &lt;/a&gt;or .&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net&quot; target=&quot;_blank&quot;&gt;NET&lt;/a&gt; client to get started pushing events to your new dashboard.&lt;/p&gt;
&lt;p&gt;Then you’ll be on your way to becoming… &lt;strong&gt;Exceptionless&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;signup center&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://be.exceptionless.io/signup&quot; target=&quot;_blank&quot;&gt;Sign Up Today &amp;#8211; FREE&lt;/a&gt;
&lt;/div&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-09-02-find-software-bugs-exceptionless-javascript-client/"/>
    <updated>2015-09-02T11:46:26-05:00</updated>
    <id>https://exceptionless.com/2015-09-02-find-software-bugs-exceptionless-javascript-client/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13683 size-full&quot; src=&quot;http://exceptionless.com/assets/blog-header-image-post2b.png&quot; alt=&quot;Exceptionless JavaScript Client&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;13679&quot; srcset=&quot;https://exceptionless.com/assets/blog-header-image-post2b.png 708w, https://exceptionless.com/assets/blog-header-image-post2b-300x106.png 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;  
If you missed our &lt;a href=&quot;https://exceptionless.com/javascript-node-js-client-version-1-release-candidate/&quot; target=&quot;_blank&quot;&gt;JavaScript Client announcement&lt;/a&gt;, this is a great chance to see just how **quick and easy** the client is to install and use! You can be finding those hard to track down bugs, errors, and exceptions, as well as tracking other events and log messages, in literally minutes.
&lt;p&gt;We’ve made it super easy to get up and running, as you’ll see below. Take a look and let us know what you think!&lt;/p&gt;
&lt;h2&gt;Report &amp;amp; Log Errors &amp;amp; Events in 1:37&lt;/h2&gt;
&lt;!--more--&gt;
&lt;div class=&quot;videoWrapper&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;signup center&quot; style=&quot;margin-top: 30px;&quot;&gt;
  &lt;a class=&quot;btn btn-large btn-primary&quot; href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;Try It Today&lt;/a&gt;
&lt;/div&gt;
&lt;h2&gt;The Text Version&lt;/h2&gt;
&lt;p&gt;A simple &lt;strong&gt;step-by-step guide&lt;/strong&gt; to getting the Exceptionless JavaScript Client demo up and running on your local machine.&lt;/p&gt;
&lt;p&gt;The only &lt;strong&gt;pre-requisite&lt;/strong&gt; is an &lt;a href=&quot;https://be.exceptionless.io/signup&quot; target=&quot;_blank&quot;&gt;Exceptionless account&lt;/a&gt;, or you can &lt;a href=&quot;http://exceptionless.com/self-hosting-exceptionless-free-and-fast/&quot; target=&quot;_blank&quot;&gt;host the entire platform yourself&lt;/a&gt;. &lt;strong&gt;Open source&lt;/strong&gt;, baby!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download and extract the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot; target=&quot;_blank&quot;&gt;Exceptionless JavaScript Client&lt;/a&gt; from GitHub&lt;/li&gt;
&lt;li&gt;Log in to your &lt;a href=&quot;https://be.exceptionless.io/&quot; target=&quot;_blank&quot;&gt;Exceptionless Dashboard&lt;/a&gt; and get your project’s API key (Admin &amp;gt; Projects &amp;gt; &lt;em&gt;Select Project&lt;/em&gt; &amp;gt; API Keys)
&lt;ul&gt;
&lt;li&gt;If you don’t have a project, you’ll need to create one by going to Admin &amp;gt; Projects &amp;gt; Add New Project&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open the extracted folder on your local machine and go to the “example” folder, then edit index.html.&lt;/li&gt;
&lt;li&gt;Replace the API key in the exceptionless.js script tag with your own, and comment out the line with serverURL in it (not needed for demo).&lt;/li&gt;
&lt;li&gt;Open index.html in your browser and open your browser’s developer tools console so we can see the events fire.
&lt;ul&gt;
&lt;li&gt;We’ve added quick-fire buttons to this page that automatically generate events for you to play around with for the purpose of this demo.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click on one, generate 100 random events for instance, and you’ll see the events queue up in the console. After a few seconds, you should see a queue processing notification telling you it’s done processing.&lt;/li&gt;
&lt;li&gt;Go back to your Exceptionless project dashboard, and you will see the events hit the system in real time.
&lt;ul&gt;
&lt;li&gt;Make sure you are viewing the appropriate project and time period in your dashboard, otherwise you might not see the new events come in.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;It’s That Easy!&lt;/h3&gt;
&lt;p&gt;As you can see, the JavaScript client is super easy, super fast, and super flexible, for use in almost any project you might have.&lt;/p&gt;
&lt;p&gt;We hope you’ll give it a shot, and we also hope you’ll let us know what you think by contacting us via an in-app message, &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/issues&quot; target=&quot;_blank&quot;&gt;submitting an issue on GitHub&lt;/a&gt;, or &lt;a href=&quot;http://exceptionless.com/contact/&quot; target=&quot;_blank&quot;&gt;through the website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Here’s to becoming Exceptionless!&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-10-22-introducing-foundatio-3-0-async-efficiency/"/>
    <updated>2015-10-22T10:25:15-05:00</updated>
    <id>https://exceptionless.com/2015-10-22-introducing-foundatio-3-0-async-efficiency/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-13931&quot; style=&quot;margin-left: 15px;&quot; src=&quot;https://exceptionless.com/assets/foundatio-blog-header-image-small.png&quot; alt=&quot;Foundatio 3.0&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;13931&quot;&gt;Foundatio is a pluggable, scalable, painless, open source solution for caching, queues, locks, messaging, jobs, file storage, and metrics in your app.&lt;/p&gt;
&lt;p&gt;In Version 3.0, we’ve made several improvements, including, as promised in our &lt;a href=&quot;https://exceptionless.com/foundatio-pluggable-blocks-building-distributed-apps/&quot; target=&quot;_blank&quot;&gt;initial Foundatio blog post&lt;/a&gt;, going full async.&lt;/p&gt;
&lt;p&gt;Take a closer look at the new enhancements, below, and &lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot; target=&quot;_blank&quot;&gt;head over to the GitHub repo&lt;/a&gt; to try Foundatio today. We think you’ll find it very handy.&lt;/p&gt;
&lt;p&gt;For all our current users, you’ll need to upgrade your &lt;a href=&quot;https://www.nuget.org/packages?q=Foundatio&quot; target=&quot;_blank&quot;&gt;Foundatio NuGet package&lt;/a&gt; and existing Foundatio code to use the async implementations/conventions. The update should be fairly straightforward – we haven’t had or heard of any issues so far, including when upgrading Exceptionless.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;What’s New in Foundatio 3.0&lt;/h2&gt;
&lt;h3&gt;API Changes&lt;/h3&gt;
&lt;p&gt;We’ve gone &lt;strong&gt;100% async&lt;/strong&gt;, which means no more blocking synchronous code, allowing your apps to be even more responsive. For more on async and its benefits, &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/vstudio/hh191443(v=vs.140).aspx&quot; target=&quot;_blank&quot;&gt;take a look at this Microsoft article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Along with going completely async, we’ve &lt;strong&gt;removed non async methods&lt;/strong&gt; from the API and &lt;strong&gt;simplified the API overall&lt;/strong&gt;. We wanted to make it easy for developers to roll out new implementations and use the existing API.&lt;/p&gt;
&lt;h4&gt;New methods&lt;/h4&gt;
&lt;p&gt;We also &lt;strong&gt;added new, useful methods&lt;/strong&gt; across all the APIs to make it easier to perform common tasks. One example includes adding CalculateProgress() to WorkItemHandlerJobs. We hope these helpers allow you to be more productive.&lt;/p&gt;
&lt;h3&gt;Efficiency Improvements&lt;/h3&gt;
&lt;p&gt;Because we always want more speed out of our apps (and we know you do, too), we used Red Gate’s &lt;a href=&quot;http://www.red-gate.com/products/dotnet-development/ants-performance-profiler/&quot; target=&quot;_blank&quot;&gt;ANTS Performance Profiler&lt;/a&gt; to profile various apps, such as Exceptionless, and track down “hot” sections of code. By hot, we mean those pieces of code devoured more resources and took longer to run than all other application code. By doing so, we were able to pinpoint core pieces of Foundatio that were performing poorly compared to what they could be doing. &lt;strong&gt;Then we fixed them.&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;A few optimization examples&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Maintenance code&lt;/strong&gt; in various locations like queues, caches, etc, could and would run in a tight loop, sometimes pegging the CPU to 100% depending on the configuration. By running through and removing that maintenance code, or changing the way it was implemented to be triggered only when needed, rather than running in a constant worker loop, we drastically reduced CPU load and increased efficiency.&lt;/li&gt;
&lt;li&gt;We also made &lt;strong&gt;massive improvements to queues and locks&lt;/strong&gt;, on top of the maintenance code changes. Our Dequeue and AcquireLock methods would constantly pull for new items in a loop with a small timeout, which is obviously inefficient. Now we are using &lt;a href=&quot;https://github.com/StephenCleary/AsyncEx/wiki/AsyncMonitor&quot; target=&quot;_blank&quot;&gt;async monitors&lt;/a&gt; and pulse when a message is received over the message bus. This allows for &lt;strong&gt;huge improvements&lt;/strong&gt; as the code will wait/sleep for a single monitor (of multiple monitors that could be waiting) to get triggered. This means your app isn’t wasting CPU cycles waiting, or external network calls looking for locks or new queue items. Instead, it’s running your app code and getting immediately notified when the lock is available or a new queue item is enqueued. Pretty slick!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Caching&lt;/strong&gt; got a huge performance boost, too. For InMemoryCache clients, we moved from reflection-based object copying to using &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/bb397951.aspx&quot; target=&quot;_blank&quot;&gt;Expression Trees&lt;/a&gt;. This reduced the time required to get items from cache by a large percentage. Read more about implementing Expression Trees and see the difference it makes &lt;a href=&quot;http://blog.nuclex-games.com/mono-dotnet/fast-deep-cloning/&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Check It Out – Feedback Appreciated!&lt;/h2&gt;
&lt;p&gt;We made many other improvements to ensure your apps run fast when using Foundatio, too many to be listed here. If you’re already using it, just update your NuGet package to the latest version to take advantage of these improvements. If you’re not using it yet, &lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot; target=&quot;_blank&quot;&gt;try it out&lt;/a&gt;. It’s worth a shot, we promise!&lt;/p&gt;
&lt;p&gt;Once you’ve given it a go, please let us know what you like, or what you hate, by posting a &lt;a href=&quot;https://github.com/exceptionless/Foundatio/issues&quot; target=&quot;_blank&quot;&gt;issue on Foundatio’s GitHub Repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Until next time, happy coding!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-10-26-javascript-client-v1-1-0-release/"/>
    <updated>2015-10-26T14:05:59-05:00</updated>
    <id>https://exceptionless.com/2015-10-26-javascript-client-v1-1-0-release/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-13683&quot; src=&quot;http://exceptionless.com/assets/blog-header-image-post2b-300x106.png&quot; alt=&quot;Exceptionless JavaScript Client&quot; width=&quot;300&quot; height=&quot;106&quot; data-id=&quot;13683&quot; srcset=&quot;https://exceptionless.com/assets/blog-header-image-post2b-300x106.png 300w, https://exceptionless.com/assets/blog-header-image-post2b.png 708w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;We’ve been hard at work on several things here at Exceptionless, including a minor version release of our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript&quot;&gt;JavaScript Client&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Please see the details of this release below.&lt;/p&gt;
&lt;p&gt;Also, we would like to give a shout out to &lt;a href=&quot;https://github.com/frankebersoll&quot;&gt;@frankerbersoll&lt;/a&gt;, &lt;a href=&quot;https://github.com/srijken&quot;&gt;@srijken&lt;/a&gt; and the entire community for help squashing bugs, reporting issues, and providing general feedback. You guys rock.&lt;/p&gt;
&lt;h2&gt;Exceptionless JavaScript Client V1.1.0 Release Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Improved readme and wiki. [&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/pull/31&quot;&gt;issue thread&lt;/a&gt;] // &lt;em&gt;Credit: &lt;a href=&quot;https://github.com/frankebersoll&quot;&gt;@frankebersoll&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Bug Fix – Unhandled exceptiones in Node.js were not being capture. [&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/pull/30&quot;&gt;issue thread&lt;/a&gt;] // &lt;em&gt;Credit: &lt;a href=&quot;https://github.com/frankebersoll&quot;&gt;@frankebersoll&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Bug Fix – Data exclusions were not always working. [&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/pull/28&quot;&gt;issue thread&lt;/a&gt;] // &lt;em&gt;Credit: &lt;a href=&quot;https://github.com/srijken&quot;&gt;@srijken&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Bug Fix – Cancelled state wasn’t properly passed through the SubmitEvent callback.&lt;/li&gt;
&lt;li&gt;Temporarily disabled capturing of ajax errors [&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/issues/26&quot;&gt;issue thread&lt;/a&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/compare/v1.0.1...v1.1.0&quot;&gt;view the full change log&lt;/a&gt; for a list of all changes in this release.&lt;/p&gt;
&lt;p&gt;You can also &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/releases/tag/v1.1.0&quot;&gt;Download Exceptionless JavaScript Client V1.1.0&lt;/a&gt; on the official release page.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-10-28-exceptionless-3-1-released-if-you-thought-it-was-fast-before/"/>
    <updated>2015-10-28T13:33:05-05:00</updated>
    <id>https://exceptionless.com/2015-10-28-exceptionless-3-1-released-if-you-thought-it-was-fast-before/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-13736&quot; style=&quot;margin-left:15px;&quot; src=&quot;http://exceptionless.com/assets/exceptionles-3-1-header.png&quot; alt=&quot;exceptionles-3-1-header&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;13736&quot; srcset=&quot;https://exceptionless.com/assets/exceptionles-3-1-header.png 260w, https://exceptionless.com/assets/exceptionles-3-1-header-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;If you thought Exceptionless was fast before, &lt;strong&gt;prepare to have your mind blown&lt;/strong&gt; by what we’ve been able to do in version 3.1, which released today.&lt;/p&gt;
&lt;p&gt;In short, we’ve reduced cpu and memory usage, increase caching efficiency, and sped up searching, all quite significantly as you’ll see below.&lt;/p&gt;
&lt;p&gt;Along with these speed boosts, we’ve also made Job improvements (look for a blog post on this soon) and upgraded to .NET 4.6 (&lt;strong&gt;self-hosters&lt;/strong&gt;, please install .NET 4.6 on your servers before upgrading).&lt;/p&gt;
&lt;p&gt;Details on the release changes can be found below.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;It’s All About Speed!&lt;/h2&gt;
&lt;h3&gt;CPU &amp;amp; Memory&lt;/h3&gt;
&lt;p&gt;We reduced the CPU and Memory load &lt;strong&gt;across the entire app&lt;/strong&gt;. This allows the application to use fewer resources, meaning it has more time to process additional events, making everything faster. Between making Exceptionless and &lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot;&gt;Foundatio&lt;/a&gt; 100% Async and these improvements, we’ve drastically increased the efficiency of the entire platform.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Below&lt;/strong&gt;, we see the increase in performance from two examples. On the left, we see a reduction in CPU and Memory usage for a deployed web app instance. On the right is a visible reduction in CPU usage for an Elasticsearch node.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/cpu-memory-percentage-improvements.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13721 size-large&quot; src=&quot;http://exceptionless.com/assets/cpu-memory-percentage-improvements-e1446046152986-1024x343.png&quot; alt=&quot;cpu-memory-percentage-improvements&quot; width=&quot;940&quot; height=&quot;315&quot; data-id=&quot;13721&quot; srcset=&quot;https://exceptionless.com/assets/cpu-memory-percentage-improvements-e1446046152986-1024x343.png 1024w, https://exceptionless.com/assets/cpu-memory-percentage-improvements-e1446046152986-300x100.png 300w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Elasticsearch Queries&lt;/h3&gt;
&lt;p&gt;By profiling the Elasticsearch queries for efficiency and usage, we’ve been able to reduce the overall number we were running and improve the efficiency on the ones that still are.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/search-request-rate-improvements.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13723 size-full&quot; src=&quot;http://exceptionless.com/assets/search-request-rate-improvements-e1446046076483.png&quot; alt=&quot;search-request-rate-improvements&quot; width=&quot;485&quot; height=&quot;221&quot; data-id=&quot;13723&quot; srcset=&quot;https://exceptionless.com/assets/search-request-rate-improvements-e1446046076483.png 485w, https://exceptionless.com/assets/search-request-rate-improvements-e1446046076483-300x137.png 300w&quot; sizes=&quot;(max-width: 485px) 100vw, 485px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Caching&lt;/h3&gt;
&lt;p&gt;Caching efficiency has been improved by removing redundant components that were utilizing valuable resources. For example, we removed the SignalR Redis Backplane, which drastically decreased the number of calls to Redis. Overall, we’ve made the app smarter throughout regarding how we cache and retrieve data.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/cache-improvements-2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13724 size-large&quot; src=&quot;http://exceptionless.com/assets/cache-improvements-2-e1446046201498-1024x346.png&quot; alt=&quot;cache-improvements-2&quot; width=&quot;940&quot; height=&quot;318&quot; data-id=&quot;13724&quot; srcset=&quot;https://exceptionless.com/assets/cache-improvements-2-e1446046201498-1024x346.png 1024w, https://exceptionless.com/assets/cache-improvements-2-e1446046201498-300x101.png 300w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/Caching-improvements-e1446046263253.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-medium wp-image-13725&quot; src=&quot;http://exceptionless.com/assets/Caching-improvements-e1446046263253-300x224.png&quot; alt=&quot;Caching-improvements&quot; width=&quot;300&quot; height=&quot;224&quot; data-id=&quot;13725&quot; srcset=&quot;https://exceptionless.com/assets/Caching-improvements-e1446046263253-300x224.png 300w, https://exceptionless.com/assets/Caching-improvements-e1446046263253-1024x766.png 1024w, https://exceptionless.com/assets/Caching-improvements-e1446046263253.png 1151w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;Long-running API Tasks&lt;/h3&gt;
&lt;p&gt;We’ve offloaded long-running API tasks to background jobs, freeing up a lot of resources in the app and allowing us to scale work items independently. For example, marking a stack as fixed or removing a project may take a few moments to be updated now, but the trade-off is worth it. We’re working on updating the UI experience to prompt users that the task is running in the background.&lt;/p&gt;
&lt;h2&gt;Other Improvements&lt;/h2&gt;
&lt;h3&gt;Jobs&lt;/h3&gt;
&lt;p&gt;We’ve made each Job a console app, so it’s much easier to debug and deploy. Look for a full blog post on Job improvements soon.&lt;/p&gt;
&lt;h3&gt;.NET 4.6&lt;/h3&gt;
&lt;p&gt;Exceptionless is now running on .NET 4.6, which has improved startup time due to various improvements with the new version. &lt;strong&gt;Self-hosting users&lt;/strong&gt; should be sure to upgrade to .NET 4.6 on their servers before updating Exceptionless.&lt;/p&gt;
&lt;h2&gt;Upgrading&lt;/h2&gt;
&lt;p&gt;For full release notes and to download the latest version, please visit the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/releases&quot;&gt;GitHub Release Page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Always Improving&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;We’re always striving to improve&lt;/strong&gt; the efficiency of Exceptionless and all of our projects. If you see any room for improvement or have any comments when using anything from us, please send us an in-app message, submit a GitHub issue or &lt;a href=&quot;https://exceptionless.com/contact/&quot;&gt;contact us&lt;/a&gt; on the website.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Exceptionless.NET 3.2 Release Notes</title>
    <link href="https://exceptionless.com/2015-12-02-exceptionless-net-3-2-release-notes/"/>
    <updated>2015-12-02T15:37:12-06:00</updated>
    <id>https://exceptionless.com/2015-12-02-exceptionless-net-3-2-release-notes/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-2978&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/exceptionless-logoBLK.png&quot; alt=&quot;Exceptionless Logo&quot; width=&quot;360&quot; height=&quot;90&quot; data-id=&quot;2978&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-logoBLK.png 1000w, https://exceptionless.com/assets/exceptionless-logoBLK-300x75.png 300w&quot; sizes=&quot;(max-width: 360px) 100vw, 360px&quot;&gt;The .NET Exceptionless client has received &lt;strong&gt;several improvements&lt;/strong&gt; and &lt;strong&gt;some bug fixes&lt;/strong&gt; in version 3.2. Details below!&lt;/p&gt;
&lt;p&gt;A special shout-out to &lt;a href=&quot;https://github.com/airwareic&quot; target=&quot;_blank&quot;&gt;@airwareic&lt;/a&gt;, &lt;a href=&quot;https://github.com/srijken&quot; target=&quot;_blank&quot;&gt;@srijken&lt;/a&gt;, &lt;a href=&quot;https://github.com/xbelt&quot; target=&quot;_blank&quot;&gt;@xbelt&lt;/a&gt;, and &lt;a href=&quot;https://github.com/mgnslndh&quot; target=&quot;_blank&quot;&gt;@mgnslndh&lt;/a&gt; for contributing and helping make this release happen. &lt;strong&gt;You guys rock!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please download and update to the latest&lt;/strong&gt; &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/releases/tag/v3.2.0&quot; target=&quot;_blank&quot;&gt;source here&lt;/a&gt;, and you can view the full &lt;a href=&quot;http://exceptionless.com/why/&quot; target=&quot;_blank&quot;&gt;change log here&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;.NET Exceptionless Client v3.2.0 Release Details&lt;/h2&gt;
&lt;h3&gt;Additions &amp;amp; Improvements&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Read Configuration&lt;/strong&gt;&lt;br&gt;
We added support for reading configuration from environmental variables and app settings&lt;/p&gt;
&lt;p&gt;**Closing Applications&lt;br&gt;
** Closing applications after submission is now easier due to the new &lt;code&gt;SubmittedEvent&lt;/code&gt; event handler.&lt;/p&gt;
&lt;p&gt;**Custom Persistence Settings&lt;br&gt;
** The new &lt;code&gt;QueueMaxAttempts&lt;/code&gt; and &lt;code&gt;QueueMaxAge&lt;/code&gt; configuration settings allow custom persistence settings and are intended to improve offline support. Thanks @airwareic!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data Exclusions Improvements&lt;/strong&gt;&lt;br&gt;
We’ve made huge improvements to Data Exclusions, which now check default data and extra exception properties.&lt;/p&gt;
&lt;p&gt;**New Overloads&lt;br&gt;
** Thanks @xbelt for creating overloads for &lt;code&gt;CreateLog&lt;/code&gt; and &lt;code&gt;SubmitLog&lt;/code&gt; to accept the &lt;code&gt;LogLevel&lt;/code&gt; enum!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Custom Themes&lt;/strong&gt;&lt;br&gt;
@mgnslndh updated the styling of the &lt;code&gt;CrashReportDialog&lt;/code&gt; to play nice with custom themes. Thanks!&lt;/p&gt;
&lt;p&gt;**Dependencies&lt;br&gt;
** All dependencies (Nancy, NLog, etc) have been updated.&lt;/p&gt;
&lt;p&gt;**Deprecated!&lt;br&gt;
** The &lt;code&gt;EnableSSL&lt;/code&gt; property has been marked Obsolete because it is no longer used. &lt;code&gt;ServerURL&lt;/code&gt; is now being looked at for this.&lt;/p&gt;
&lt;h3&gt;Fixes&lt;/h3&gt;
&lt;p&gt;**Startup()&lt;br&gt;
** &lt;code&gt;Startup()&lt;/code&gt; was overriding configured dependencies – Fixed!&lt;/p&gt;
&lt;p&gt;**Empty Errors&lt;br&gt;
** We fixed a bug where you could have empty errors submitted with no stack trace info.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API Keys&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Previously set valid API keys were being overwritten with default API keys, so we fixed it.&lt;/li&gt;
&lt;li&gt;We also fixed an issue where &lt;code&gt;ApiKey&lt;/code&gt; couldn’t be changed after the client was initialized.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Reference IDs&lt;/strong&gt;&lt;br&gt;
An issue with submitting generated reference IDs was resolved, thanks to @srijken&lt;/p&gt;
&lt;p&gt;**Updating WebAPI Package&lt;br&gt;
** @srijken also fixed another issue where updating the WebApi package would remove the Exceptionless Module. Thanks again!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NLog&lt;/strong&gt;&lt;br&gt;
Nlog wasn’t working with .NET 4.0. This has been resolved.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IsolatedStorage&lt;/strong&gt;&lt;br&gt;
There was a problem that caused IsolatedStorage to not be able to be used. Fixed!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Min Log Level&lt;/strong&gt;&lt;br&gt;
NLog and log4net have been updated to allow setting the min log level.&lt;/p&gt;
&lt;h2&gt;What Say You?&lt;/h2&gt;
&lt;p&gt;As always, we’re listening to your feedback, comments, suggestions, and rants!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/issues/new&quot;&gt;User Interface Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/issues/new&quot;&gt;.NET Client Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/issues/new&quot;&gt;JavaScript Client Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/exceptionless/issues/new&quot;&gt;Exceptionless Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-12-03-exceptionles-javascript-1-2-release-notes/"/>
    <updated>2015-12-03T08:41:01-06:00</updated>
    <id>https://exceptionless.com/2015-12-03-exceptionles-javascript-1-2-release-notes/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright wp-image-13683 size-medium&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/blog-header-image-post2b-300x106.png&quot; alt=&quot;Exceptionless JavaScript Client&quot; width=&quot;300&quot; height=&quot;106&quot; data-id=&quot;13683&quot; srcset=&quot;https://exceptionless.com/assets/blog-header-image-post2b-300x106.png 300w, https://exceptionless.com/assets/blog-header-image-post2b.png 708w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;We’ve got a quick release for the Exceptionless JavaScript Client that includes a few new additions to what it supports and a quick bug fix or two.&lt;/p&gt;
&lt;p&gt;Shout out to &lt;a href=&quot;https://github.com/frankebersoll&quot; target=&quot;_blank&quot;&gt;@frankebersoll&lt;/a&gt; for his help!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please download and update to the&lt;/strong&gt; &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/releases/tag/v1.2.0&quot; target=&quot;_blank&quot;&gt;source code here&lt;/a&gt;, and view the full &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/compare/v1.1.1...v1.2.0&quot; target=&quot;_blank&quot;&gt;change log here&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;JavaScript Client v1.2 Notes&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Errors&lt;/strong&gt;&lt;br&gt;
@frankebersoll added support for deduplicating JavaScript erros. Thanks!&lt;/p&gt;
&lt;p&gt;**Data Collection&lt;br&gt;
** Frank’s back at it, adding support for collecting extra exception data that was already in the .NET client like module info, custom exception properties, and everything else that was already displayed in the UI when using the .NET client.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Node&lt;/strong&gt; **Info&lt;br&gt;
** Support for collecting Node module info has also been added (thanks again, @frankebersoll).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bug Fix – Invalid States&lt;/strong&gt;&lt;br&gt;
An issue where Data Exclusions could cause events to be submitted in an invalid state has been fixed.&lt;/p&gt;
&lt;h3&gt;As always, let us know if you have any questions or feedback!&lt;/h3&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-12-08-better-approach-running-azure-webjobs/"/>
    <updated>2015-12-08T19:54:14-06:00</updated>
    <id>https://exceptionless.com/2015-12-08-better-approach-running-azure-webjobs/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-13876&quot; src=&quot;http://exceptionless.com/assets/jobs-blog-header-image.jpg&quot; alt=&quot;Azure Webjobs&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;13876&quot; srcset=&quot;https://exceptionless.com/assets/jobs-blog-header-image.jpg 708w, https://exceptionless.com/assets/jobs-blog-header-image-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;Lets talk about jobs in the Exceptionless world for a minute and &lt;strong&gt;how you can use our methods to improve your Azure WebJobs.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A job is a specific task/process that runs and does something like send a mail message, etc.&lt;/p&gt;
&lt;h2&gt;Out with the Old&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Prior to version 3.1&lt;/strong&gt;, we used an early version of the Foundatio Jobs system to run our out-of-process jobs via Azure WebJobs. We found it to be quite a pain to figure out which jobs were running or eating up system resources because every job was titled Job.exe (just like figuring out the w3wp IIS process is running). Also, just to run an out-of-process job, one would have to compile the source, copy dependencies to a common bin folder, and then run an executable (Job.exe) with parameters that specify the job type.&lt;/p&gt;
&lt;p&gt;These tedious and error-prone tasks that had to be completed just to get a job to run are a thing of the past.&lt;/p&gt;
&lt;h2&gt;In with the New&lt;/h2&gt;
&lt;!--more--&gt;
&lt;p&gt;&lt;strong&gt;In Exceptionless 3.1&lt;/strong&gt; we focused on refining and improving jobs. To do so, we created a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/tree/master/Source/Jobs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;new console application for each job&lt;/a&gt; and specified settings in the code versus &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Jobs/EventPost/Program.cs#L16-L22&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;error prone command line options as shown here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, with &lt;a href=&quot;https://exceptionless.com/introducing-foundatio-3-0-async-efficiency/&quot;&gt;Foundatio&lt;/a&gt;, our open source app building block solution used in Exceptionless, you just define a new &lt;a href=&quot;https://github.com/exceptionless/Foundatio#jobs&quot;&gt;Job&lt;/a&gt; that runs (via the run method) and you can use the &lt;a href=&quot;https://github.com/exceptionless/Foundatio#jobs&quot;&gt;Foundatio Jobs API&lt;/a&gt; to run the job in process, out of process, continuous, or one time without changing the implementation.&lt;/p&gt;
&lt;p&gt;This new approach also gave us a great deployment strategy, for free. Simply copy the job executable and bin folders and run it anywhere!&lt;/p&gt;
&lt;h3&gt;Jobs (processes) running in Azure as an Azure web job&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/Jobs.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-13862&quot; src=&quot;http://exceptionless.com/assets/Jobs-1024x670.jpg&quot; alt=&quot;Exceptionless Jobs and Processes&quot; width=&quot;600&quot; height=&quot;393&quot; data-id=&quot;13862&quot; srcset=&quot;https://exceptionless.com/assets/Jobs-1024x670.jpg 1024w, https://exceptionless.com/assets/Jobs-300x196.jpg 300w, https://exceptionless.com/assets/Jobs.jpg 1600w&quot; sizes=&quot;(max-width: 600px) 100vw, 600px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;How you can implement a better Azure WebJob&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Foundatio#jobs&quot;&gt;Foundatio Jobs&lt;/a&gt; allows you to run a long running process (in process or out of process) with out worrying about it being terminated prematurely. By using Foundatio Jobs you gain all of the following features &lt;strong&gt;without changing your job implementation&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Run job in process&lt;/li&gt;
&lt;li&gt;Run job out of process&lt;/li&gt;
&lt;li&gt;Run job with a start up delay&lt;/li&gt;
&lt;li&gt;Run job in an continuous loop with an optional interval delay.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this sample we’ll just define a new class called HelloWorldJob that will hold our job that increments a counter and derives from JobBase. Please note that there are a few different base classes you can derive from based on your use case.&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Foundatio.Jobs;

public class HelloWorldJob : JobBase {
   public int RunCount { get; set; }

   protected override Task&amp;lt;JobResult&amp;gt; RunInternalAsync(JobRunContext context) {
       RunCount++;
       return Task.FromResult(JobResult.Success);
   }
}&lt;/pre&gt;
&lt;p&gt;Now that we have our job defined we can run our job in process with a few different options:&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;var job = new HelloWorldJob();
await job.RunAsync(); // job.RunCount = 1;
await job.RunContinuousAsync(iterationLimit: 2); // job.RunCount = 3;
await job.RunContinuousAsync(cancellationToken: new CancellationTokenSource(TimeSpan.FromMilliseconds(10)).Token); // job.RunCount &amp;gt; 10;&lt;/pre&gt;
&lt;p&gt;But our goal is to run this out of process in an Azure WebJob (this also works if you want to run this as a service or from the desktop).&lt;/p&gt;
&lt;p&gt;The first step is to create a new console application and reference the &lt;a style=&quot;font-family: &#39;Helvetica Neue&#39;, Helvetica, Arial, sans-serif; font-size: 14px;&quot; href=&quot;https://www.nuget.org/packages/Foundatio/&quot;&gt;Foundatio NuGet Package&lt;/a&gt; and the project that contains our HelloWorldJob. We are going to call our console application HelloWorldJob. Inside of the Program class, we’ll update the main method to run our job.&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using System;
using System.IO;
using JobSample;
using Foundatio.Jobs;
using Foundatio.ServiceProviders;

namespace HelloWorldJob {
    public class Program {
        public static int Main(string[] args) {
            // NOTE: This should be the path to your App_Data folder of your website.
            var path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @&quot;..\..\..\Api\App_Data&quot;);
            if (Directory.Exists(path))
                AppDomain.CurrentDomain.SetData(&quot;DataDirectory&quot;, path);

            // Get a service provider so we can create an instance of our job.
            var serviceProvider = ServiceProvider.GetServiceProvider(&quot;JobSample.JobBootstrappedServiceProvider,JobSample&quot;);

            var job = serviceProvider.GetService&amp;lt;JobSample.HelloWorldJob&amp;gt;();
            return new JobRunner(job, initialDelay: TimeSpan.FromSeconds(2), interval: TimeSpan.Zero).RunInConsole();
        }
    }
}&lt;/pre&gt;
&lt;p&gt;The last steps are to simply compile the project and deploy it to your Azure website!&lt;/p&gt;
&lt;h3&gt;Questions?&lt;/h3&gt;
&lt;p&gt;If you have any questions please feel free to contact us via our contact page, in app message, &lt;a href=&quot;https://github.com/exceptionless/foundatio/issues&quot;&gt;GitHub issues&lt;/a&gt; or our &lt;a href=&quot;https://gitter.im/exceptionless/Discuss&quot;&gt;chat room&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-12-17-using-reference-ids-for-better-customer-service/"/>
    <updated>2015-12-17T12:22:33-06:00</updated>
    <id>https://exceptionless.com/2015-12-17-using-reference-ids-for-better-customer-service/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-13908&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;http://exceptionless.com/assets/reference-ids-blog-header-image.png&quot; alt=&quot;Exceptionless Reference IDs&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;13908&quot; srcset=&quot;https://exceptionless.com/assets/reference-ids-blog-header-image.png 708w, https://exceptionless.com/assets/reference-ids-blog-header-image-300x106.png 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;This week we want to talk about &lt;strong&gt;reference Ids&lt;/strong&gt; and how we use them to &lt;strong&gt;improve customer service&lt;/strong&gt; for Exceptionless. And how we think you can do the same for your users.&lt;/p&gt;
&lt;h2&gt;What’s a Reference Id?&lt;/h2&gt;
&lt;p&gt;A reference id is a unique identifier, generated by the user, that allows you to look up a submitted event at a later time. This is important because &lt;em&gt;event Ids are not created until after the event is processed&lt;/em&gt;, so there is no other way to look up an event. We also use Reference Ids to help deduplicate events server side, which is another reason why it’s important that they are unique.&lt;/p&gt;
&lt;h2&gt;Using Reference Ids for the Greater Good&lt;/h2&gt;
&lt;!--more--&gt;
&lt;p&gt;One of the ways we use Reference Ids is to &lt;strong&gt;support end users&lt;/strong&gt;, something that is very important to us. There is nothing more frustrating than being unable to help a user that is experiencing a problem because you don’t know what they are seeing (when there could be thousands of errors in your app).&lt;/p&gt;
&lt;p&gt;To combat this issue, we always try to include a reference Id with every error message shown to the user. This allows end users to contact us with a Reference Id and receive help &lt;strong&gt;immediately&lt;/strong&gt; for the error they are seeing because we can &lt;strong&gt;easily track down and view it&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;Reference Id Example&lt;/h2&gt;
&lt;p&gt;The Exceptionless clients have built in support to generate and track unique Reference Ids for every error event. Behind the scenes, we register a default Reference Id plugin that sets a Reference Id on submitted error events and stores the Reference Id in an implementation of &lt;a&gt;ILastReferenceIdManager&lt;/a&gt;. The Reference Id manager’s goal is just to persist and retrieve the last used Reference Id.&lt;/p&gt;
&lt;p&gt;Since this is a default plugin, we can enable this behavior by calling the &lt;code&gt;UseReferenceIds()&lt;/code&gt; method on the configuration object to register the default Reference Id on every error event.&lt;/p&gt;
&lt;h3&gt;C# Example&lt;/h3&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Exceptionless;
ExceptionlessClient.Default.Configuration.UseReferenceIds();&lt;/pre&gt;
&lt;h3&gt;JavaScript Example&lt;/h3&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.ExceptionlessClient.default.config.useReferenceIds();&lt;/pre&gt;
&lt;p&gt;Please note that you can &lt;strong&gt;create your own plugin&lt;/strong&gt; to create your very own Reference Id(s).&lt;/p&gt;
&lt;p&gt;To &lt;strong&gt;get the the last used Reference Id&lt;/strong&gt;, you can call the &lt;code&gt;GetLastReferenceId()&lt;/code&gt; helper method on the the &lt;code&gt;ExceptionlessClient&lt;/code&gt; instance.&lt;/p&gt;
&lt;h4&gt;C#&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Exceptionless;
// Get the last created Reference Id
ExceptionlessClient.Default.GetLastReferenceId();&lt;/pre&gt;
&lt;h4&gt;JavaScript&lt;/h4&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;// Get the last created Reference Id
exceptionless.ExceptionlessClient.default.getLastReferenceId();
&lt;/pre&gt;
&lt;p&gt;You might have noticed how easy it is to get or add Reference Id’s to your events automatically. This makes it a breeze to let your developers track down user-facing issues by displaying the Reference Id to your end users.&lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;display Reference Ids&lt;/strong&gt; to all of our end users anytime an error occurs in our ASP.NET WebAPI application. We accomplish this by adding a custom &lt;code&gt;&amp;lt;a href=&amp;quot;http://www.asp.net/web-api/overview/error-handling/web-api-global-error-handling&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;IExceptionHandler&amp;lt;/a&amp;gt;&lt;/code&gt; and return a new &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Api/Utility/Handlers/ExceptionlessReferenceIdExceptionHandler.cs#L35-L51&quot; target=&quot;_blank&quot;&gt;error response to include the Reference Id&lt;/a&gt; as shown below:&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;public class ExceptionlessReferenceIdExceptionHandler : IExceptionHandler {
	public Task HandleAsync(ExceptionHandlerContext context, CancellationToken cancellationToken) {
		if (context == null)
			throw new ArgumentNullException(nameof(context));

		var exceptionContext = context.ExceptionContext;
		var request = exceptionContext.Request;
		if (request == null)
			throw new ArgumentException($&quot;{typeof(ExceptionContext).Name}.{&quot;Request&quot;} must not be null&quot;, nameof(context));

		context.Result = new ResponseMessageResult(CreateErrorResponse(request, exceptionContext.Exception, HttpStatusCode.InternalServerError));
		return TaskHelper.Completed();
	}

	private HttpResponseMessage CreateErrorResponse(HttpRequestMessage request, Exception ex, HttpStatusCode statusCode) {
		HttpConfiguration configuration = request.GetConfiguration();
		HttpError error = new HttpError(ex, request.ShouldIncludeErrorDetail());

		string lastId = ExceptionlessClient.Default.GetLastReferenceId();
		if (!String.IsNullOrEmpty(lastId))
			error.Add(&quot;Reference&quot;, lastId);

		// CreateErrorResponse should never fail, even if there is no configuration associated with the request
		// In that case, use the default HttpConfiguration to con-neg the response media type
		if (configuration == null) {
			using (HttpConfiguration defaultConfig = new HttpConfiguration()) {
				return request.CreateResponse(statusCode, error, defaultConfig);
			}
		}

		return request.CreateResponse(statusCode, error, configuration);
	}
}&lt;/pre&gt;
&lt;p&gt;The next step is to &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Api/AppBuilder.cs#L63&quot; target=&quot;_blank&quot;&gt;replace the existing &lt;code&gt;IExceptionFilter&lt;/code&gt;&lt;/a&gt; with the one above.&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;Config.Services.Replace(typeof(IExceptionHandler), new ExceptionlessReferenceIdExceptionHandler());&lt;/pre&gt;
&lt;p&gt;Finally, when an error occurs in your app, you’ll get a more user friendly error response that contains a Reference Id!&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;{
  &quot;message&quot;: &quot;An error has occurred.&quot;,
  “reference”: “411085622e”
}&lt;/pre&gt;
&lt;p&gt;We’ve found that this allows consumers of our API to quickly contact us with a reference id and get up and running quickly!&lt;/p&gt;
&lt;h2&gt;Looking up Events by Reference Id&lt;/h2&gt;
&lt;p&gt;You might be thinking: “Reference Ids are great, but what do I do with them now that I have one.” Well, you can view the event that they reference on our site or via our API. This can be accomplished two different ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;**Hotlinking&lt;br&gt;
** You can link directly to a submitted event by outputting a link in your UI or logs (e.g. https://be.exceptionless.io/event/by-ref/YOUR_REFERENCE_ID)&lt;/li&gt;
&lt;li&gt;**Search&lt;br&gt;
** You can search via our api/ui with &lt;code&gt;reference:YOUR_REFERENCE_ID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Your Turn!&lt;/h2&gt;
&lt;p&gt;We hope this article was helpful, and we’d love to know if you’re using Reference Ids and how they’ve helped you help users, solve internal issues, etc. Post a comment below!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2015-12-28-exceptionless-case-study-featured-on-elasticsearch/"/>
    <updated>2015-12-28T13:48:20-06:00</updated>
    <id>https://exceptionless.com/2015-12-28-exceptionless-case-study-featured-on-elasticsearch/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/products/elasticsearch&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-13931&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/elasticsearch-logo.png&quot; alt=&quot;Elasticsearch case study&quot; width=&quot;190&quot; height=&quot;78&quot; data-id=&quot;13931&quot;&gt;&lt;/a&gt;We recently wrote a case study regarding how Elasticsearch has helped us improve speed and ease of scale as we’ve continued to improve Exceptionless.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Last week, Elasticsearch &lt;a href=&quot;https://www.elastic.co/blog/being-exceptionless-with-elasticsearch&quot; target=&quot;_blank&quot;&gt;published that case study on their blog&lt;/a&gt;&lt;/strong&gt;, so we wanted to make sure our readers had a chance to check it out!&lt;/p&gt;
&lt;p&gt;We’ve written about our use of Elasticsearch in numerous articles before, including:&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/making-move-elastic-search-exceptionless-2-0/&quot;&gt;Making the Move to Elasticsearch for Exceptionless 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/filter-your-exceptions-video-demo/&quot;&gt;Filter Your Exceptions in Version 2.0 – Video Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/exceptionless-3-0-changes-to-build-process-dependencies-self-hosting/&quot;&gt;Exceptionless V3.0 – Changes to the Build Process, Dependencies, and Self Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/exceptionless-3-1-released-if-you-thought-it-was-fast-before/&quot;&gt;Exceptionless 3.1 Released! If You Thought It was Fast Before…&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;In the case study&lt;/strong&gt;, we discuss how Elasticsearch let us improve our real-time dashboard, work with time zones more easily, index data much faster, not have to worry so much about pre-aggregating data, maintain much less code, improve backup and restoration, shrink disk space usage, and, perhaps most importantly, drastically improve scalability.&lt;/p&gt;
&lt;p&gt;Basically, &lt;strong&gt;we really like Elasticsearch&lt;/strong&gt; and you should check it out if you haven’t already.&lt;/p&gt;
&lt;h2&gt;Do you use Elasticsearch?&lt;/h2&gt;
&lt;p&gt;Let us know how it’s helped you, or if you have any questions we might be able to answer, by commenting below!&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-01-27-new-releases-for-all-the-codes-exceptionless-3-2/"/>
    <updated>2016-01-27T15:18:01-06:00</updated>
    <id>https://exceptionless.com/2016-01-27-new-releases-for-all-the-codes-exceptionless-3-2/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14033&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/exceptionless-3-2-release-notes.png&quot; alt=&quot;Exceptionless 3.2 Highlights&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14033&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-3-2-release-notes.png 260w, https://exceptionless.com/assets/exceptionless-3-2-release-notes-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;That’s right folks – we’ve gone and released Exceptionless 3.2, which includes releases for Exceptionless.NET, Exceptionless.JavaScript, and Exceptionless.UI! Awe yeah.&lt;/p&gt;
&lt;p&gt;We’re kind of excited, in case you couldn’t tell. Big stuff in here, like &lt;strong&gt;session tracking&lt;/strong&gt; (#BOOM), licensing changes (less confusion – it’s a good thing), and &lt;strong&gt;posting via HTTP GET&lt;/strong&gt; (such easy, much wow)!&lt;/p&gt;
&lt;p&gt;Lets get into some of the details…&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless 3.2.0&lt;/h2&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;Sessions!&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Track and automatically manage user sessions&lt;/strong&gt; for much more visibility into their user experience, how they interact with your app, and, of course, any errors or events that occur related to that user. This answers the age-old question, “What the hell was this guy doing when stuff blew up!?”&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/track-view-user-session-data-exceptionless/&quot; target=&quot;_blank&quot;&gt;Check out the User Sessions post for more details and instructions!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/sessions.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignleft wp-image-14027 size-large&quot; style=&quot;width: 50%;&quot; src=&quot;http://exceptionless.com/assets/sessions-1024x662.png&quot; alt=&quot;Exceptionless User Sessions&quot; width=&quot;940&quot; height=&quot;608&quot; data-id=&quot;14027&quot; srcset=&quot;https://exceptionless.com/assets/sessions-1024x662.png 1024w, https://exceptionless.com/assets/sessions-300x194.png 300w, https://exceptionless.com/assets/sessions-768x496.png 768w, https://exceptionless.com/assets/sessions.png 1038w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://exceptionless.com/assets/sessions-2.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignleft wp-image-14026 size-full&quot; style=&quot;width: 50%;&quot; src=&quot;http://exceptionless.com/assets/sessions-2.png&quot; alt=&quot;Exceptionless Event Sessions&quot; width=&quot;815&quot; height=&quot;386&quot; data-id=&quot;14026&quot; srcset=&quot;https://exceptionless.com/assets/sessions-2.png 815w, https://exceptionless.com/assets/sessions-2-300x142.png 300w, https://exceptionless.com/assets/sessions-2-768x364.png 768w&quot; sizes=&quot;(max-width: 815px) 100vw, 815px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;
&lt;/div&gt;
&lt;h3&gt;HTTP GET!&lt;/h3&gt;
&lt;p&gt;Now it’s even easier to &lt;strong&gt;integrate with Exceptionless from any environment&lt;/strong&gt;, because you can post event or meta data via HTTP GET! More info coming soon (blog post).&lt;/p&gt;
&lt;h3&gt;License Change&lt;/h3&gt;
&lt;p&gt;The server and all Exceptionless projects are now using the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/LICENSE.txt&quot; target=&quot;_blank&quot;&gt;Apache License&lt;/a&gt;, so there should be much less confusion on how things are licensed moving forward. Boring stuff, we know… but important.&lt;/p&gt;
&lt;h3&gt;User Location&lt;/h3&gt;
&lt;p&gt;User locations are now resolved from geographic coordinates or the IP address. We look at the &lt;code&gt;geo&lt;/code&gt; property for coordinates or an IP, then we inspect the IP. If no IP or geo coordinates present themsevles, we fall back to the client IP that the event was submitted from.&lt;/p&gt;
&lt;h3&gt;More Speed Improvements&lt;/h3&gt;
&lt;p&gt;As always, we keep speed improvements in mind with each release. With 3.2, we’ve been able to make more &lt;strong&gt;massive improvements in processing time for events&lt;/strong&gt; (over 250% per 1000 events!) and further reduce app startup times and elastic query execution times. #alwaysoptimizing!&lt;/p&gt;
&lt;h3&gt;Hourly Throttling&lt;/h3&gt;
&lt;p&gt;The hourly event-throttling threshold has been &lt;strong&gt;increased&lt;/strong&gt; from 5x to 10x the plan limit. The way we calculate it is by taking the plan limit and dividing it by the hours in the month, then multiplying it by 10.&lt;/p&gt;
&lt;h3&gt;Signup Experience&lt;/h3&gt;
&lt;p&gt;The signup experience has been improved when inviting users, as well. Thanks &lt;a href=&quot;https://github.com/mcquaiga&quot; target=&quot;_blank&quot;&gt;@mcquaiga&lt;/a&gt; and &lt;a href=&quot;https://github.com/theit8514&quot; target=&quot;_blank&quot;&gt;@theit8514&lt;/a&gt; for your contribution!&lt;/p&gt;
&lt;h3&gt;Upgrading (Self Hosters)&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Self hoster?&lt;/strong&gt; Need to upgrade? &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/releases/tag/v3.2.0&quot; target=&quot;_blank&quot;&gt;The latest code can be downloaded from the release page.&lt;/a&gt; All other users: No action required.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Exceptionless.UI 2.3.0&lt;/h2&gt;
&lt;p&gt;User experience was the primary focus of this UI release, along with the new sessions feature. More details below, including other improvements and a few bug fix details.&lt;/p&gt;
&lt;h3&gt;Adding a New Project&lt;/h3&gt;
&lt;p&gt;When adding a new project, users will now have a much better experience, and we added a JavaScript configuration section for JS projects. Check it out!&lt;/p&gt;
&lt;h3&gt;Reference id Lookup&lt;/h3&gt;
&lt;p&gt;Support for looking up reference ids was added, so you can now navigate to &lt;code&gt;/event/by-ref/YOUR_REFERENCE_ID&lt;/code&gt; to look up an event.&lt;/p&gt;
&lt;h3&gt;Other Improvements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Better messages and a loading mask has been added to data grids to improve user experience when filtering and loading data.&lt;/li&gt;
&lt;li&gt;Escaping of strack traces containing HTML or CSS has also been improved.&lt;/li&gt;
&lt;li&gt;You can now sort extended data items alphabetically.&lt;/li&gt;
&lt;li&gt;The request and environment info tabs for events now show additional extended data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bug Fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You can now create an organization or project that ends with a period or whitespace.&lt;/li&gt;
&lt;li&gt;Sometimes an incorrect time range would be set when users used the history chart/graph to select a period of time to drill down to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/compare/v2.2.0...v2.3.0&quot; target=&quot;_blank&quot;&gt;Exceptionless.UI Changelog&lt;/a&gt; for all the code changes (87 files / 75 commits).&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Exceptionless.NET 3.3.2&lt;/h2&gt;
&lt;p&gt;Users on desktop applications can now opt-in to sessions by setting a default user and calling the below:&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;ExceptionlessClient.Default.Configuration.UseSessions()&lt;/pre&gt;
&lt;p&gt;Also, module info was not being included in some error reports, which was incorrect. That has now been fixed.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/compare/v3.3.1...v3.3.2&quot; target=&quot;_blank&quot;&gt;full change log&lt;/a&gt; can be viewed on GitHub.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Exceptionless.JavaScript 1.3.1&lt;/h2&gt;
&lt;p&gt;Besides integrating with the above, the only major change in the JavaScript client, like the .NET client, was that users can now op-in to sessions. To do so, set a default user and call the below:&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.ExceptionlessClient.default.config.useSessions();&lt;/pre&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/compare/v1.3.0...v1.3.1&quot; target=&quot;_blank&quot;&gt;full change log&lt;/a&gt; for all the dirty details.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-02-01-track-view-user-session-data-exceptionless/"/>
    <updated>2016-02-01T12:11:15-06:00</updated>
    <id>https://exceptionless.com/2016-02-01-track-view-user-session-data-exceptionless/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-14055&quot; src=&quot;http://exceptionless.com/assets/sessions-dashboard-header2-1024x411.png&quot; alt=&quot;app user session logging&quot; width=&quot;940&quot; height=&quot;377&quot; data-id=&quot;14055&quot; srcset=&quot;https://exceptionless.com/assets/sessions-dashboard-header2-1024x411.png 1024w, https://exceptionless.com/assets/sessions-dashboard-header2-300x120.png 300w, https://exceptionless.com/assets/sessions-dashboard-header2-768x308.png 768w, https://exceptionless.com/assets/sessions-dashboard-header2.png 1824w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;
&lt;p&gt;To many, this feature may be the missing piece… that connection you’ve always wanted to make between users, bugs, exceptions, app events, etc. I’m talking about, of course, &lt;strong&gt;user session tracking!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That’s right, you can now use Exceptionless to track users as they use your app, which of course will come in super handy when you want to know exactly what they did to stumble upon or cause an error or trigger an event.&lt;/p&gt;
&lt;p&gt;Continue reading to learn more about sessions and how you can enable them for your apps.&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Session Overview&lt;/h2&gt;
&lt;p&gt;First, you must have a paid (premium) Exceptionless plan to report on sessions if you are hosting with us. This is mainly because of the added resource requirements the feature puts on our infrastructure. We think it’s definitely worth it, though!&lt;/p&gt;
&lt;p&gt;Sessions can be searched/filtered like all other events – they are just an event type like exceptions or logs.&lt;/p&gt;
&lt;h2&gt;What’s in a User Session Event?&lt;/h2&gt;
&lt;p&gt;Each user session records how long they were active and what they did. For instance, the average user session on be.exceptionless.io the first week we monitored it using the feature was two hours.&lt;/p&gt;
&lt;p&gt;With that, each user session event has a “Session Events” tab that displays all the relevant events that occurred during that session and allows you to see exactly what that user did. This is especially helpful, of course, if that session lead to an exception or noteworthy event in your app.&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;http://exceptionless.com/assets/sessions-event-tab-user-footsteps.jpg&quot; rel=&quot;attachment wp-att-14046&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-medium wp-image-14046&quot; src=&quot;http://exceptionless.com/assets/sessions-event-tab-user-footsteps-300x142.jpg&quot; alt=&quot;App User Session Reporting&quot; width=&quot;300&quot; height=&quot;142&quot; data-id=&quot;14046&quot; srcset=&quot;https://exceptionless.com/assets/sessions-event-tab-user-footsteps-300x142.jpg 300w, https://exceptionless.com/assets/sessions-event-tab-user-footsteps-768x364.jpg 768w, https://exceptionless.com/assets/sessions-event-tab-user-footsteps.jpg 815w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;
  All unique data that remains constant throughout the user session is also stored in the event, such as browser and environment information.
&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;
  &lt;a href=&quot;http://exceptionless.com/assets/sessions-unique-user-data.jpg&quot; rel=&quot;attachment wp-att-14047&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-medium wp-image-14047&quot; src=&quot;http://exceptionless.com/assets/sessions-unique-user-data-300x155.jpg&quot; alt=&quot;app user session unique data&quot; width=&quot;300&quot; height=&quot;155&quot; data-id=&quot;14047&quot; srcset=&quot;https://exceptionless.com/assets/sessions-unique-user-data-300x155.jpg 300w, https://exceptionless.com/assets/sessions-unique-user-data-768x398.jpg 768w, https://exceptionless.com/assets/sessions-unique-user-data.jpg 801w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;
&lt;/p&gt;
&lt;h2 style=&quot;text-align: left;&quot;&gt;
  Sounds Good. How do I Set it Up?
&lt;/h2&gt;
&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14057&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/sessions-dashboard-nav.jpg&quot; alt=&quot;sessions-dashboard-nav&quot; width=&quot;199&quot; height=&quot;162&quot; data-id=&quot;14057&quot;&gt; First, you’ll need to update to the latest client versions to enable sessions, then you’ll have to follow the below steps to begin tracking them. Once you’ve got that set up, visit the new Sessions section under the Reports option on your main dashboard, or navigate directly to https://be.exceptionless.io/session/dashboard. If you are &lt;strong&gt;self hosting&lt;/strong&gt;, make sure you &lt;a href=&quot;http://exceptionless.com/new-releases-for-all-the-codes-exceptionless-3-2/&quot; target=&quot;_blank&quot;&gt;update to Exceptionless 3.2&lt;/a&gt; first.&lt;/p&gt;
&lt;h3&gt;Turning On Session Tracking&lt;/h3&gt;
&lt;p&gt;For Exceptionless to track a user for your app, you need to send a user identity with each event. To do so, you need to set the default user identity via the following client methods:&lt;/p&gt;
&lt;h4&gt;C#&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Exceptionless;
ExceptionlessClient.Default.Configuration.SetUserIdentity(&quot;UNIQUE_ID_OR_EMAIL_ADDRESS&quot;, &quot;Display Name&quot;);&lt;/pre&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h4&gt;JavaScript&lt;/h4&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.ExceptionlessClient.default.config.setUserIdentity(&#39;UNIQUE_ID_OR_EMAIL_ADDRESS&#39;, &#39;Display Name&#39;);&lt;/pre&gt;
&lt;p&gt;Once the user is set on the config object, it will be applied to all future events.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; In WinForms and WPF applications, a plugin will automatically set the default user to the &lt;code&gt;&amp;lt;strong&amp;gt;Environment.UserName&amp;lt;/strong&amp;gt;&lt;/code&gt; if the default user hasn’t been already set. Likewise, if you are in a web environment, we will set the default user to the request principal’s identity if the default user hasn’t already been set.&lt;/p&gt;
&lt;p&gt;If you are using WinForms, WPF, or a Borwser App, you can enable sessions by calling the &lt;code&gt;EnableSessions&lt;/code&gt; extension method.&lt;/p&gt;
&lt;h4&gt;C#&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Exceptionless;
ExceptionlessClient.Default.Configuration.UseSessions();&lt;/pre&gt;
&lt;h4&gt;JavaScript&lt;/h4&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.ExceptionlessClient.default.config.useSessions();&lt;/pre&gt;
&lt;h2&gt;How do Sessions get Created?&lt;/h2&gt;
&lt;p&gt;Sessions are created in two different ways. Either the client can send a session start event, or we can create it automatically on the server side when an event is processed.&lt;/p&gt;
&lt;p&gt;We have a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Plugins/EventProcessor/Default/70_AutoSessionPlugin.cs#L29&quot; target=&quot;_blank&quot;&gt;server-side plugin&lt;/a&gt; that runs as part of our pipeline process for every event – its sole purpose is to manage sessions by using a hash on the user’s identity as a lookup for the session id.&lt;/p&gt;
&lt;p&gt;If the session doesnt’ exist or the current event is a session event type, a new session id will be created. If we receive a &lt;code&gt;sessionend&lt;/code&gt; event, we close that session and update the end time on the &lt;code&gt;sessionstart&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;We also have a &lt;code&gt;CloseInactiveSessionsJob&lt;/code&gt; event that runs every few minutes to close sessions that haven’t been updated in a set period of time. This allows you to efficiently show who is online and offline during a time window.&lt;/p&gt;
&lt;h2&gt;How do I Enable Near Real-Time Online/Offline Then?&lt;/h2&gt;
&lt;p&gt;We do this by default in our JavaScript, WinForms, and WPF clients when you call the &lt;code&gt;UseSessions()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;In the background, we send a &lt;code&gt;heartbeat&lt;/code&gt; event every 30 seconds if no other events have been sent in the last 30 seconds.&lt;/p&gt;
&lt;p&gt;You can &lt;strong&gt;disable this heartbeat&lt;/strong&gt; from being sent by passing &lt;code&gt;false&lt;/code&gt; as an argument to the &lt;code&gt;UseSessions()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;The WinForms and WPF clients will also send a &lt;code&gt;SessionEnd&lt;/code&gt; event when the process exits.&lt;/p&gt;
&lt;h2&gt;Can I Manually Send SessionStart, SessionEnd, and heartbeat Events?&lt;/h2&gt;
&lt;p&gt;Sure! You can send these events manually via our client API to start, update, or end a session. Please remember, though, that a user identity must be set.&lt;/p&gt;
&lt;h3&gt;C#&lt;/h3&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Exceptionless;
ExceptionlessClient.Default.SubmitSessionStart();
ExceptionlessClient.Default.SubmitSessionHeartbeat();
ExceptionlessClient.Default.SubmitSessionEnd();&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/blob/master/Source/Shared/Extensions/ClientExtensions.cs#L159-L205&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;JavaScript&lt;/h3&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.ExceptionlessClient.default.submitSessionStart();
exceptionless.ExceptionlessClient.default.submitSessionHeartbeat();
exceptionless.ExceptionlessClient.default.submitSessionEnd();&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/master/src/ExceptionlessClient.ts#L96-L118&quot; target=&quot;_blank&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Tell Us What You Think&lt;/h2&gt;
&lt;p&gt;As always, please send us your feedback. You can post it here in the comments or &lt;a href=&quot;https://github.com/exceptionless&quot; target=&quot;_blank&quot;&gt;submit a GitHub Issue&lt;/a&gt; and we will get back to you as soon as possible! We’re always looking for contributors, as well, so don’t be afraid to jump in and be the hero the code needs. Contributors get Exceptionless perks!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-02-04-replacing-diy-exception-logging-with-exceptionless-case-study/"/>
    <updated>2016-02-04T15:09:30-06:00</updated>
    <id>https://exceptionless.com/2016-02-04-replacing-diy-exception-logging-with-exceptionless-case-study/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://referralrock.com/&quot; rel=&quot;attachment wp-att-14073&quot; target=&quot;_blank&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14073&quot; style=&quot;margin-left: 20px;&quot; src=&quot;http://exceptionless.com/assets/referral-rock-logo.png&quot; alt=&quot;referral-rock-logo&quot; width=&quot;222&quot; height=&quot;108&quot; data-id=&quot;14073&quot;&gt;&lt;/a&gt;Today we bring you a case study from the founder of &lt;a href=&quot;https://referralrock.com/&quot; target=&quot;_blank&quot;&gt;Referral Rock&lt;/a&gt; and serial entrepreneur, &lt;strong&gt;Joshua Ho&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Referral Rock is a referral platform for small businesses that Josh created after he “… &lt;strong&gt;realized small businesses lacked the tools to &lt;a href=&quot;https://referralrock.com/blog/referral-programs-101-everything-you-need-to-build-a-referral-marketing-program/&quot; target=&quot;_blank&quot;&gt;make a customer referral program work&lt;/a&gt;.&lt;/strong&gt;” The app allows businesses to easily and effectively create, implement, and administer a rock-solid referral program to help grow their business.&lt;/p&gt;
&lt;p&gt;Exceptionless recently became a part of Referral Rock’s exception reporting and logging toolkit, replacing Joshua’s home-grown exception logging solutions, and here are his thoughts!&lt;/p&gt;
&lt;!--more--&gt;
&lt;p style=&quot;text-align: center;margin-top: 45px;margin-bottom: -40px;&quot;&gt;
  &lt;span style=&quot;font-size:100px&quot;&gt;&amp;#8220;&lt;/span&gt;
&lt;/p&gt;
&lt;hr style=&quot;margin: 10px 0;&quot;&gt;
I&amp;#8217;ve always done my own exception logging. Very basic stuff, where I would just log exceptions to my local drive. This gave me a nice place to just look at errors in my ASP.NET code. As with most code, it ended up in production deployments. At one point, I even built some web pages to view the logs remotely. Those little exception logging code snippets also made it into about 3-5 other projects as the years went by. I knew there was software out there that could do this, but I more or less had it solved for myself. 
**But that changed recently.**&lt;p&gt;&lt;/p&gt; 
&lt;blockquote style=&quot;margin-top:20px;&quot;&gt;
  &lt;p&gt;
    &amp;#8220;One &lt;strong&gt;huge benefit&lt;/strong&gt; Exceptionless adds to my business is giving me the ability to provide better customer support.&amp;#8221;
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Enter Exceptionless&lt;/h2&gt;
&lt;p&gt;As I’ve been growing my own SaaS business for referral software, called &lt;a href=&quot;https://referralrock.com/&quot; target=&quot;_blank&quot;&gt;Referral Rock&lt;/a&gt;, I realized there were times my old solution wasn’t effectively capturing all the exceptions and I would have to venture into the Event Log to find out what happened. Also, I liked being able to view the production server remotely, but my little web pages got lost somewhere and I wasn’t excited about coding them again. Who likes to code the same thing more than once? Not I.&lt;/p&gt;
&lt;blockquote style=&quot;margin-top:20px;&quot;&gt;
  &lt;p&gt;
    &amp;#8220;I could see details on the requests, browser cookies, user identity&amp;#8230; all much more than I could see using my old solution.&amp;#8221;
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So that led me to look for other solutions to view my exceptions remotely, which is when I found Exceptionless. With the help of support, I got it up and running fairly quickly. The guys at Exceptionless were very responsive and helpful in getting me setup.&lt;/p&gt;
&lt;h3&gt;Usage &amp;amp; Evaluation&lt;/h3&gt;
&lt;p&gt;Being a startup, I was initially using the free version for about 2 weeks and was &lt;strong&gt;blown away&lt;/strong&gt;. The UI was great and I love the AngularJS based responsiveness. Soon I had a great pulse on my production server. I could see details on the requests, browser cookies, user identity… all much more than I could see using my old solution. Once I had it set up, I started to see the benefits using other types of events in Exceptionless, such as logging. I started adding some logs when I was debugging an issue with a customer, and it worked great.&lt;/p&gt;
&lt;blockquote style=&quot;margin-top:20px;&quot;&gt;
  &lt;p&gt;
    &amp;#8220;With the help of support, I got it up and running fairly quickly. The guys at Exceptionless were very responsive and helpful in getting me setup.&amp;#8221;
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One &lt;strong&gt;huge benefit&lt;/strong&gt; Exceptionless adds to my business is giving me the ability to provide better customer support. Not only do I know when errors are happening, but also who is seeing them. This allows me to have an opportunity to reach out to that specific customer, once the issue is fixed, and say something like “I saw you had and error when you did XYZ, I wanted to let you know it is fixed now so you can try it again”. Taking opportunities to provide that level of service has helped my business.&lt;/p&gt;
&lt;p&gt;We are now running a paid version of Exceptionless with multiple projects and I look forward to adding more logs and playing with other features to give me even greater visibility into my web app. Thanks guys!&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:20px;&quot;&gt;&lt;i&gt;– Joshua Ho // Founder, &lt;a href=&quot;https://referralrock.com/&quot; target=&quot;_blank&quot;&gt;Referral Rock&lt;/a&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;
&lt;hr style=&quot;margin: 10px 0;&quot;&gt;
&lt;p style=&quot;text-align: center;margin-top: 45px;margin-bottom: -50px;&quot;&gt;
  &lt;span style=&quot;font-size:100px&quot;&gt;&amp;rdquo;&lt;/span&gt;
&lt;/p&gt;
&lt;h2&gt;No – Thank You, Josh!&lt;/h2&gt;
&lt;p&gt;We love to see people enjoying Exceptionless – it’s our baby, and we’ve put a lot of blood, sweat, and tears (I blame Blake) into it. Keep rocking it with Referral Rock!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-02-10-add-reverse-geocoding-to-your-app/"/>
    <updated>2016-02-10T14:56:22-06:00</updated>
    <id>https://exceptionless.com/2016-02-10-add-reverse-geocoding-to-your-app/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-14112&quot; src=&quot;http://exceptionless.com/assets/reverse-geocoding-header.jpg&quot; alt=&quot;Reverse Geocoding&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;14112&quot; srcset=&quot;https://exceptionless.com/assets/reverse-geocoding-header.jpg 708w, https://exceptionless.com/assets/reverse-geocoding-header-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;We recently introduced reverse geocoding into Exceptionless and are now adding features to make full use of it.&lt;/p&gt;
&lt;p&gt;What we’d like to do in this blog article is &lt;strong&gt;walk any interested developers through the process of adding it to their own app.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We’ll talk about the resources and services we’re using to pull it off, why we chose them, and give you code snippets for implementation. It’s all open source, so we’ve also included links to all the relevant code in hopes it will make your life easier!&lt;/p&gt;
&lt;p&gt;Lets check it out.&lt;/p&gt;
&lt;h2&gt;What is Reverse Geocoding?&lt;/h2&gt;
&lt;!--more--&gt;
&lt;p&gt;It’s the process of taking geo coordinates or an IP Address and resolving it to a physical address (E.G., city, county, state/province, country).&lt;/p&gt;
&lt;h3&gt;Why You Need It&lt;/h3&gt;
&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-14104&quot; src=&quot;http://exceptionless.com/assets/user-event-geo-location.jpg&quot; alt=&quot;Reverse Geocoding - User Location&quot; width=&quot;359&quot; height=&quot;49&quot; data-id=&quot;14104&quot; srcset=&quot;https://exceptionless.com/assets/user-event-geo-location.jpg 359w, https://exceptionless.com/assets/user-event-geo-location-300x41.jpg 300w&quot; sizes=&quot;(max-width: 359px) 100vw, 359px&quot;&gt; 
&lt;p&gt;Wouldn’t it be nice if you could &lt;strong&gt;provide location services to your users automatically&lt;/strong&gt;? Maybe help them fill in a shipping form from a zip code or there current location?&lt;/p&gt;
&lt;p&gt;With the launch of Exceptionless 2.0 we added a geo property to all events. This allows us to translate valid latitude and longitude coordinates into a physical location. Our goal was to begin capturing the data then and enable different scenarios and uses later. This also allowed us to &lt;strong&gt;show end users where their customers events are being submitted from.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;What does it cost?&lt;/h3&gt;
&lt;p&gt;One of our primary goals with Exceptionless is to be &lt;strong&gt;completely open source and easy to use&lt;/strong&gt; (both in setting up self hosting and using the product). We had to take this into account when picking any library or service, because we want a painless setup and no additional costs for self hosters, all while adding additional value!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note&lt;/strong&gt; that if you love the services we use, you should look into using one of their paid plans or at least promoting them with a positive review, shout out, etc (everyone needs to eat at the end of the day, right?).&lt;/p&gt;
&lt;p&gt;After researching many different services, we ended up goin&lt;/p&gt;
&lt;p&gt;g with &lt;a href=&quot;http://dev.maxmind.com/geoip/geoip2/geolite2/&quot; target=&quot;_blank&quot;&gt;GeoLite2’s free, offline, downloadable databases&lt;/a&gt;. These databases are &lt;strong&gt;free and updated once a month&lt;/strong&gt;, but if you require a more accurate and up-to-date database they offer a paid subscription. We also use their &lt;a href=&quot;https://github.com/maxmind/GeoIP2-dotnet&quot; target=&quot;_blank&quot;&gt;open source library&lt;/a&gt; for interacting with the database in memory.&lt;/p&gt;
&lt;h2&gt;Automating the GeoIP Database Download&lt;/h2&gt;
&lt;p&gt;We use our very own &lt;a href=&quot;https://github.com/exceptionless/Foundatio#jobs&quot; target=&quot;_blank&quot;&gt;Foundatio Jobs&lt;/a&gt; to download the most up-to-date database. Foundatio Jobs allows us to run the job in process or out of process on a schedule in Azure.&lt;/p&gt;
&lt;p&gt;Alternatively, you could use the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/DownloadGeoIPDatabase.ps1&quot; target=&quot;_blank&quot;&gt;PowerShell script&lt;/a&gt; we created for downloading the database.  &lt;code&gt;&amp;lt;a href=&amp;quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Jobs/DownloadGeoIPDatabaseJob.cs&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;DownloadGeoIPDatabaseJob&amp;lt;/a&amp;gt;&lt;/code&gt; downloads the database over http and extracts the file contents to disk using &lt;a href=&quot;https://github.com/exceptionless/Foundatio#file-storage&quot; target=&quot;_blank&quot;&gt;Foundatio Storage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please feel free to &lt;strong&gt;take a look out our job&lt;/strong&gt; for a complete sample including logging and error handling:&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = new HttpClient();
var file = await client.GetAsync(&quot;http://geolite.maxmind.com/download/geoip/database/GeoLite2-City.mmdb.gz&quot;, context.CancellationToken);
if (!file.IsSuccessStatusCode)
    throw new Exception(&quot;Unable to download GeoIP database.&quot;);

using (GZipStream decompressionStream = new GZipStream(await file.Content.ReadAsStreamAsync(), CompressionMode.Decompress))
    await _storage.SaveFileAsync(&quot;GeoLite2-City.mmdb”, decompressionStream, context.CancellationToken);&lt;/pre&gt;
&lt;h2&gt;Looking up a Physical Address from an IP Address&lt;/h2&gt;
&lt;h4&gt;Resolving the geo coordinates into a location&lt;/h4&gt;
&lt;p&gt;After we automate the database download, the next step involves loading the database in memory using the &lt;a href=&quot;https://github.com/maxmind/GeoIP2-dotnet&quot; target=&quot;_blank&quot;&gt;open source library&lt;/a&gt; provided by MaxMind and querying by the IP address. The code below will do very basic IP validation and lookup the records using the API.&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;private DatabaseReader _database;
public async Task&amp;lt;GeoResult&amp;gt; ResolveIpAsync(string ip, CancellationToken cancellationToken = new CancellationToken()) {
    if (String.IsNullOrWhiteSpace(ip) || (!ip.Contains(&quot;.&quot;) &amp;&amp; !ip.Contains(&quot;:&quot;)))
        return null;
            
    var database = await GetDatabaseAsync(cancellationToken);
    if (database == null)
        return null;
            
    try {
        var city = database.City(ip);
        if (city?.Location != null) {
            return new GeoResult {
                Latitude = city.Location.Latitude,
                Longitude = city.Location.Longitude,
                Country = city.Country.IsoCode,
                Level1 = city.MostSpecificSubdivision.IsoCode,
                Locality = city.City.Name
            };
        }
    } catch (Exception) {
        // The result was not found in the database
    }

    return null;
}

private async Task&amp;lt;DatabaseReader&amp;gt; GetDatabaseAsync(CancellationToken cancellationToken) {
    if (_database != null)
        return _database;
    
    if (!await _storage.ExistsAsync(&quot;GeoLite2-City.mmdb&quot;)) {
        Logger.Warn().Message(&quot;No GeoIP database was found.&quot;).Write();
        return null;
    }

    try {
        using (var stream = await _storage.GetFileStreamAsync(&quot;GeoLite2-City.mmdb&quot;, cancellationToken))
            _database = new DatabaseReader(stream);
    } catch (Exception) {
        // Unable to open GeoIP database.
    }

    return _database;
}&lt;/pre&gt;
&lt;p&gt;Then, just call the &lt;code&gt;ResolveIPAsync&lt;/code&gt; method with an IP address to look up the location details.&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;var location = await ResolveIPAsync(“YOUR_IP_ADDRESS_HERE”);&lt;/pre&gt;
&lt;p&gt;Feel free to take a look at &lt;code&gt;&amp;lt;a href=&amp;quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Geo/MaxMindGeoIPService.cs&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;MaxMindGeoIPService&amp;lt;/a&amp;gt;&lt;/code&gt; for a complete sample that includes logging, error handling, caching of the results, and IP validation for higher lookup throughput. We’ve spent the time writing tests and optimizing it to ensure &lt;strong&gt;its rock solid and works great&lt;/strong&gt;. So feel free to grab our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/tree/master/Source/Core/Geo&quot; target=&quot;_blank&quot;&gt;IGeoIPService interfaces and models&lt;/a&gt; and use them in your app.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It’s worth noting&lt;/strong&gt; that in our app, we use the IP address provided in the event. This could come from a server request or the actual machine’s IP address. We also fall back to the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Api/Controllers/EventController.cs#L617&quot; target=&quot;_blank&quot;&gt;API consumer’s client IP address&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Looking up a Physical Address from Geo Coordinates&lt;/h3&gt;
&lt;p&gt;As stated previously, every event submitted to Exceptionless has a geo property that can be set. If it’s set, we will attempt to look up your location by the geo coordinates using a third party service. We used the open source &lt;a href=&quot;https://github.com/chadly/Geocoding.net&quot; target=&quot;_blank&quot;&gt;Geocoding.net library&lt;/a&gt;, which abstracts the major different third party reverse geocode services into an easy to use API (options are always good!).&lt;/p&gt;
&lt;p&gt;After we decided on the library, we evaluated a few API/lookup services based on cost and accuracy. We ended up going with the &lt;a href=&quot;https://developers.google.com/maps/documentation/geocoding/usage-limits&quot; target=&quot;_blank&quot;&gt;Google Maps GeoCoding API&lt;/a&gt;. They offer 2500 free requests per day and are one of the most used location services in the world.&lt;/p&gt;
&lt;p&gt;Next, let’s write the code that will look up our location from a latitude and longitude. You can find our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Insulation/Geo/GoogleGeocodeService.cs&quot; target=&quot;_blank&quot;&gt;complete example here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remember to get your free api key from Google before running the code below.&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;public async Task&amp;lt;GeoResult&amp;gt; ReverseGeocodeAsync(double latitude, double longitude, CancellationToken cancellationToken = new CancellationToken()) {
    var geocoder = new GoogleGeocoder(&quot;YOUR_API_KEY&quot;);
    var addresses = await geocoder.ReverseGeocodeAsync(latitude, longitude, cancellationToken);
    var address = addresses.FirstOrDefault();
    if (address == null)
        return null;

    return new GeoResult {
        Country = address[GoogleAddressType.Country]?.ShortName,
        Level1 = address[GoogleAddressType.AdministrativeAreaLevel1]?.ShortName,
        Level2 = address[GoogleAddressType.AdministrativeAreaLevel2]?.ShortName,
        Locality = address[GoogleAddressType.Locality]?.ShortName,
        Latitude = latitude,
        Longitude = longitude
    };
}
&lt;/pre&gt;
&lt;p&gt;Finally, just call the &lt;code&gt;ReverseGeocodeAsync&lt;/code&gt; method with a latitude and longitude to look up the location details.&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;var location = await ResolveGeocodeAsync(44.5241, -87.9056);&lt;/pre&gt;
&lt;h2&gt;Final Thoughts on Reverse Geocoding&lt;/h2&gt;
&lt;p&gt;It took us a bit of work and research initially to get everything working flawlessly for location services. We hope you grab our code off of GitHub to &lt;strong&gt;save yourself all that work&lt;/strong&gt;. Also, it’s worth noting that we use &lt;a href=&quot;https://github.com/exceptionless/foundatio#caching&quot; target=&quot;_blank&quot;&gt;Foundatio Caching&lt;/a&gt; to cache the results of location lookups. It drastically increased the performance and cut down on our limited number of requests to rate-limited third party services!&lt;/p&gt;
&lt;p&gt;We also queue work items to look up the geo location since that can be an expensive operation. So, please take this into consideration anytime you are interacting with a third party service.&lt;/p&gt;
&lt;h2&gt;Feedback? Questions?&lt;/h2&gt;
&lt;p&gt;Get in touch on &lt;a href=&quot;https://github.com/exceptionless&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt; or leave a comment below to let us know your thoughts or questions. We’re always open to suggestions and will do what we can to help you out if you’re having issues with implementation!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-02-26-new-releases-exceptionless-3-2-1-net-client-3-3-5-and-ui-2-3-1/"/>
    <updated>2016-02-26T11:44:06-06:00</updated>
    <id>https://exceptionless.com/2016-02-26-new-releases-exceptionless-3-2-1-net-client-3-3-5-and-ui-2-3-1/</id>
    <content type="html">&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-14148&quot; src=&quot;http://exceptionless.com/assets/blog-header-image-3.2.1.jpg&quot; alt=&quot;Exceptionless error logging&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;14148&quot; srcset=&quot;https://exceptionless.com/assets/blog-header-image-3.2.1.jpg 708w, https://exceptionless.com/assets/blog-header-image-3.2.1-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;/p&gt;
&lt;p&gt;Since the &lt;a href=&quot;http://exceptionless.com/new-releases-for-all-the-codes-exceptionless-3-2/&quot;&gt;last major release&lt;/a&gt; cycle, we’ve made several minor releases, including Exceptionless 3.2.1, Exceptionless.NET 3.3.5, and Exceptionless.UI 2.3.1.&lt;/p&gt;
&lt;p&gt;Lets take a look at some of the highlights, and you can check out the full release notes on each at the provided links, below.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless 3.2.1&lt;/h2&gt;
&lt;p&gt;We fixed a few minor bugs made a few improvements to the main platform. Check them out!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Free accounts can now look up events by reference ID (bug).&lt;/li&gt;
&lt;li&gt;Improvements to posting events via GET.&lt;/li&gt;
&lt;li&gt;Items can now be added and removed from project data (bug).&lt;/li&gt;
&lt;li&gt;Users can log directly in to an existing account if they attempt to sign up with the same credentials now, rather than getting an error.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/VikzSharma&quot; target=&quot;_blank&quot;&gt;@VikzSharma&lt;/a&gt; fixed the “too many bad attempts” lockout feature. Thanks!&lt;/li&gt;
&lt;li&gt;There is also a once-an-hour limit on user signups and email address changes thanks to @VikzSharma.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Upgrading:&lt;/strong&gt; Only self-hosters need to worry about upgrading – see details on the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/releases/tag/v3.2.1&quot; target=&quot;_blank&quot;&gt;full release notes.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless.NET 3.3.3 – 3.3.6&lt;/h2&gt;
&lt;p&gt;We’ve pushed out several minor releases of the .NET client in the last few weeks. I’ll cover the major stuff here, but you can view the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/releases&quot; target=&quot;_blank&quot;&gt;full release notes and get the latest source on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;3.3.6&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;An issue causing query string params and cookies to be renamed when dictionary key names were being changed has been fixed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;client.Register()&lt;/code&gt; now respects your session setting.&lt;/li&gt;
&lt;li&gt;Manual stacking now uses a model instead of a string, which lets us send a stack title and key value pairs telling the event how to be stacked. More info on the release page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;If you are using manual stacking&lt;/strong&gt;, this is a required update. &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/releases/tag/v3.3.6&quot; target=&quot;_blank&quot;&gt;See the release page for the latest source.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;3.3.5&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;New extension methods have been added for events, making it easier to set valid geo coordinates, tags, and more.&lt;/li&gt;
&lt;li&gt;A few new variables and parameters have been added for session heartbeats and id setting. See release notes for details.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/InlineAsm&quot; target=&quot;_blank&quot;&gt;@InlineASM&lt;/a&gt; fixed an issue for geolocations that have different separators – thanks!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.3.4&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ahmettaha&quot; target=&quot;_blank&quot;&gt;@ahmettaha&lt;/a&gt; added SubmitLog and CreateLog overloads without source parameters. Thanks!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ExceptionlessClient.Default.Configuration.UseDebugLogger()&lt;/code&gt; only worked in debug mode with client source, so we replaced it with &lt;code&gt;ExceptionlessClient.Default.Configuration.UseInMemoryLogger()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The serializer wasn’t always being passed through so it could get known event data helper methods, which was causing some silent failures – this has been fixed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3.3.3&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/adamzolotarev&quot; target=&quot;_blank&quot;&gt;@adamzolotarev&lt;/a&gt; added the ability to take complete control over how an event is stacked (be careful) by adding the ability to do manual stacking by calling &lt;code&gt;EventBuilder.SetManualStackingKey(&amp;quot;MyStackingKey&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can now ignore events by user agent bot filter when you call &lt;code&gt;(ExceptionlessClient.Default.Configuration.AddUserAgentBotPatterns(&amp;quot;*bot*&amp;quot;))&lt;/code&gt; on the client side or edit project settings server side.&lt;/li&gt;
&lt;li&gt;The default max size limit of &lt;code&gt;RequestInfo&lt;/code&gt; has been increased.&lt;/li&gt;
&lt;li&gt;Extra nesting has been reduced by merging &lt;code&gt;exception.Data&lt;/code&gt; properties into the &lt;code&gt;Error.Data&lt;/code&gt; dictionary.&lt;/li&gt;
&lt;li&gt;Bug Fix: &lt;code&gt;AggregatedExceptiones&lt;/code&gt; that contain more than one inner exception are no longer discarded.&lt;/li&gt;
&lt;li&gt;Bug Fix: Machines with a Non-English locale will not process events when &lt;code&gt;SetGeo&lt;/code&gt; is used.&lt;/li&gt;
&lt;li&gt;Bug Fix: &lt;code&gt;ArgumentNullException&lt;/code&gt; will no longer be thrown if post data or cookies contain a null key.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exceptionless.JavaScript 1.3.2&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/frankebersoll&quot; target=&quot;_blank&quot;&gt;@frankebersoll&lt;/a&gt; contributed by adding support for offline storage, which can be enabled by calling &lt;code&gt;client.config.useLocalStorage()&lt;/code&gt;. Thanks!&lt;/li&gt;
&lt;li&gt;User agent bots can be ignored via a filter now with &lt;code&gt;(`client.config.addUserAgentBotPatterns(&amp;quot;bot&amp;quot;))&lt;/code&gt; on the client side or via project settings on the server side.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/frankebersoll&quot; target=&quot;_blank&quot;&gt;@frankebersoll&lt;/a&gt; also added support for manual stacking (be careful! grants complete control). See release notes for instructions.&lt;/li&gt;
&lt;li&gt;The implementation of the angular &lt;code&gt;$stateChangeError&lt;/code&gt; has also been improved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/releases/tag/v1.3.2&quot; target=&quot;_blank&quot;&gt;Full release notes&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless.UI 2.3.1&lt;/h2&gt;
&lt;p&gt;There’s nothing major to report with the UI, just a few tweaks.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The project settings pages has been reworked by adding the ability to specify user namespaces, and user agents that the clients will ignore. @VikzSharma also fixed an issue where the single page app could be clickjacked – thanks again!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/releases/tag/v2.3.1&quot; target=&quot;_blank&quot;&gt;Full release notes and latest release download.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Questions? Let Us Know!&lt;/h2&gt;
&lt;p&gt;If you’ve got any questions about any of the release notes above, please don’t hesitate to let us know by commenting below or submitting an issue to the respective GitHub repo, above.&lt;/p&gt;
&lt;p&gt;Thanks for checking out our release notes.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-03-08-custom-event-stacking-in-exceptionless/"/>
    <updated>2016-03-08T13:34:02-06:00</updated>
    <id>https://exceptionless.com/2016-03-08-custom-event-stacking-in-exceptionless/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14180&quot; src=&quot;http://exceptionless.com/assets/custom-event-stacking-graphicl.png&quot; alt=&quot;custom event stacking with exceptionless&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14180&quot; srcset=&quot;https://exceptionless.com/assets/custom-event-stacking-graphicl.png 260w, https://exceptionless.com/assets/custom-event-stacking-graphicl-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;Sometimes you just need things to be your way.&lt;/p&gt;
&lt;p&gt;We get it… your morning coffee, folded towels, and how events stack (group) in your event reporting application should be controllable and customizable.&lt;/p&gt;
&lt;p&gt;Well, thanks to a great suggestion by &lt;a href=&quot;https://github.com/adamzolotarev&quot; target=&quot;_blank&quot;&gt;@adamzolotarev&lt;/a&gt;, now they are! Well, the events, at least.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Why Custom Event Stacking?&lt;/h2&gt;
&lt;p&gt;We do our best to group your events into relevant and smartly-named stacks, but there are cases where you may want to specifically name a stack and attribute certain events to it for organization, reporting, troubleshooting, or other reasons.&lt;/p&gt;
&lt;p&gt;To facilitate this need, we created &lt;code&gt;SetManualStackingKey&lt;/code&gt;, which both .NET and JavaScript client users can set.&lt;/p&gt;
&lt;h2&gt;How Do I Create Custom Event Stacks?&lt;/h2&gt;
&lt;p&gt;Adding your own custom stacking to events in Exceptionless is super easy. Below are examples for both .NET and JavaScript.&lt;/p&gt;
&lt;p&gt;In these examples, we are using &lt;code&gt;setManualStackingKey&lt;/code&gt; and naming the custom stack “MyCustomStackingKey”.&lt;/p&gt;
&lt;p&gt;So, any events you use the below for will be a part of the custom stack, and all other events, exceptiones, logs, feature usages, etc will still be stacked automatically, like normal, by the app.&lt;/p&gt;
&lt;h3&gt;.NET Custom Event Stack Example&lt;/h3&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;try {
    throw new ApplicationException(&quot;Unable to create order from quote.&quot;);
} catch (Exception ex) {
    ex.ToExceptionless().SetManualStackingKey(&quot;MyCustomStackingKey&quot;).Submit();
}
&lt;/pre&gt;
&lt;p&gt;Alternatively, you can set the stacking directly on an event (e.g., inside a plugin).&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;event.SetManualStackingKey(&quot;MyCustomStackingKey&quot;);&lt;/pre&gt;
&lt;h3&gt;JavaScript Custom Event Stack Example&lt;/h3&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;var client = exceptionless.ExceptionlessClient.default;
// Node.Js
// var client = require(&#39;exceptionless&#39;).ExceptionlessClient.default;

try {
  throw new Error(&#39;Unable to create order from quote.&#39;);
} catch (error) {
  client.createException(error).setManualStackingKey(&#39;MyCustomStackingKey&#39;).submit();
}&lt;/pre&gt;
&lt;h2&gt;How Do We Stack Up?&lt;/h2&gt;
&lt;p&gt;We’re always interested in what you think of Exceptionless’ features and functionality, so let us know if you find custom stacking useful, need help implementing it, or just want to chat over on &lt;a href=&quot;https://github.com/exceptionless&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-03-16-simple-app-deployment-azure-continuous-deployment-github/"/>
    <updated>2016-03-16T13:49:24-05:00</updated>
    <id>https://exceptionless.com/2016-03-16-simple-app-deployment-azure-continuous-deployment-github/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14224&quot; src=&quot;http://exceptionless.com/assets/cloud-icon.png&quot; alt=&quot;simple app deployment&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14224&quot; srcset=&quot;https://exceptionless.com/assets/cloud-icon.png 260w, https://exceptionless.com/assets/cloud-icon-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;We’ve learned a lot about simple app deployment since we first started Exceptionless. We initially went with what everyone else was doing (Octopus Deploy), but over time we thought we could greatly simplify and automate it, letting us focus on what matters, improving the product!&lt;/p&gt;
&lt;p&gt;Through a lot of testing and iterations of our deployment process, we think we finally nailed it.&lt;/p&gt;
&lt;p&gt;As such, we’d like to share with the community how we use Microsoft Azure Continuous Deployment and GitHub for **awesomely simple deployments. **And, how you can too. See the details of implementing this deploy workflow later in the article, below.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Deployment History&lt;/h2&gt;
&lt;h3&gt;In the Beginning&lt;/h3&gt;
&lt;p&gt;When we first started Exceptionless, we deployed it as a monolithic application, meaning the server and UI were one piece, or app. We used Octopus Deploy to deploy to a single IIS machine, which involved setting up a website and server for the Octopus Deploy service and configuring build agents, on each server we deployed to, that could deploy build artifacts.&lt;/p&gt;
&lt;h3&gt;The Move to Azure&lt;/h3&gt;
&lt;p&gt;After a year or so of managing Exceptionless on colocation boxes in a Dallas data center, we realized that &lt;strong&gt;we didn’t want to manage hardware anymore&lt;/strong&gt; and we could scale easier on a managed service like Azure. So, we moved to Azure, where we had to set up a VM just to manage deployments with Octopus Deploy. There were also issues that we ran into with deploying to Azure WebSitThis was annoying, since every time we wanted to do a release we had to log in and tell the system to deploy to production.&lt;/p&gt;
&lt;p&gt;We knew there had to be a better way.&lt;/p&gt;
&lt;h3&gt;Two Steps Forward…&lt;/h3&gt;
&lt;p&gt;Soon, we decided to split the UI and Server apps so we could deploy and work on them independently. This also meant they could scale independently and one change to either wouldn’t cause the whole site to go down when deploying. Splitting the two helped a lot, but it &lt;strong&gt;added more work&lt;/strong&gt; as we now had to manage two Octopus Deploy projects. So, we started looking at the &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/web-sites-publish-source-control/&quot; target=&quot;_blank&quot;&gt;Continuous Deployment in Azure&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Aha! Eureka! Solution Time!&lt;/h3&gt;
&lt;p&gt;We researched further and found out that if we used &lt;a href=&quot;https://github.com/nvie/gitflow&quot; target=&quot;_blank&quot;&gt;Git Flow&lt;/a&gt; as a development workflow, we could ditch Octopus Deploy completely, remove that dependency, and just use Git push to manage our deployments.&lt;/p&gt;
&lt;p&gt;With Git Flow, you do all your work in feature branches and the &lt;strong&gt;master branch is always stable&lt;/strong&gt;. This allows us to set up GitHub deployment on the master and deploy to Azure automatically, with no work required! So anytime we push to the GitHub master branch, it automatically deploys to production on Azure. That simple!&lt;/p&gt;
&lt;h4&gt;Here is the BASIC workflow:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;We create a new feature branch, then work on that branch until it is completed and tested. Testing is done on the website that is currently pointed to the feature branch, which is separate from production.&lt;/li&gt;
&lt;li&gt;When we commit to any branch, our continuous integration (CI) server picks up the changes via a GitHub webhook, pulls them down, then builds the project.&lt;/li&gt;
&lt;li&gt;We then take all of the build artifacts and push them to a second GitHub repository using the same branch that the code was pushed to (for example, the master branch). This allows you to see exactly what artifacts change between releases (stateless too) and different branches.&lt;/li&gt;
&lt;li&gt;Those changes are then automatically pushed via Azure Git Deploy.&lt;/li&gt;
&lt;li&gt;Profit!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;This is very slick!&lt;/strong&gt; Since we push artifacts to the same branch they were built onto a build repository. We can then set up different environments that get auto deployed when we push to that branch. For example: When we are working on a feature, we commit to our branch. We can then set up a new website in Azure that pulls from the build server’s Git artifacts branch for that feature. This allows us to test and automate environments!&lt;/p&gt;
&lt;h2&gt;Detailed Continuous Deployment Setup&lt;/h2&gt;
&lt;p&gt;Here are the details on our solution for simple app deployment using GitHub and Azure.&lt;/p&gt;
&lt;h3&gt;1. Use AppVeyor to build the app.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/appveyor.yml&quot; target=&quot;_blank&quot;&gt;Here’s our code.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;2. Store build artifacts in a separate GitHub artifacts repository.&lt;/h3&gt;
&lt;p&gt;This works really well because you can see the entire history of your build artifacts and browse their contents. Plus, GitHub hosts it for free!&lt;/p&gt;
&lt;p&gt;We found that we could &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/Push-Artifacts.ps1#L71&quot; target=&quot;_blank&quot;&gt;format the commit message with a specific format&lt;/a&gt; that GitHub could understand and parse into different links. We can click on the “Commit:” part of the message to link to the actual commit that is building to see exactly has changed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/github-build-history-artifacts.jpg&quot; rel=&quot;attachment wp-att-14204&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-14204&quot; src=&quot;http://exceptionless.com/assets/github-build-history-artifacts-1024x380.jpg&quot; alt=&quot;github build history artifacts&quot; width=&quot;940&quot; height=&quot;349&quot; data-id=&quot;14204&quot; srcset=&quot;https://exceptionless.com/assets/github-build-history-artifacts-1024x380.jpg 1024w, https://exceptionless.com/assets/github-build-history-artifacts-300x111.jpg 300w, https://exceptionless.com/assets/github-build-history-artifacts-768x285.jpg 768w, https://exceptionless.com/assets/github-build-history-artifacts.jpg 1402w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We can then click on the build to see what artifacts changed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/gitHube-build-history-details.jpg&quot; rel=&quot;attachment wp-att-14205&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-14205&quot; src=&quot;http://exceptionless.com/assets/gitHube-build-history-details-1024x193.jpg&quot; alt=&quot;gitHub build history details&quot; width=&quot;940&quot; height=&quot;177&quot; data-id=&quot;14205&quot; srcset=&quot;https://exceptionless.com/assets/gitHube-build-history-details-1024x193.jpg 1024w, https://exceptionless.com/assets/gitHube-build-history-details-300x57.jpg 300w, https://exceptionless.com/assets/gitHube-build-history-details-768x145.jpg 768w, https://exceptionless.com/assets/gitHube-build-history-details.jpg 1494w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another great thing about using Git to store your artifacts is that you can easily clone the artifacts to your local machine to see the exact files that are being used in a specific environment.&lt;/p&gt;
&lt;p&gt;The artifacts repository has branches to match the branches of our code repo so we have separate build artifacts for each branch. This also means that we can just merge the feature into master when we are done and that will cause the production website that is pointed to our master repository to automatically get updated. So, it’s as simple as merge your branch to master to promote a build to production.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/merge-branch-master-promote-build-production.jpg&quot; rel=&quot;attachment wp-att-14206&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-14206&quot; src=&quot;http://exceptionless.com/assets/merge-branch-master-promote-build-production.jpg&quot; alt=&quot;merge-branch-master promote build production&quot; width=&quot;624&quot; height=&quot;430&quot; data-id=&quot;14206&quot; srcset=&quot;https://exceptionless.com/assets/merge-branch-master-promote-build-production.jpg 624w, https://exceptionless.com/assets/merge-branch-master-promote-build-production-300x207.jpg 300w&quot; sizes=&quot;(max-width: 624px) 100vw, 624px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One issue&lt;/strong&gt; with this approach is that the repo can get large because we are storing binary files that change on every build. We are looking into using &lt;a href=&quot;https://git-lfs.github.com/&quot;&gt;Git Large File Support&lt;/a&gt; to fix this issue.&lt;/p&gt;
&lt;h3&gt;3. Automate pushing of artifacts to a secondary GitHub repository.&lt;/h3&gt;
&lt;p&gt;For our .NET application, &lt;a href=&quot;https://github.com/exceptionless/Exceptionless&quot; target=&quot;_blank&quot;&gt;Exceptionless&lt;/a&gt;, we invoke a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/appveyor.yml#L46-L47&quot; target=&quot;_blank&quot;&gt;PowerShell script&lt;/a&gt; on post build to clone and commit the changes to the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/Push-Artifacts.ps1&quot; target=&quot;_blank&quot;&gt;Git artifacts repository&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Our first step is to &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/Push-Artifacts.ps1#L10-L11&quot; target=&quot;_blank&quot;&gt;clone the existing build artifacts repo to an artifacts directory&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Next, we &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/Push-Artifacts.ps1#L20-L28&quot; target=&quot;_blank&quot;&gt;change to the same branch that we are currently building, if it doesn’t exist we create it&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Then, we &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/Push-Artifacts.ps1#L35-L36&quot; target=&quot;_blank&quot;&gt;remove all existing files in the artifacts folder&lt;/a&gt;. This ensures we don’t have any conflicts and we can see exactly what was added or removed.&lt;/li&gt;
&lt;li&gt;Next, we &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/Push-Artifacts.ps1#L38-L60&quot; target=&quot;_blank&quot;&gt;copy our build artifacts into the artifacts folder&lt;/a&gt;. This allows us fine grained control over our artifacts.&lt;/li&gt;
&lt;li&gt;Next, we &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/Push-Artifacts.ps1#L62-L67&quot; target=&quot;_blank&quot;&gt;try to commit all artifacts to the artifacts repository&lt;/a&gt;. If there were no changes between the last build, then we exit.&lt;/li&gt;
&lt;li&gt;Next, we &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/Push-Artifacts.ps1#L69-L78&quot; target=&quot;_blank&quot;&gt;push the artifacts to our GitHub artifacts repository&lt;/a&gt;, which will then trigger Azure Continuous Deployment to pick up the changes.&lt;/li&gt;
&lt;li&gt;Finally, we &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Libraries/Push-Artifacts.ps1#L80-L87&quot; target=&quot;_blank&quot;&gt;create tag the artifacts repository&lt;/a&gt; which points to the specific GitHub commit we are building in our main repository.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;For our static &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI&quot; target=&quot;_blank&quot;&gt;Angular JavaScript app (UI)&lt;/a&gt;,&lt;/strong&gt; we invoke a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/blob/master/src/Gruntfile.js#L51&quot; target=&quot;_blank&quot;&gt;Grunt publish task&lt;/a&gt; from our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/blob/master/appveyor.yml#L20&quot; target=&quot;_blank&quot;&gt;post build event&lt;/a&gt;. The publish task called into a &lt;a href=&quot;https://github.com/tschaub/grunt-gh-pages&quot; target=&quot;_blank&quot;&gt;gh-pages&lt;/a&gt; &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/blob/master/src/grunt/task-configs/gh-pages.js&quot; target=&quot;_blank&quot;&gt;task&lt;/a&gt; that publishes our built dist folder to the GitHub artifacts repository automatically.&lt;/p&gt;
&lt;h3&gt;4. Point Azure Continuous Deployment to the Artifacts Repository&lt;/h3&gt;
&lt;p&gt;It will see when new artifact commits happen and automatically deploy the changes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/azure-sees-new-artifact-commit-and-deploys.jpg&quot; rel=&quot;attachment wp-att-14207&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-14207&quot; src=&quot;http://exceptionless.com/assets/azure-sees-new-artifact-commit-and-deploys-1024x846.jpg&quot; alt=&quot;azure sees new artifact commit and deploys&quot; width=&quot;940&quot; height=&quot;777&quot; data-id=&quot;14207&quot; srcset=&quot;https://exceptionless.com/assets/azure-sees-new-artifact-commit-and-deploys-1024x846.jpg 1024w, https://exceptionless.com/assets/azure-sees-new-artifact-commit-and-deploys-300x248.jpg 300w, https://exceptionless.com/assets/azure-sees-new-artifact-commit-and-deploys-768x635.jpg 768w, https://exceptionless.com/assets/azure-sees-new-artifact-commit-and-deploys.jpg 1118w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Azure Continuous Deployment is another Git repository that we can easily view to see the history of deployments to each of our sites. It also allows us to easily roll back to previous versions.&lt;/p&gt;
&lt;h3&gt;5. Use Environment Variables to Override Config Settings Per Environment&lt;/h3&gt;
&lt;p&gt;Azure Websites makes this very easy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/override-config-settings-environment-variables.jpg&quot; rel=&quot;attachment wp-att-14208&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-14208&quot; src=&quot;http://exceptionless.com/assets/override-config-settings-environment-variables-1024x497.jpg&quot; alt=&quot;azure override config settings environment variables&quot; width=&quot;940&quot; height=&quot;456&quot; data-id=&quot;14208&quot; srcset=&quot;https://exceptionless.com/assets/override-config-settings-environment-variables-1024x497.jpg 1024w, https://exceptionless.com/assets/override-config-settings-environment-variables-300x146.jpg 300w, https://exceptionless.com/assets/override-config-settings-environment-variables-768x373.jpg 768w, https://exceptionless.com/assets/override-config-settings-environment-variables.jpg 1128w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;No production settings are stored in source control or artifacts repository.&lt;/p&gt;
&lt;p&gt;For our ASP.NET application, our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Settings.cs&quot; target=&quot;_blank&quot;&gt;settings class&lt;/a&gt; will look up named settings in the following order:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;environment variables&lt;/li&gt;
&lt;li&gt;local config.json file&lt;/li&gt;
&lt;li&gt;app settings&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It will then fall back to a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Utility/SettingsBase.cs#L59&quot; target=&quot;_blank&quot;&gt;default value&lt;/a&gt; if no explicit settings are found.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Configuring our static Angular JavaScript app&lt;/strong&gt; is a bit more work since it can’t look these settings up dynamically at runtime. So instead we add some code to our deployment process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Azure automatically runs a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/blob/master/deploy.sh&quot; target=&quot;_blank&quot;&gt;deploy.sh&lt;/a&gt; file after getting the artifacts via git deploy. It’s sole job is to run a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/blob/master/src/app_data/jobs/triggered/config/run.js&quot; target=&quot;_blank&quot;&gt;node script&lt;/a&gt; that rewrites our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/blob/master/src/app.config.js&quot; target=&quot;_blank&quot;&gt;app.config.js&lt;/a&gt; settings with settings defined in environment variables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You can create multiple Azure websites (think environments) that use Continuous Deployment and point them to multiple artifact branches to support different environments!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pro Tip:&lt;/strong&gt; We created a &lt;a href=&quot;http://local-app.exceptionless.io/&quot;&gt;http://local-app.exceptionless.io&lt;/a&gt; website for our spa website that’s pre-built and points to your localhost Exceptionless server. This allows us to do work on the server part without setting up or configuring a local instance of our spa app. Development made simple!&lt;/p&gt;
&lt;p&gt;We won’t lie, it took some work to get here, but &lt;strong&gt;the good news is you can do this really easily too&lt;/strong&gt;. Please feel free to steal our deployment scripts and modify them for your projects. And let us know if you have questions along the way!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-03-24-filter-improvements-exceptionless-single-page-app/"/>
    <updated>2016-03-24T21:41:13-05:00</updated>
    <id>https://exceptionless.com/2016-03-24-filter-improvements-exceptionless-single-page-app/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14249&quot; src=&quot;http://exceptionless.com/assets/user-experience-search-filter-changes.png&quot; alt=&quot;SPA filter search solutions&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14249&quot; srcset=&quot;https://exceptionless.com/assets/user-experience-search-filter-changes.png 260w, https://exceptionless.com/assets/user-experience-search-filter-changes-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;It’s been a while since we introduced filtering and searching when we launched Exceptionless V2.0, so we decided recently that we wanted to take the feedback we’ve received and do a round of improvements to it.&lt;/p&gt;
&lt;p&gt;You may have already noticed the changes, but if not then the next time you log in you will see that the top bar has changed, giving you much quicker access to filtering and more upfront information.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Filter Changes to the Desktop View&lt;/h2&gt;
&lt;p&gt;For the primary desktop view, we removed the magnifying glass icon in the top bar and simply filled the rest the bar with the filter (search) input box. This eliminates a click to get to the filtering system, and keeps it front and center at all times.&lt;/p&gt;
&lt;p&gt;One &lt;strong&gt;important note&lt;/strong&gt; here is that if you want to show events that have been marked as fixed or hidden, you have to explicitly specify those filters, whereas previously those options were check boxes. So, you can use &lt;code&gt;hidden:false&lt;/code&gt; or &lt;code&gt;hidden:true&lt;/code&gt;, and &lt;code&gt;fixed:true&lt;/code&gt; or &lt;code&gt;fixed:false&lt;/code&gt; to view those events. Naturally, the default is false for both, showing events that have not been hidden or fixed. This means that in order to see both hidden and un-hidden events, you would need to use &lt;code&gt;hidden:false OR hidden:true&lt;/code&gt;. Likewise, for fixed, you would need to use &lt;code&gt;fixed:true OR fixed:false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You’ll notice that the date/time filter has changed as well. Instead of an icon, we now display the current time frame being viewed, once again saving you a click and keeping things in front of you.&lt;/p&gt;
&lt;p&gt;As always, the filter still applies to the chosen time frame only.&lt;/p&gt;
&lt;h3&gt;Before&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/old1.png&quot; rel=&quot;attachment wp-att-14241&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-14241 size-full&quot; src=&quot;http://exceptionless.com/assets/old1.png&quot; alt=&quot;old1&quot; width=&quot;594&quot; height=&quot;251&quot; data-id=&quot;14241&quot; srcset=&quot;https://exceptionless.com/assets/old1.png 594w, https://exceptionless.com/assets/old1-300x127.png 300w&quot; sizes=&quot;(max-width: 594px) 100vw, 594px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/old2.png&quot; rel=&quot;attachment wp-att-14242&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-14242 size-full&quot; src=&quot;http://exceptionless.com/assets/old2.png&quot; alt=&quot;old2&quot; width=&quot;249&quot; height=&quot;291&quot; data-id=&quot;14242&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;After&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/new7.png&quot; rel=&quot;attachment wp-att-14243&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-14243 size-full&quot; src=&quot;http://exceptionless.com/assets/new7.png&quot; alt=&quot;new7&quot; width=&quot;631&quot; height=&quot;59&quot; data-id=&quot;14243&quot; srcset=&quot;https://exceptionless.com/assets/new7.png 631w, https://exceptionless.com/assets/new7-300x28.png 300w&quot; sizes=&quot;(max-width: 631px) 100vw, 631px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/old3.png&quot; rel=&quot;attachment wp-att-14244&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-14244&quot; src=&quot;http://exceptionless.com/assets/old3.png&quot; alt=&quot;old3&quot; width=&quot;463&quot; height=&quot;272&quot; data-id=&quot;14244&quot; srcset=&quot;https://exceptionless.com/assets/old3.png 463w, https://exceptionless.com/assets/old3-300x176.png 300w&quot; sizes=&quot;(max-width: 463px) 100vw, 463px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Mobile Changes &amp;amp; Functionality&lt;/h2&gt;
&lt;p&gt;We also changed the user interface for smaller screens.&lt;/p&gt;
&lt;p&gt;Instead of the icons at the top of the screen, the time frame selector is now a major menu item in the mobile menu and displays the current selection with the filter/search field directly below it.&lt;/p&gt;
&lt;p&gt;This setup should allow users to filter and find the events they seek much quicker on mobile.&lt;/p&gt;
&lt;h3&gt;Before&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/new2.png&quot; rel=&quot;attachment wp-att-14245&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-14245&quot; src=&quot;http://exceptionless.com/assets/new2.png&quot; alt=&quot;new2&quot; width=&quot;594&quot; height=&quot;406&quot; data-id=&quot;14245&quot; srcset=&quot;https://exceptionless.com/assets/new2.png 594w, https://exceptionless.com/assets/new2-300x205.png 300w&quot; sizes=&quot;(max-width: 594px) 100vw, 594px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3&gt;After&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/new3.png&quot; rel=&quot;attachment wp-att-14247&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-14247&quot; src=&quot;http://exceptionless.com/assets/new3.png&quot; alt=&quot;new3&quot; width=&quot;623&quot; height=&quot;447&quot; data-id=&quot;14247&quot; srcset=&quot;https://exceptionless.com/assets/new3.png 623w, https://exceptionless.com/assets/new3-300x215.png 300w&quot; sizes=&quot;(max-width: 623px) 100vw, 623px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Pretty Cool, Yeah?&lt;/h2&gt;
&lt;p&gt;We think it’s a pretty nice improvement. We got feedback from several users and think making everything visible at the top level of the user interface is an important change that saves time and keeps you informed.&lt;/p&gt;
&lt;p&gt;If you’ve got any additional feedback, please don’t hesitate to let us know. We are always looking for ways to improve, and we use Exceptionless every day too, so we are always interested in saving ourselves time and making things easier on our end!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-04-04-exceptionless-v3-3-0-now-with-even-more-awesome/"/>
    <updated>2016-04-04T11:00:12-05:00</updated>
    <id>https://exceptionless.com/2016-04-04-exceptionless-v3-3-0-now-with-even-more-awesome/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-14271&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;http://exceptionless.com/assets/Exceptionless3-3-0-release-notes.jpg&quot; alt=&quot;Exceptionless 3.3.0 Release Notes&quot; width=&quot;708&quot; height=&quot;250&quot; data-id=&quot;14271&quot; srcset=&quot;https://exceptionless.com/assets/Exceptionless3-3-0-release-notes.jpg 708w, https://exceptionless.com/assets/Exceptionless3-3-0-release-notes-300x106.jpg 300w&quot; sizes=&quot;(max-width: 708px) 100vw, 708px&quot;&gt;
&lt;p&gt;We always work hard to keep improving Exceptionless, and this release is no different!&lt;/p&gt;
&lt;p&gt;Since the last release, we’ve put a lot of time into &lt;a href=&quot;http://exceptionless.com/filter-improvements-exceptionless-single-page-app/&quot; target=&quot;_blank&quot;&gt;making the filtering and searching more user friendly&lt;/a&gt; and intuitive, improving the reliability of jobs, and of course fixing any bugs that you guys (or Exceptionless) have been able to find.&lt;/p&gt;
&lt;p&gt;Let’s see what we’ve got going on, shall we?&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;What’s Goin On?&lt;/h2&gt;
&lt;h3&gt;Filter / Search&lt;/h3&gt;
&lt;p&gt;For starters, as mentioned above, we relocated the search bar to exist on the top level of the UI, and the date picker filter now shows the current choice on the top level. Both icons were replaced, and we really think it’s much more intuitive and efficient. You can read more and see examples over on the &lt;a href=&quot;http://exceptionless.com/filter-improvements-exceptionless-single-page-app/&quot; target=&quot;_blank&quot;&gt;dedicated blog post&lt;/a&gt; we did last week.&lt;/p&gt;
&lt;h3&gt;New Stats API&lt;/h3&gt;
&lt;p&gt;You can now get a timeline or numbers for a comma delimited list of fields using the new stats API, which is pretty cool.&lt;/p&gt;
&lt;h3&gt;Session Management&lt;/h3&gt;
&lt;p&gt;Session management has been drastically improved by doing a few different things. For instance, inactive sessions are now closed faster, but they can be opened again if need be. We hid heartbeat events by default, too, and you can now specify manual sessions for desktop-based apps.&lt;/p&gt;
&lt;h3&gt;Manual Stacking&lt;/h3&gt;
&lt;p&gt;We introduced &lt;a href=&quot;https://exceptionless.com/custom-event-stacking-in-exceptionless/&quot; target=&quot;_blank&quot;&gt;custom event stacking&lt;/a&gt; a few weeks ago, and &lt;a href=&quot;https://github.com/adamzolotarev&quot; target=&quot;_blank&quot;&gt;@adamzolotarev&lt;/a&gt; has added the ability to specify a manual stacking key on the client side with this release. Thanks Adam!&lt;/p&gt;
&lt;h3&gt;Discard events created from bots&lt;/h3&gt;
&lt;p&gt;A default list of bot wild card exclusions is now automatically set on new projects, so if you’re upgrading, you now have the ability to run a maintenance job via the admin controller to set a default bot list. All events with user agents matching these wild cards will then be discarded on the client side.&lt;/p&gt;
&lt;h3&gt;Bugfixes!&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Marking stacks as fixed or hidden was causing some significant slow down and sometimes wouldn’t work at all. This has been remedied!&lt;/li&gt;
&lt;li&gt;Redis connection failures and lock timeouts were sometimes causing jobs to stop working or fail. We dug through and found what was causing that and fixed it as well.&lt;/li&gt;
&lt;li&gt;When the geo field contained a localized number, sometimes events were not being processed. This &lt;a href=&quot;https://exceptionless.com/add-reverse-geocoding-to-your-app/&quot; target=&quot;_blank&quot;&gt;localization&lt;/a&gt; issue has been solved.&lt;/li&gt;
&lt;li&gt;And last but not least (well, maybe least), a seralization bug has been fixed that would cause query strings, cookies, and other extended data items to be transformed to lowercase and underscored.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Time to Upgrade&lt;/h3&gt;
&lt;p&gt;Well, only if you’re a self hoster. Everyone else will experience all of these awesome improvements and bug fixes the next time they log in. If you are a self hoster, please review the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting&quot; target=&quot;_blank&quot;&gt;Self Hosting Docs&lt;/a&gt; for info regarding upgrading your current Exceptionless install. Naturally, if you have any questions please let us know and we will get you taken care of.&lt;/p&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;You can find a complete comparison changelog over on &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/compare/v3.2.1...v3.3.0&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;, where you can also submit any issues, etc if you run across anything. Please also let us know what you think of the changes by commenting below, pinging us on social media, or simply sending Blake a &lt;a href=&quot;http://www.ruindays.com/products/spring-loaded-glitter-bomb&quot; target=&quot;_blank&quot;&gt;glitter bomb&lt;/a&gt; &lt;em&gt;(site/link not endorsed in any way, lol – first one I found!)&lt;/em&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-04-07-foundatio-featured-net-blog-version-4-0-release/"/>
    <updated>2016-04-07T11:18:08-05:00</updated>
    <id>https://exceptionless.com/2016-04-07-foundatio-featured-net-blog-version-4-0-release/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14292&quot; src=&quot;http://exceptionless.com/assets/foundatio-4.0.png&quot; alt=&quot;Foundatio 4.0 release&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14292&quot; srcset=&quot;https://exceptionless.com/assets/foundatio-4.0.png 260w, https://exceptionless.com/assets/foundatio-4.0-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;We’ve continued to focus some of our attention on our pluggable app foundation block solution, Foundatio, and last week it got some attention from the Microsoft .NET Blog as well!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/dotnet/2016/03/29/the-week-in-net-3292016/&quot; target=&quot;_blank&quot;&gt;Foundatio featured as Project of the Week on .NET Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’ve also released V4.0, which has some new implementations, API changes, and, of course, bug fixes.&lt;/p&gt;
&lt;p&gt;Check out the details, below.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Foundatio 4.0 Release Notes&lt;/h2&gt;
&lt;h3&gt;Implementations&lt;/h3&gt;
&lt;p&gt;We’ve got a few new implementations with this release, including Amazon S3 storage, Azure Service Bus queue (thanks &lt;a href=&quot;https://github.com/jamie94bc&quot; target=&quot;_blank&quot;&gt;@jamie94bc!&lt;/a&gt;), and Redis metrics client. Users should find those helpful.&lt;/p&gt;
&lt;h3&gt;API&lt;/h3&gt;
&lt;p&gt;The APIs have been drastically simplified for ease of use and straightforwardness, which should allow for easier creation of new implementations and consumption of existing ones.&lt;/p&gt;
&lt;p&gt;Once example of this simplification is that we’ve paired down jobs to having only one lock, instead of four.&lt;/p&gt;
&lt;p&gt;Logging has also seen huge improvements to make sure we are aligned with future API implementations, etc.&lt;/p&gt;
&lt;h3&gt;Bugs&lt;/h3&gt;
&lt;p&gt;More tests have been added since the previous release, and we’ve fixed a few major bugs as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Deadlocks were occurring in a few areas, which is now remedied.&lt;/li&gt;
&lt;li&gt;Dropped connections are now automatically healed, while previously we were seeing some issues.&lt;/li&gt;
&lt;li&gt;Cached reference types can no longer be updated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upgrading to Foundatio 4.0&lt;/h2&gt;
&lt;p&gt;If you’re already using Foundatio, simply updated your NuGet package. If you’re new and want to check it out, snag &lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot; target=&quot;_blank&quot;&gt;Foundatio over on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;And, as always, we’re here to answer any questions or take any feedback you might have to offer!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-04-18-how-many-users-affected-bugs-events/"/>
    <updated>2016-04-18T14:55:26-05:00</updated>
    <id>https://exceptionless.com/2016-04-18-how-many-users-affected-bugs-events/</id>
    <content type="html">&lt;p&gt;&lt;strong&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14327&quot; src=&quot;http://exceptionless.com/assets/users-featured-image.png&quot; alt=&quot;exceptionless user tracking&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14327&quot; srcset=&quot;https://exceptionless.com/assets/users-featured-image.png 260w, https://exceptionless.com/assets/users-featured-image-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;Prioritizing your bug fixes and development time&lt;/strong&gt; in general can be a daunting task.&lt;/p&gt;
&lt;p&gt;Sometimes, as developers, &lt;strong&gt;we want to work on this shiny widget&lt;/strong&gt; or this annoying bug, and we don’t really have anything in our face telling us to &lt;strong&gt;quit focusing on our dreams&lt;/strong&gt; and work on what matters to the bottom line.&lt;/p&gt;
&lt;p&gt;I can hear you over there: &lt;strong&gt;“But, my dreams are important!”&lt;/strong&gt; Well, yes, but you don’t get to have fun working on those until you’ve made your &lt;strong&gt;users&lt;/strong&gt; happy by fixing the bugs that are affecting the majority of them or expanding on that feature that they are all using every single time they use your app.&lt;/p&gt;
&lt;p&gt;We’ve got something that will let you get those pesky tasks off your plate though, so you can move on to the fun stuff!&lt;/p&gt;
&lt;!--more--&gt;
&lt;h2&gt;Who and How Bad Is It?&lt;/h2&gt;
&lt;p&gt;Our new “users” column and “Most Users” dashboard lets you &lt;strong&gt;know exactly what percentage of your users are being affected by events or using features&lt;/strong&gt;. This allows you to prioritize the most important bugs or features to work on right away and potentially backlog things that only a few users are having issues with or using.&lt;/p&gt;
&lt;p&gt;Of course, you’ll need to be sending at least a user id (and preferably a display name) for each user. We’ll cover how to do that later in the article.&lt;/p&gt;
&lt;h3&gt;Percentage of Users Column&lt;/h3&gt;
&lt;p&gt;The new Users column on your Exceptionless dashboard displays a percentage value for each event stack that represents the number of users that have been affected by the event or, if it is a feature, that have used the feature.&lt;/p&gt;
&lt;p&gt;If you mouse over the percentage, you can see the number of users the percentage represents out of the total.&lt;/p&gt;
&lt;p&gt;These numbers are dynamically calculated for your selected timeframe that you are currently viewing.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/dashboardv2-edited.png&quot; rel=&quot;attachment wp-att-14353&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-14353&quot; src=&quot;http://exceptionless.com/assets/dashboardv2-edited-1024x662.png&quot; alt=&quot;users affected by bug&quot; width=&quot;940&quot; height=&quot;608&quot; data-id=&quot;14353&quot; srcset=&quot;https://exceptionless.com/assets/dashboardv2-edited-1024x662.png 1024w, https://exceptionless.com/assets/dashboardv2-edited-300x194.png 300w, https://exceptionless.com/assets/dashboardv2-edited-768x497.png 768w, https://exceptionless.com/assets/dashboardv2-edited.png 1404w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Most Users Dashboard&lt;/h3&gt;
&lt;p&gt;Because the main dashboard shows you the most frequent events, not necessarily with the highest usage, &lt;strong&gt;we thought it would be helpful to have a new dashboard that automatically sorts event stacks by the percentage of users affected,&lt;/strong&gt; letting you start at the top of an exception list, for example, and work your way down knowing you’re always working on a bug, etc, that is affecting the highest percentage of users.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/dashboard-most-usersv2-edited.png&quot; rel=&quot;attachment wp-att-14354&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-14354&quot; src=&quot;http://exceptionless.com/assets/dashboard-most-usersv2-edited-1024x644.png&quot; alt=&quot;user event dashboard&quot; width=&quot;940&quot; height=&quot;591&quot; data-id=&quot;14354&quot; srcset=&quot;https://exceptionless.com/assets/dashboard-most-usersv2-edited-1024x644.png 1024w, https://exceptionless.com/assets/dashboard-most-usersv2-edited-300x189.png 300w, https://exceptionless.com/assets/dashboard-most-usersv2-edited-768x483.png 768w, https://exceptionless.com/assets/dashboard-most-usersv2-edited.png 1408w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Setting User Identity&lt;/h2&gt;
&lt;p&gt;In order to assure you are getting value out of the user feature, you want to make sure you are setting the user. For Exceptionless to track a user for your app, you need to send a user identity with each event. To do so, you need to set the default user identity via the following client methods:&lt;/p&gt;
&lt;h4&gt;C#&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Exceptionless;
ExceptionlessClient.Default.Configuration.SetUserIdentity(&quot;UNIQUE_ID_OR_EMAIL_ADDRESS&quot;, &quot;Display Name&quot;);&lt;/pre&gt;
&lt;h4&gt;JavaScript&lt;/h4&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.ExceptionlessClient.default.config.setUserIdentity(&#39;UNIQUE_ID_OR_EMAIL_ADDRESS&#39;, &#39;Display Name&#39;);&lt;/pre&gt;
&lt;p&gt;Once the user is set on the config object, it will be applied to all future events.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please Note:&lt;/strong&gt; In WinForms and WPF applications, a plugin will automatically set the default user to the &lt;code&gt;&amp;lt;strong&amp;gt;Environment.UserName&amp;lt;/strong&amp;gt;&lt;/code&gt; if the default user hasn’t been already set. Likewise, if you are in a web environment, we will set the default user to the request principal’s identity if the default user hasn’t already been set.&lt;/p&gt;
&lt;h3&gt;ASP.NET Example&lt;/h3&gt;
&lt;p&gt;You can also manually set the user info on the event directly. This is intended for **multi-user processes (web applications)&lt;a href=&quot;http://www.businessinsider.com/slack-free-unlimited-plan-has-limits-2015-6&quot;&gt;.&lt;/a&gt; **For most MVC and WebAPI packages, the user will be set automatically based on the logged in principal, so you don’t have to do anything.&lt;/p&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;// Import the exceptionless namespace.
using Exceptionless;

ExceptionlessClient.Default.CreateFeatureUsage(&quot;MyFeature&quot;).SetUserIdentity(“123456789&quot;, “Blake Niemyjski&quot;).Submit();
&lt;/pre&gt;
&lt;h3&gt;JavaScript Example&lt;/h3&gt;
&lt;p&gt;If you’re using the JavaScript client, the entire session of the client will typically be for a single user, so you should be able to set it one time when they log in to your app.&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.ExceptionlessClient.default.setUserIdentity(&quot;id&quot;, &quot;friendly name&quot;)`
&lt;/pre&gt;
&lt;p&gt;Like with .NET, if you are running a multi-user process (Node.js), you’ll need to set the user at the event level.&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;// javascript
var client = exceptionless.ExceptionlessClient.default;
// Node.Js
// var client = require(&#39;exceptionless&#39;).ExceptionlessClient.default;

client.createFeatureUsage(&#39;MyFeature’).setUserIdentity(&#39;123456789&#39;, &#39;Blake Niemyjski&#39;).submit();
&lt;/pre&gt;
&lt;h2&gt;How Will You Use this Data&lt;/h2&gt;
&lt;p&gt;We are always interested in how our users use our features, and if our users feature helps our users help their users, well, that’s a win win for our users and their users. Go users!&lt;/p&gt;
&lt;p&gt;Don’t forget to stop by and let us know if you love or hate it, and of course let us know if you think we can improve on anything within Exceptionless.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-04-27-exceptionless-keyboard-shortcuts/"/>
    <updated>2016-04-27T10:46:55-05:00</updated>
    <id>https://exceptionless.com/2016-04-27-exceptionless-keyboard-shortcuts/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14345&quot; src=&quot;http://exceptionless.com/assets/keyboard-shortcuts.png&quot; alt=&quot;keyboard-shortcuts&quot; width=&quot;353&quot; height=&quot;302&quot; data-id=&quot;14345&quot; srcset=&quot;https://exceptionless.com/assets/keyboard-shortcuts.png 353w, https://exceptionless.com/assets/keyboard-shortcuts-300x257.png 300w&quot; sizes=&quot;(max-width: 353px) 100vw, 353px&quot;&gt;Today we’ve got a quick article on one of the little known features of Exceptionless: keyboard shortcuts.&lt;/p&gt;
&lt;p&gt;In an effort to help you navigate Exceptionless event stacks better and troubleshoot faster, we’ve added keyboard shortcuts that lets you do things like go to the stack from an individual event occurrence, copy the event JSON, navigate to the previous event occurrence, etc.&lt;/p&gt;
&lt;p&gt;Let’s take a look at all the quick shortcuts you can use to make your Exceptionless usage more efficient.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Bringing Up the Shortcut List&lt;/h2&gt;
&lt;p&gt;To bring up the keyboard shortcuts available to each page, simply hold the shift key and hit the forward slash key (SHIFT + /, think ?). This will bring up an overlay showing you which shortcuts are available on that specific page.&lt;/p&gt;
&lt;p&gt;Don’t see shortcuts available on a page? Don’t freak out, there may just not be any. Feel free to suggest something that you think would save yourself and others time, though!&lt;/p&gt;
&lt;h2&gt;What Shortcuts Exist?&lt;/h2&gt;
&lt;h3&gt;Event Occurrences&lt;/h3&gt;
&lt;p&gt;If you hit SHIFT + / (?) on an event occurrence, you will see three or four new options, depending on whether you are on the first occurrence in the stack or not.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;**Go to Stack&lt;br&gt;
** On any event occurrence, you can hit CTRL + UP to go to that event’s stack quicker than finding the “Go To Stack” button and clicking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Copy Event JSON to Clipboard&lt;br&gt;
** Hit CTRL + SHIFT + C to copy that event’s JSON data to your clipboard.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Previous Occurrence&lt;br&gt;
** CTRL + BACK (LEFT) will take you to the previous event occurrence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;**Next Occurrence&lt;br&gt;
** And CTRL + FORWARD (RIGHT) will take you to the next occurrence of that event.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dashboards &amp;amp; Stacks&lt;/h3&gt;
&lt;p&gt;On any dashboard or stack, SHIFT + / (?) brings up a simple overlay letting you know that ? will close the overlay and F1 will take you to the Exceptionless documentation on GitHub.&lt;/p&gt;
&lt;p&gt;We’re open to suggestions for other dashboard or stack shortcuts, just let us know in the comments!&lt;/p&gt;
&lt;h2&gt;What Shortcuts Would You Use?&lt;/h2&gt;
&lt;p&gt;We’d love to get some community input here. What shortcuts do you think would be useful on which Exceptionless pages? Do you have something you do repeatedly on a dashboard or stack page that you think a keyboard shortcut might speed up or make more efficient? Let us know in the comments and we’ll do our best to implement your ideas!&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-05-19-new-client-releases-focus-on-sessions-real-time-configuration-and-logging/"/>
    <updated>2016-05-19T11:39:22-05:00</updated>
    <id>https://exceptionless.com/2016-05-19-new-client-releases-focus-on-sessions-real-time-configuration-and-logging/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14451&quot; src=&quot;http://exceptionless.com/assets/net-3.5.0-js-1.4.0.png&quot; alt=&quot;net-3.5.0-js-1.4.0&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14451&quot; srcset=&quot;https://exceptionless.com/assets/net-3.5.0-js-1.4.0.png 260w, https://exceptionless.com/assets/net-3.5.0-js-1.4.0-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;Exceptionless.NET v3.5.0 and Exceptionless.JavaScript v1.4.0 have been released and they are chock full of &lt;strong&gt;new features and feature improvements!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There weren’t a whole lot of bug fixes with these releases. Could it be that Exceptionless is working and we’ve squelched most of the bugs? We think so!&lt;/p&gt;
&lt;p&gt;Notably, we focused on sessions, real time configuration, and logging, all of which we think you’ll find super helpful.&lt;/p&gt;
&lt;p&gt;Read on for details.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless .NET Client V3.5.0 and JavaScript Client V1.4.0 Release Notes&lt;/h2&gt;
&lt;h3&gt;Session Heartbeats No Longer Count Towards Plan Limits!&lt;/h3&gt;
&lt;p&gt;We’ve updated Session Heartbeats and Session End events to be sent through an optimized API end point, and they will no longer count towards your plane’s event limits.&lt;/p&gt;
&lt;h3&gt;Real Time Project Configuration Improvements&lt;/h3&gt;
&lt;p&gt;You can now exclude events by type and source, along with setting minimum log levels, &lt;strong&gt;in real time&lt;/strong&gt;. So, for example, if you accidentally disable logging completely, you can &lt;strong&gt;simply update your settings&lt;/strong&gt; and the updates will go into affect, restoring functionality!&lt;/p&gt;
&lt;p&gt;UI support will be expanded moving forward, but for the time being here is an example project configuration.&lt;/p&gt;
&lt;h4&gt;Source&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Key:&lt;/strong&gt; &lt;code&gt;@@EVENT_TYPE:SOURCE&amp;lt;br /&amp;gt; &lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Value:&lt;/strong&gt; &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Any event type or source can be used, and wildcards &lt;code&gt;*&lt;/code&gt; are supported, so you can ignore whole event types and set the source to &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Disable Submissions of Events with Type Name&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Key:&lt;/strong&gt; &lt;code&gt;@@error:*MyCustomException&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;**Value: **&lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This configuration will disable submission of any error event with a stack trace containing an exception with a type name that ends with &lt;code&gt;MyCustomException&lt;/code&gt;. You could also remove the wildcard and specify the full type name with the namespace.&lt;/p&gt;
&lt;h4&gt;Log Message Settings&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Key:&lt;/strong&gt; &lt;code&gt;@@log:*&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Value:&lt;/strong&gt; &lt;code&gt;off&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Even though log types are special cased, they still accept rue or false values, so this example completely turns off log messages.&lt;/p&gt;
&lt;p&gt;Other known values are &lt;code&gt;Trace&lt;/code&gt;, &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Info&lt;/code&gt;, &lt;code&gt;Warn&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;Fatal&lt;/code&gt;, and &lt;code&gt;Off&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Minimum Log Level&lt;/h4&gt;
&lt;p&gt;**Key: **&lt;code&gt;@@log:MyNamespace.EventPostsJob&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;**Value: **&lt;code&gt;Info&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This example is setting the minimum log level for &lt;code&gt;EventPostsJob&lt;/code&gt; to &lt;code&gt;Info&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Automatically Check for Updated Configuration Settings on Client Idle&lt;/h3&gt;
&lt;p&gt;We’ve implemented an a&lt;strong&gt;utomatic recurring check for updated configuration settings&lt;/strong&gt; that occurs &lt;strong&gt;two minutes&lt;/strong&gt; after the last event submission.&lt;/p&gt;
&lt;p&gt;A few notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each configuration check &lt;strong&gt;does not&lt;/strong&gt; count towards your account’s plan limits.&lt;/li&gt;
&lt;li&gt;No user information will be sent – only the current configuration version.&lt;/li&gt;
&lt;li&gt;Nothing will be retrieved if no settings have been changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The automatic recurring configuration settings check &lt;strong&gt;can be disable&lt;/strong&gt; by calling:&lt;/p&gt;
&lt;h4&gt;.NET&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;client.Configuration.UpdateSettingsWhenIdleInterval = TimeSpan.Zero;&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;JavaScript&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;client.config.updateSettingsWhenIdleInterval = -1;&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h3&gt;New Easy Way to Exclude Events from Being Submitted in .NET&lt;/h3&gt;
&lt;p&gt;You can now define a simple &lt;code&gt;Func&amp;lt;Event,bool&amp;gt;&lt;/code&gt; callback to stop events from being submitted in the .NET client.&lt;/p&gt;
&lt;p&gt;For example, if I wanted to ignore any event with a &lt;code&gt;value&lt;/code&gt; property of &lt;code&gt;2&lt;/code&gt; I could use &lt;code&gt;client.Configuration.AddEventExclusion(e =&amp;gt; e.Value.GetValueOrDefault() != 2);&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Bug Fix for SettingsCollection Boolean Values Support in .NET Client&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;SettingsCollection.GetBoolean(name)&lt;/code&gt; was not supporting `` or &lt;code&gt;1&lt;/code&gt; as boolean values, but now it does. We are also now supporting &lt;code&gt;yes&lt;/code&gt; and &lt;code&gt;no&lt;/code&gt; as valid values.&lt;/p&gt;
&lt;h3&gt;JavaScript Client Passing Settings Bug&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/csantero&quot;&gt;@csantero&lt;/a&gt; fixed an issue with passing settings to a new isntance of ExceptionlessClient – thanks!&lt;/p&gt;
&lt;h3&gt;Improved Stacking of Angular Response Errors in JavaScript Client&lt;/h3&gt;
&lt;p&gt;^^^ Nothing much to say here – the header says it all!&lt;/p&gt;
&lt;h2&gt;Feedback&lt;/h2&gt;
&lt;p&gt;We hope these new features and feature improvements help your Exceptionless experience, and we plan to continue to listen to user feedback and improve the system where improvements need to be made. To do that, though, we need to hear what you want out of the app. If you have a favorite feature request, or something that just bothers you, please let us know by dropping us a line on GitHub Issues under the appropriate repository, listed below, or just comment here and we’ll figure it out!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/issues/new&quot;&gt;User Interface Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/issues/new&quot;&gt;.NET Client Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/issues/new&quot;&gt;JavaScript Client Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/exceptionless/issues/new&quot;&gt;Exceptionless Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks for reading and have an awesome day!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-05-26-session-heartbeats-no-longer-count-towards-plan-limits/"/>
    <updated>2016-05-26T15:25:35-05:00</updated>
    <id>https://exceptionless.com/2016-05-26-session-heartbeats-no-longer-count-towards-plan-limits/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14475&quot; style=&quot;margin-left: 15px;&quot; src=&quot;http://exceptionless.com/assets/session-tracking-revised.png&quot; alt=&quot;session-tracking-revised&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14475&quot; srcset=&quot;https://exceptionless.com/assets/session-tracking-revised.png 260w, https://exceptionless.com/assets/session-tracking-revised-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;That’s right! We’ve re-imagined how session heartbeats and session end events should work on the back end and were able to make them much more efficient, allowing us to stop counting them toward user plan limits!&lt;/p&gt;
&lt;p&gt;This blog post explains our original goals and implementation of these session events, and how we were able to retain the same functionality of the feature while limiting resource usage.&lt;/p&gt;
&lt;p&gt;Our hope is that this will obviously make our users happy, but also that all the developers out there can benefit from our process and solution.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Genesis: Exceptionless Session Tracking&lt;/h2&gt;
&lt;p&gt;In the beginning, we set out to create a sessions feature that allowed our users to submit a session start event and the session would be automatically updated by sending a session heartbeat event, as well as a session end event, respectively.&lt;/p&gt;
&lt;p&gt;These session heartbeats and session end events were meant to be session markers to show that a user was active or a session had ended.&lt;/p&gt;
&lt;p&gt;We wanted to &lt;strong&gt;leverage our existing infrastructure,&lt;/strong&gt; and the easiest way to do so was to introduce new event types that we recognized. This meant that these events went through the client side plugins (extra work) and server side processing. As such, there was &lt;strong&gt;no way to tell these events apart from any other event&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And because of that, they counted against user plan limits.&lt;/p&gt;
&lt;h2&gt;Noise&lt;/h2&gt;
&lt;p&gt;After releasing the sessions feature, &lt;strong&gt;it didn’t take us long to notice that the heartbeats were noise&lt;/strong&gt;. However, we knew that users wanted to see what their customers or users were doing while being active throughout the session, so we didn’t remove them.&lt;/p&gt;
&lt;p&gt;We knew they were counting towards plan limits, causing some users to reach theirs quickly, and we knew they were adding noise, thus limiting the feature’s value, but we also wanted to keep the feature alive because of the &lt;em&gt;potential&lt;/em&gt; value offered. So, we had to react and make the entire feature more feasible, streamlined, and cheap.&lt;/p&gt;
&lt;h2&gt;Back to the Drawing Board&lt;/h2&gt;
&lt;p&gt;We did some thinking (and coding), trying to determine the best way we could &lt;strong&gt;provide end users with a great session tracking feature without over-taxing our system&lt;/strong&gt; in the process, and we were able to come up with a solution!&lt;/p&gt;
&lt;p&gt;So, we created a new GET API endpoint &lt;code&gt;/api/v2/events/session/heartbeat&lt;/code&gt; (&lt;a href=&quot;https://api.exceptionless.io/docs/index#!/Event/Event_RecordHeartbeatAsync&quot;&gt;api source&lt;/a&gt;) that takes a session id or user id and a flag if the session is closed. This API endpoint then sets a unique session cache key with the current time.&lt;/p&gt;
&lt;p&gt;Our existing &lt;code&gt;CloseInactiveSessionsJob.cs&lt;/code&gt; was already periodically polling for open sessions to check for inactive sessions so it could automatically close them after a period of time if no session end event was sent, so we just updated this job to check for the unique session cache keys (&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/Source/Core/Jobs/CloseInactiveSessionsJob.cs#L43&quot;&gt;source&lt;/a&gt;) and get the last time a heartbeat was sent in or see if it was closed. It then takes the appropriate action and updates the session event.&lt;/p&gt;
&lt;p&gt;Then we just updated the clients to call this new API endpoint when &lt;code&gt;client.Submit.SessionHeartbeat(&amp;quot;id&amp;quot;)&lt;/code&gt; or &lt;code&gt;client.SubmitSessionEnd(&amp;quot;id&amp;quot;)&lt;/code&gt; is called.&lt;/p&gt;
&lt;h2&gt;Efficiency Achieved!&lt;/h2&gt;
&lt;p&gt;Our new solution gives us the ability to have clients send us session heartbeat and session end information very efficiently, which lets us provide a great session tracking feature &lt;strong&gt;without adding any additional cost&lt;/strong&gt; to our plans!&lt;/p&gt;
&lt;p&gt;That’s how we like to roll, and we hope you find value from the feature and our run down of the process we went through to get it to our users.&lt;/p&gt;
&lt;h3&gt;Don’t Forget to Update Your Client&lt;/h3&gt;
&lt;p&gt;If you haven’t already updated your client, please do so to start taking advantage of the free session events.&lt;/p&gt;
&lt;p&gt;And, as always, please let us know if you’ve got any feedback or questions. We’d love to hear from you!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-06-28-exceptionless-4-0-net-core-asp-net-core-support/"/>
    <updated>2016-06-28T16:07:10-05:00</updated>
    <id>https://exceptionless.com/2016-06-28-exceptionless-4-0-net-core-asp-net-core-support/</id>
    <content type="html">&lt;p&gt;That’s right folks, with the release of Exceptionless.NET 4.0 you can now build .NET applications with Exceptionless on Linux, MacOS, and Windows!&lt;/p&gt;
&lt;p&gt;We’ve added .NET Core, ASP.NET Core, and .NET Standard 1.2+ support.&lt;/p&gt;
&lt;p&gt;We know many of you have been waiting for this, and it’s been a long time coming, but we sat down, put in the hours, and made it happen for you guys!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/Screen-Shot-2016-06-28-at-3.08.17-PM.png&quot;&gt;&lt;img class=&quot;aligncenter wp-image-14540 size-full&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;http://exceptionless.com/assets/Screen-Shot-2016-06-28-at-3.08.17-PM.png&quot; alt=&quot;Exceptionless on Mac OSX&quot; width=&quot;600&quot; data-id=&quot;14540&quot; srcset=&quot;https://exceptionless.com/assets/Screen-Shot-2016-06-28-at-3.08.17-PM.png 885w, https://exceptionless.com/assets/Screen-Shot-2016-06-28-at-3.08.17-PM-300x189.png 300w, https://exceptionless.com/assets/Screen-Shot-2016-06-28-at-3.08.17-PM-768x484.png 768w&quot; sizes=&quot;(max-width: 885px) 100vw, 885px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;!--more--&gt;The NuGet package now supports .NET Standard 1.2+, PCL Profile 151, and .NET 4.5.
&lt;p&gt;&lt;strong&gt;To make upgrading easy&lt;/strong&gt;, the &lt;code&gt;Exceptionless.Portable&lt;/code&gt; NuGet package still exists and is dependent on the &lt;code&gt;Exceptionless&lt;/code&gt; Package.&lt;/p&gt;
&lt;p&gt;If .NET 4.0 is a requirement for your projects, you will need to continue using the Exceptionless.NET v3.5 NuGet Packages, which are not being deprecated.&lt;/p&gt;
&lt;p&gt;As a matter of housekeeping, we removed the &lt;code&gt;ExceptionlessClient.Current&lt;/code&gt; property, which was replaced with &lt;code&gt;ExceptionlessClient.Default&lt;/code&gt; in v2.0.0, and the configuration &lt;code&gt;EnableSSL&lt;/code&gt; properties (also depracated in v2).&lt;/p&gt;
&lt;h2&gt;Upgrading&lt;/h2&gt;
&lt;p&gt;Updating the NuGet packages should be all you need to do if you are upgrading from Exceptionless.NET v2 or v3. Take a look at the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/wiki/Upgrading&quot;&gt;upgrade guide&lt;/a&gt; if you have any questions.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-07-13-exceptionless-3-4-new-user-dashboards-job-reliability-bug-fixes/"/>
    <updated>2016-07-13T14:35:18-05:00</updated>
    <id>https://exceptionless.com/2016-07-13-exceptionless-3-4-new-user-dashboards-job-reliability-bug-fixes/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/exceptionless-3-4-header.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14573&quot; src=&quot;http://exceptionless.com/assets/exceptionless-3-4-header.png&quot; alt=&quot;Exceptionless 3.4&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14573&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-3-4-header.png 260w, https://exceptionless.com/assets/exceptionless-3-4-header-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;&lt;/a&gt;The latest Exceptionless release has several additions we think most of our users will find helpful. We sat down and worked on the UI, fixed some bugs, and spend a considerable amount of time improving reliability and efficiency of some of the primary pieces of the app.&lt;/p&gt;
&lt;p&gt;If you’re a self hoster, you’ll need to &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting#upgrading&quot;&gt;upgrade your existing install&lt;/a&gt;, but if you’re hosting with us there is no action required on your part to experiences the Exceptionless 3.4.&lt;/p&gt;
&lt;p&gt;For more information about this release, take a look below and/or review the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/releases/tag/v3.4.0&quot;&gt;full release notes over on GitHub&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;UI Updates&lt;/h2&gt;
&lt;p&gt;These updates were all pushed with &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/releases/tag/v2.5.0&quot;&gt;Exceptionless.UI 2.5&lt;/a&gt; a few days prior to this release of the main app. Enjoy!&lt;/p&gt;
&lt;h3&gt;Search Wildcard&lt;/h3&gt;
&lt;p&gt;You can now use &lt;code&gt;*&lt;/code&gt; to show **all **events in the search box. Woohoo!&lt;/p&gt;
&lt;h3&gt;Most Users Dashboard&lt;/h3&gt;
&lt;p&gt;The new most users dashboard allows you a quick view of events sorted by the highest number of affected users. This is great for helping prioritize your work pipeline.&lt;/p&gt;
&lt;p&gt;Also, as an aside, we’ve added the users affected column to the dashboard. We know some of you guys will find that helpful.&lt;/p&gt;
&lt;h3&gt;New Keyboard Shortcuts&lt;/h3&gt;
&lt;p&gt;MacOS &amp;amp; Linux keyboard shortcut support has been added, as well as additional shortcuts such as &lt;code&gt;C&lt;/code&gt; to chat with support, &lt;code&gt;S&lt;/code&gt; to focus the search bar, and &lt;code&gt;g&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; to go to your account. Hit &lt;code&gt;SHIFT&lt;/code&gt; + &lt;code&gt;/&lt;/code&gt; (also known as &lt;code&gt;?&lt;/code&gt; ) to access the keyboard shortcut list on any screen.&lt;/p&gt;
&lt;p&gt;As an aside here, there is also now a &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; button near the top of the event occurrence that lets you quickly copy the JSON to your clipboard with a click.&lt;/p&gt;
&lt;h2&gt;Other Updates&lt;/h2&gt;
&lt;p&gt;This is just a quick list of everything else we tweaked, updated, added, or fixed with the v2.4 release.&lt;/p&gt;
&lt;h3&gt;Performance &amp;amp; Reliability&lt;/h3&gt;
&lt;p&gt;We made several reliability and performance enhancements to queue and job processing. A few specific examples include fixing auto-abandoned jobs and instances where batch events weren’t being requeued.&lt;/p&gt;
&lt;h3&gt;Heartbeat API Endpoints&lt;/h3&gt;
&lt;p&gt;Previously we had &lt;a href=&quot;http://exceptionless.com/session-heartbeats-no-longer-count-towards-plan-limits/&quot;&gt;worked on making heartbeat events efficient&lt;/a&gt; so we didn’t have to count them toward event quotas, and with this release we’ve added new API Endpoints that allow clients to submit those heartbeats cheaply.&lt;/p&gt;
&lt;h3&gt;Active Directory Authentication&lt;/h3&gt;
&lt;p&gt;Support has been added for Active Directory Authentication. Thanks &lt;a href=&quot;https://github.com/laughinggoose&quot;&gt;@laughinggoose&lt;/a&gt;! To enable this feature, head over to the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting#active-directory-authentication&quot;&gt;Active Directory Authentication&lt;/a&gt; documentation page on GitHub.&lt;/p&gt;
&lt;h3&gt;Count&lt;/h3&gt;
&lt;p&gt;This &lt;code&gt;Count&lt;/code&gt; property was added to the event model that tracks deduplicated events and allows for some pretty cool metrics from here on out while avoiding the full cost of storing every event.&lt;/p&gt;
&lt;h3&gt;MaximumRetentionDays&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;MaximumRetentionDays&lt;/code&gt; is pretty self explanatory. It controls the max retention perdiod for events, which allows the retention job and plans to be smarter about cleaning up old data.&lt;/p&gt;
&lt;h3&gt;Bugs&lt;/h3&gt;
&lt;p&gt;SignalR (web sockets) support wasn’t always working in some hosting environments such as AWS, so we fixed a few bugs related to that.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-08-01-real-time-app-configuration-event-settings/"/>
    <updated>2016-08-01T13:20:58-05:00</updated>
    <id>https://exceptionless.com/2016-08-01-real-time-app-configuration-event-settings/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-14606&quot; src=&quot;http://exceptionless.com/assets/exceptionless-project-settings-header.png&quot; alt=&quot;exceptionless-project-settings-header&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;14606&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-project-settings-header.png 260w, https://exceptionless.com/assets/exceptionless-project-settings-header-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;
&lt;h2&gt;Bet You Didn’t Know Exceptionless Could Do This…&lt;/h2&gt;
&lt;p&gt;Have you ever needed to &lt;strong&gt;cut through the noise and just focus on one type of event&lt;/strong&gt; &lt;em&gt;(in real time)&lt;/em&gt;, such as only error logs, to track down a bug?&lt;/p&gt;
&lt;p&gt;Do you want to &lt;strong&gt;limit certain types of event reporting&lt;/strong&gt; &lt;em&gt;(in real time)&lt;/em&gt; to save your event quota and limit clutter?&lt;/p&gt;
&lt;p&gt;What about &lt;strong&gt;controlling your application’s settings or features&lt;/strong&gt; &lt;em&gt;&lt;strong&gt;in real time&lt;/strong&gt;&lt;/em&gt; via Exceptionless, without having to update your files and deploy your app!?&lt;/p&gt;
&lt;p&gt;Well, with our client configuration settings, &lt;strong&gt;you can do all that, and more&lt;/strong&gt;, in &lt;strong&gt;real time&lt;/strong&gt;, on a per-project basis via your Exceptionless dashboard!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;How Could This Help Me?&lt;/h2&gt;
&lt;p&gt;We’ll talk details, below, but first lets look at a few scenarios where the above could be useful.&lt;/p&gt;
&lt;h3&gt;Scenario 1 – Way too many events!&lt;/h3&gt;
&lt;p&gt;Let’s say you’re on the small plan, and you’ve got a bunch of warning log events clogging your system that you know about and are working on, but they are pushing you over your plan limits.&lt;/p&gt;
&lt;p&gt;#BOOM – set a minimum log level of error, and Exceptionless won’t report those warnings anymore and they won’t count against your plan limits! This is a great way to get the most out of your Exceptionless plan.&lt;/p&gt;
&lt;h3&gt;Scenario 2 – This Authentication Issue is KILLING Me!&lt;/h3&gt;
&lt;p&gt;Maybe you’re having major issues with an authentication bug, but you’ve already set minimum log levels to only include errors. Well, now you also want to see the trace values for those events without opening the flood gates for every event by removing your minimum log level.&lt;/p&gt;
&lt;p&gt;#NOPROBLEM – Just add a key for authentication that just lets trace events through!&lt;/p&gt;
&lt;h3&gt;Scenario 3 – You Said Something About Controlling My App’s Features In Real Time?&lt;/h3&gt;
&lt;p&gt;Yup! Our client configurations are basically just a key value pair dictionary, but what makes them powerful and helps them control &lt;strong&gt;your&lt;/strong&gt; application’s features is that they get updated in nearly real-time, meaning you can build settings, features, etc into your app that react to value changes, and if you change that configuration setting in Exceptionless, your app will react almost instantly!&lt;/p&gt;
&lt;p&gt;This can be super useful, especially if changing your app’s settings would normally require you to deploy to production. No need – just use Exceptionless!&lt;/p&gt;
&lt;h2&gt;Primer: How Project Settings Work&lt;/h2&gt;
&lt;p&gt;First, settings updates &lt;strong&gt;do not count towards plan limits&lt;/strong&gt;. We say that because each time an event is submitted, we send a response header with the current configuration version to the client, and if a newer version is available, it is retrieved and the latest configuration is applied. That means that config changes are nearly &lt;strong&gt;real time.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When the client is idle, we also check for config changes, including five seconds after client startup if no events are submitted at startup, and every two minutes after the last event submission.&lt;/p&gt;
&lt;p&gt;If the version hasn’t changed, nothing is retrieved, &lt;strong&gt;limiting data transfer,&lt;/strong&gt; and no user information is ever sent when checking.&lt;/p&gt;
&lt;h3&gt;Turning Off Automatic Updating&lt;/h3&gt;
&lt;p&gt;If you do not want the configuration settings to update when idle, you can turn off automatic updates. To do so, please follow the respective &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/wiki/Client-Configuration-Values#updating-client-configuration-settings&quot;&gt;.NET&lt;/a&gt; or &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/wiki/Client-Configuration-Values#updating-client-configuration-settings&quot;&gt;JavaScript/Node.js&lt;/a&gt; documentation.&lt;/p&gt;
&lt;h2&gt;The Main Event: Client Configuration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/client-configuration.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-14603 aligncenter&quot; src=&quot;http://exceptionless.com/assets/client-configuration-300x143.png&quot; alt=&quot;client-configuration&quot; width=&quot;300&quot; height=&quot;143&quot; data-id=&quot;14603&quot; srcset=&quot;https://exceptionless.com/assets/client-configuration-300x143.png 300w, https://exceptionless.com/assets/client-configuration.png 736w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Exceptionless client configurations are a dictionary of key value pairs that can be used to control the behavior of your app in real time by doing things like controlling data exclusions, protecting sensitive data, enabling and disable features, or disabling certain types of events (&lt;code&gt;error&lt;/code&gt;, &lt;code&gt;usage&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;404&lt;/code&gt;, or &lt;code&gt;session&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;We also have some built in configuration key naming conventions (&lt;code&gt;@@EVENT_TYPE:SOURCE&lt;/code&gt;) that the clients recognize for ignoring events based on event type and event source. Just replace &lt;code&gt;EVENT_TYPE&lt;/code&gt; part with the event type (E.G., &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;…) and the &lt;code&gt;SOURCE&lt;/code&gt; (E.G., exception type or log source) you’d like the setting to apply to. Next, specify key value of &lt;code&gt;false&lt;/code&gt; to discard matching events client side. It’s worth noting that  &lt;code&gt;log&lt;/code&gt; event types can also accept a log level value (E.G., &lt;code&gt;Trace&lt;/code&gt;, &lt;code&gt;Debug&lt;/code&gt;, &lt;code&gt;Info&lt;/code&gt;, &lt;code&gt;Warn&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, or &lt;code&gt;Fatal&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For example, we can use it to turn off all error events of type, lets say, &lt;code&gt;System.ArgumentNullException&lt;/code&gt;, by using the key &lt;code&gt;@@error:System.ArgumentNullException&lt;/code&gt; and the value &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Or, we could turn off all error events entirely by using the &lt;code&gt;*&lt;/code&gt; wildcard. So, the key would be &lt;code&gt;@@error:*&lt;/code&gt; and the value would be &lt;code&gt;false&lt;/code&gt; again.&lt;/p&gt;
&lt;h3&gt;Examples for the Above Scenarios&lt;/h3&gt;
&lt;h4&gt;Scenario 1&lt;/h4&gt;
&lt;p&gt;In scenario 1, above, we were trying to save our plan limits by limiting log events to only errors. So our Client Configuration key would simply be &lt;code&gt;@@log:*&lt;/code&gt; with value &lt;code&gt;Error&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Scenario 2&lt;/h4&gt;
&lt;p&gt;Here we already limited our log events to errors, but now we’re troubleshooting a specific issue with authentication (let’s say we’re using the AuthController API), so we want to look at the trace messages coming through. We can override any general minimum log levels that we’ve defined by setting a level for a specific log source. So, all we would do is add the &lt;code&gt;@@log:*AuthController&lt;/code&gt; key with value &lt;code&gt;Trace&lt;/code&gt;! Then, when the bug’s fixed, turn it off as needed.&lt;/p&gt;
&lt;h4&gt;Scenario 3&lt;/h4&gt;
&lt;p&gt;This is the cool one. Here you are wanting to, let’s say, pass a value for a setting in your app that turns something on or off without having to re-deploy everything. This is super easy to accomplish all we need to do is create a setting which will control our feature! Let’s assume we have have a feature flag to show a welcome screen. We will name this feature flag &lt;code&gt;enableWelcomeScreen&lt;/code&gt; and create a new configuration setting respectively with a value of &lt;code&gt;true&lt;/code&gt; (&lt;em&gt;You can change this value at any time&lt;/em&gt;). These changes will be pushed based on the above “How Project Settings Work” section automatically, all we have to do is check the setting as shown below.&lt;/p&gt;
&lt;h4&gt;C#&lt;/h4&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Exceptionless;
// Check the configuration settings for our enableWelcomeScreen feature flag with a default value of false.
if (ExceptionlessClient.Default.Configuration.Settings.GetBoolean(&quot;enableWelcomeScreen&quot;, false)) {
  // Show the welcome screen!
}
&lt;/pre&gt;
&lt;h4&gt;JavaScript&lt;/h4&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;// Check the configuration settings for our enableWelcomeScreen feature flag
if (exceptionless.ExceptionlessClient.default.config.settings[&#39;enableWelcomeScreen&#39;] === true) {
  // Show the welcome screen!
}
&lt;/pre&gt;
&lt;p&gt;Pretty cool, right!&lt;/p&gt;
&lt;p&gt;For more details on client configuration, check out the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Project-Settings#client-configuration&quot;&gt;Client Configuration Project Settings documentation&lt;/a&gt;. Specific usage examples can be found on the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/wiki/Client-Configuration-Values&quot;&gt;.NET&lt;/a&gt; and &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/wiki/Client-Configuration-Values&quot;&gt;JavaScript/Node.js&lt;/a&gt; documentation pages respectively.&lt;/p&gt;
&lt;h3&gt;&lt;/h3&gt;
&lt;h2&gt;Other Project Settings You Might Find Useful&lt;/h2&gt;
&lt;h3&gt;General&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/general.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-medium wp-image-14600&quot; src=&quot;http://exceptionless.com/assets/general-300x132.png&quot; alt=&quot;general&quot; width=&quot;300&quot; height=&quot;132&quot; data-id=&quot;14600&quot; srcset=&quot;https://exceptionless.com/assets/general-300x132.png 300w, https://exceptionless.com/assets/general.png 739w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you go to Admin &amp;gt; Projects in Exceptionless, you can choose the project you would like to edit the settings for. Each project can have unique settings.&lt;/p&gt;
&lt;p&gt;The default tab is “General,” which simply houses the project name and attached organization. Nothing fancy here – pretty self explanatory.&lt;/p&gt;
&lt;h3&gt;API Keys&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/api-keys.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-medium wp-image-14601&quot; src=&quot;http://exceptionless.com/assets/api-keys-300x127.png&quot; alt=&quot;exceptionless api keys&quot; width=&quot;300&quot; height=&quot;127&quot; data-id=&quot;14601&quot; srcset=&quot;https://exceptionless.com/assets/api-keys-300x127.png 300w, https://exceptionless.com/assets/api-keys.png 738w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tab is where you can generate an API key for your project. Again, pretty self explanatory. Hit “New API Key” and one gets generated. For more details on API usage, check out the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/API-Usage&quot;&gt;API Usage documentation&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h3&gt;Settings&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/settings.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-medium wp-image-14602&quot; src=&quot;http://exceptionless.com/assets/settings-300x281.png&quot; alt=&quot;exceptionless project settings&quot; width=&quot;300&quot; height=&quot;281&quot; data-id=&quot;14602&quot; srcset=&quot;https://exceptionless.com/assets/settings-300x281.png 300w, https://exceptionless.com/assets/settings.png 734w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is where you can set data exclusions, customize error stacking, and build in some spam detection to your project.&lt;/p&gt;
&lt;h4&gt;Data Exclusions&lt;/h4&gt;
&lt;p&gt;There are several use cases where you might not want to send some data to your Exceptionless project. This field allows you to enter a comma delimited list of field names that will be removed and not transferred to Exceptionless. The perfect example here is a password field, or other personal and sensitive data.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; wildcard is supported in this field and can be used at the end (&lt;code&gt;password*&lt;/code&gt;), beginning(&lt;code&gt;*password&lt;/code&gt;), or on both sides (&lt;code&gt;*password*&lt;/code&gt;) of the field name to further customize your data exclusion.&lt;/p&gt;
&lt;h4&gt;Error Stacking&lt;/h4&gt;
&lt;p&gt;Control over error stacking is another level of customization project settings allows. You can specify user namespaces or common methods to ignore. More details below.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;User Namespaces&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here you can enter a comma delimited list of namespace names that own your application. With those in place, the only methods that will be considered stacking targets are ones inside those namespaces.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Common Methods&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If your code has shared utility methods that may generate a bunch of errors, this could be useful. Enter a comma delimited list of common method names that shouldn’t be used as stacking targets, and they will be ignored.&lt;/p&gt;
&lt;h4&gt;Spam Detection&lt;/h4&gt;
&lt;p&gt;Spam is the worst. So, we added a “Spam Detection” list of common user agents that should be ignored, which you can add to as you see fit. This eliminates a lot of noise, and can be customized to help trim even more depending on your application.&lt;/p&gt;
&lt;p&gt;Along with the comma delimited list of user agents to ignore, you can also tick the box that says “Reduce noise by automatically hiding high volumes of events coming from a single client IP address.” This can ward off large numbers of events being submitted by a spammer or attack on your app.&lt;/p&gt;
&lt;h2&gt;&lt;/h2&gt;
&lt;h4&gt;Integrations&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/integrations.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-medium wp-image-14604&quot; src=&quot;http://exceptionless.com/assets/integrations-300x143.png&quot; alt=&quot;exceptionless integrations&quot; width=&quot;300&quot; height=&quot;143&quot; data-id=&quot;14604&quot; srcset=&quot;https://exceptionless.com/assets/integrations-300x143.png 300w, https://exceptionless.com/assets/integrations.png 734w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Integrations with tools like Slack, Hipchat, JIRA, Basecamp, and others are very popular and can add a level of automated notifications, etc, to your workflow. So, on the integrations tab of your project’s configuration you can create web hooks to integrate with your service or others as mentioned. Each web hook has a URL that it can call, and options for when it should be called. When a selected event occurs, a POST request is submitted with either event or stack data in JSON format. For more details and sample data, visit the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Integrations&quot;&gt;Exceptionless integrations documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;That About Covers It!&lt;/h2&gt;
&lt;p&gt;We hope this will help you make the most out of your Exceptionless projects, allowing you to save some event submissions, get that customization you were looking for, etc.&lt;/p&gt;
&lt;p&gt;Please let us know if you have any questions, comments, concerns, bugs, or anything else we can help with!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-08-08-set-application-version-for-improved-regression-notifications-and-stacking/"/>
    <updated>2016-08-08T13:48:39-05:00</updated>
    <id>https://exceptionless.com/2016-08-08-set-application-version-for-improved-regression-notifications-and-stacking/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/versioning.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-14641&quot; src=&quot;http://exceptionless.com/assets/versioning-300x163.png&quot; alt=&quot;versioning&quot; width=&quot;300&quot; height=&quot;163&quot; data-id=&quot;14641&quot; srcset=&quot;https://exceptionless.com/assets/versioning-300x163.png 300w, https://exceptionless.com/assets/versioning.png 634w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;Do you get annoyed and overwhelmed by event and error notifications?&lt;/p&gt;
&lt;p&gt;You probably have more than one version of your application running, and often &lt;strong&gt;older versions of your app may still be triggering events&lt;/strong&gt; that have been fixed in newer versions.&lt;/p&gt;
&lt;p&gt;**Those events and notifications aren’t very **&lt;strong&gt;helpful&lt;/strong&gt;, so we implemented a versioning system that allows you to set an application version on all events!&lt;/p&gt;
&lt;p&gt;After setting an application version, &lt;strong&gt;when you mark an event fixed and give it a version number, it will only regress if it occurs again in a newer version of your app.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That means there is &lt;strong&gt;less noise for you to wade through, and you can focus on new issues&lt;/strong&gt; in your application without seeing old or non-relevant events constantly.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;How to Set an Application Version&lt;/h2&gt;
&lt;p&gt;Setting an application version in Exceptionless is easy. By default, we attempt to resolve one automatically based on assembly attributes, but we recommend specifying one yourself for improved reliability and accuracy using the following examples.&lt;/p&gt;
&lt;h3&gt;.NET Version Specification Example&lt;/h3&gt;
&lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;using Exceptionless;
ExceptionlessClient.Default.Configuration.SetVersion(&quot;1.2.3&quot;);&lt;/pre&gt;
&lt;h3&gt;JavaScript/Node.JS Version Specification Example&lt;/h3&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;exceptionless.ExceptionlessClient.default.config.setVersion(&quot;1.2.3&quot;);&lt;/pre&gt;
&lt;h2&gt;Fixed!&lt;/h2&gt;
&lt;p&gt;Great! Now, when you mark an error stack as fixed and enter the version that you fixed it in, that event stack will have a &lt;code&gt;Fixed In [Version]&lt;/code&gt; tag and will only regress if it occurs again in a later version of your app. If it does regress, the stack then gets the &lt;code&gt;REGRESSED&lt;/code&gt; tag.&lt;figure id=&quot;attachment_14647&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://exceptionless.com/assets/fixed.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;wp-image-14647 size-medium&quot; src=&quot;http://exceptionless.com/assets/fixed-300x105.jpg&quot; width=&quot;300&quot; height=&quot;105&quot; data-id=&quot;14644&quot; srcset=&quot;https://exceptionless.com/assets/fixed-300x105.jpg 300w, https://exceptionless.com/assets/fixed-768x268.jpg 768w, https://exceptionless.com/assets/fixed.jpg 832w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Fixed&lt;/figcaption&gt; &lt;figure id=&quot;attachment_14645&quot; class=&quot;thumbnail wp-caption aligncenter&quot; style=&quot;width: 300px&quot;&gt;&lt;a href=&quot;http://exceptionless.com/assets/regressed.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;size-medium wp-image-14645&quot; src=&quot;http://exceptionless.com/assets/regressed-300x91.jpg&quot; alt=&quot;Regressed&quot; width=&quot;300&quot; height=&quot;91&quot; data-id=&quot;14645&quot; srcset=&quot;https://exceptionless.com/assets/regressed-300x91.jpg 300w, https://exceptionless.com/assets/regressed-768x233.jpg 768w, https://exceptionless.com/assets/regressed.jpg 910w&quot; sizes=&quot;(max-width: 300px) 100vw, 300px&quot;&gt;&lt;/a&gt;&lt;figcaption class=&quot;caption wp-caption-text&quot;&gt;Regressed&lt;/figcaption&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;If you would like to view fixed events, you can always use the &lt;code&gt;*&lt;/code&gt; wildcard or &lt;code&gt;fixed:true&lt;/code&gt; in search.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We hope you find this feature useful&lt;/strong&gt;, and as always don’t hesitate to leave us feedback over on &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues&quot;&gt;GitHub&lt;/a&gt; or by commenting below.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2016-08-29-exceptionless-helps-identify-issue-affecting-25000-users-case-study/"/>
    <updated>2016-08-29T09:49:25-05:00</updated>
    <id>https://exceptionless.com/2016-08-29-exceptionless-helps-identify-issue-affecting-25000-users-case-study/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-medium wp-image-14664&quot; style=&quot;margin: 50px;&quot; src=&quot;http://exceptionless.com/assets/cevo-logo-300x60.png&quot; alt=&quot;CEVO, Inc. Logo&quot; width=&quot;200&quot; height=&quot;40&quot; data-id=&quot;14664&quot; srcset=&quot;https://exceptionless.com/assets/cevo-logo-300x60.png 300w, https://exceptionless.com/assets/cevo-logo.png 584w&quot; sizes=&quot;(max-width: 200px) 100vw, 200px&quot;&gt;Case study time!&lt;/p&gt;
&lt;p&gt;Today we’ve got a great example of Exceptionless helping software developers identify major issues in their web applications affecting thousands of users.&lt;/p&gt;
&lt;p&gt;In this case, the problem was major enough that the development team stopped using WPF and rewrote their entire UI layer!&lt;/p&gt;
&lt;p&gt;Here’s what Will Graham, &lt;a href=&quot;http://cevo.com/&quot;&gt;CEVO, Inc.&lt;/a&gt; developer, had to say when we asked him a few Exceptionless case study questions.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Case Study – CEVO, Inc.&lt;/h2&gt;
&lt;h3&gt;What’s the number one customer-facing bug Exceptionless helped you squash?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“The issue was so prevalent we completely ditched WPF and rewrote our UI layer in GDI+/WinForms” – Will Graham, CEVO, Inc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Will:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Definitely crashes related to .NET Framework installation corruptions on end-user machines. While Exceptionless didn’t (and can’t) immediately point and say, “here’s how to fix it”, it did shine light on an issue that was affecting approximately 5% of our 500,000 installed base. The issue was so prevalent we completely ditched WPF and rewrote our UI layer in GDI+/WinForms, but &lt;strong&gt;Exceptionless gave us insight to see the problem and how many users were being affected&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Were you surprised at the initial results of using Exceptionless for the first time? How many errors were you seeing?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“Exceptionless has changed our internal development process and how we approach code. Proper error handling and visibility is now a first-class priority for us and Exceptionless makes it super easy.” – Will Graham, CEVO, Inc&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Will:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes and no. &lt;strong&gt;Error handling and tracking had always been more of an afterthought&lt;/strong&gt; — like, something is wrong, we need to look into it now. &lt;strong&gt;We weren’t aware of issues until after our users reported it&lt;/strong&gt; and filtering out the noise to find the signal of real issues was a time consuming process. Running on the Azure stack, we were &lt;strong&gt;frustrated with the information provided&lt;/strong&gt; in the default diagnostics logging.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When we added Exceptionless, we knew we had problems&lt;/strong&gt; with our system, we just didn’t know where and to what extent. To be honest, &lt;strong&gt;Exceptionless has changed our internal development process&lt;/strong&gt; and how we approach code. Proper error handling and visibility is now a first-class priority for us and Exceptionless makes it super easy.&lt;/p&gt;
&lt;h3&gt;What is the number one internal bug you were able to track down with Exceptionless?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Will:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The biggest bug would have to be intermittent failures on our Service Bus instance. Using the metrics provided by Exceptionless, we were able to spend time implementing fault tolerance in very focused areas of the code based on incidence rate and end-user impact.&lt;/p&gt;
&lt;h3&gt;If you had one feature you’d like us to add to Exceptionless, what would it be?&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Will:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m not a huge fan of the current dashboard. It’s effective, but with the amount of data Exceptionless has at it’s disposal, I feel there’s more interesting (and actionable) information that can be shown.&lt;/p&gt;
&lt;h2&gt;We Love It!&lt;/h2&gt;
&lt;p&gt;Thanks for your time, Will! We love to hear from our users, and we’ll definitely take that dashboard feedback and see what we can do there to make it more useful.&lt;/p&gt;
&lt;p&gt;Do you have feedback on Exceptionless? Has it helped you find bugs and beat them into submission? Join us in the &lt;a href=&quot;https://exceptionless.slack.com/&quot;&gt;Exceptionless Slack&lt;/a&gt; and let us know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-01-11-2016-recap-let-there-be-stats/"/>
    <updated>2017-01-11T12:46:22-06:00</updated>
    <id>https://exceptionless.com/2017-01-11-2016-recap-let-there-be-stats/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/2016-recap-let-stats/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-15174 size-large&quot; src=&quot;https://exceptionless.com/assets/2016-in-review-1024x538.jpg&quot; alt=&quot;Exceptionless 2016 in review&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15174&quot; srcset=&quot;https://exceptionless.com/assets/2016-in-review-1024x538.jpg 1024w, https://exceptionless.com/assets/2016-in-review-300x158.jpg 300w, https://exceptionless.com/assets/2016-in-review-768x403.jpg 768w, https://exceptionless.com/assets/2016-in-review.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We were curious, so we thought we would put together some stats for 2016, along with and a recap of some of the notable changes and progression. Enjoy!&lt;/p&gt;
&lt;h2&gt;General Exceptionless Stats&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Over 120,000,000&lt;/strong&gt; events processed&lt;/li&gt;
&lt;li&gt;4716 users&lt;/li&gt;
&lt;li&gt;3614 projects&lt;/li&gt;
&lt;li&gt;2809 organizations&lt;/li&gt;
&lt;/ul&gt;
&lt;!--more--&gt;
&lt;h2&gt;Release Stats&lt;/h2&gt;
&lt;h3&gt;Exceptionless Server:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;7 releases&lt;/li&gt;
&lt;li&gt;88 watching&lt;/li&gt;
&lt;li&gt;774 stars&lt;/li&gt;
&lt;li&gt;236 forks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Exceptionless UI:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;6 releases&lt;/li&gt;
&lt;li&gt;9 watching&lt;/li&gt;
&lt;li&gt;38 stars&lt;/li&gt;
&lt;li&gt;34 forks&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Foundatio:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;4 releases&lt;/li&gt;
&lt;li&gt;65 watching&lt;/li&gt;
&lt;li&gt;472 stars&lt;/li&gt;
&lt;li&gt;97 forks&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Popular Blog Posts / Updates&lt;/h2&gt;
&lt;p&gt;Judging by the traffic to these posts and updates, they’re all worth a read. Check them out!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/sending-log-messages-to-exceptionless/&quot;&gt;Sending Log Messages to Exceptionless&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/better-approach-running-azure-webjobs/&quot;&gt;A Better Approach to Running Azure WebJobs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/simple-app-deployment-azure-continuous-deployment-github/&quot;&gt;Simple App Deployment with Azure Continuous Deployment and GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/exceptionless-4-0-net-core-asp-net-core-support/&quot;&gt;Exceptionless.NET 4.0 – .NET Core and ASP.NET Core Support!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://exceptionless.com/exceptionless-api-usage-and-overview/&quot;&gt;Exceptionless API Usage and Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Notable Changes / Milestones&lt;/h2&gt;
&lt;h3&gt;Server License Changes&lt;/h3&gt;
&lt;p&gt;We changed the server licensing to use the Apache license. Now, every Exceptionless project is under the Apache license and there should be no more confusion on how it’s licensed. &lt;a href=&quot;https://exceptionless.com/new-releases-for-all-the-codes-exceptionless-3-2/&quot;&gt;Read more here.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Session Tracking &amp;amp; Management&lt;/h3&gt;
&lt;p&gt;The ability to track and automatically manage a users session was added, giving you visibility into how long and what a user did while they were using your product. This also answers the question, “what did my users do leading up to this exception?” &lt;a href=&quot;https://exceptionless.com/track-view-user-session-data-exceptionless/&quot;&gt;Read more here.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Fixed by Version&lt;/h3&gt;
&lt;p&gt;In 2016, we also added the ability to mark an event as fixed in a specific version of your app. &lt;a href=&quot;https://exceptionless.com/set-application-version-for-improved-regression-notifications-and-stacking/&quot;&gt;Read more here.&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Performance &amp;amp; Reliablity&lt;/h3&gt;
&lt;p&gt;We spent a lot of time this past year making massive performance and reliability improvements across the board. Tons of bugs got fixed along the way, and additions like bulk updates and deletes, along with optimized query generation got squeezed in there, too! One big factor here is that it has allowed us to move to Elasticsearch 5 &lt;em&gt;much&lt;/em&gt; quicker because all of these improvements allowed us to do things more generically throughout. Much less code to update/change!&lt;/p&gt;
&lt;h4&gt;Elasticsearch 5&lt;/h4&gt;
&lt;p&gt;Like we mentioned above, we’ve done a ton of work to ensure we can move to Elasticsearch 5:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Insanely fast document indexing and searching&lt;/li&gt;
&lt;li&gt;Dynamic aggregations (allowing us to do completely customize stats on any data)&lt;/li&gt;
&lt;li&gt;Reindexing support&lt;/li&gt;
&lt;li&gt;Daily indexes&lt;/li&gt;
&lt;li&gt;Making it easier to self host&lt;/li&gt;
&lt;li&gt;Getting one step closer to server being able to run cross-platform&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We have been doing QA on the Elasticsearch 5 migration since the end of the year and it is currently still in progress – coming soon!&lt;/p&gt;
&lt;h3&gt;Open Source ALL the Things&lt;/h3&gt;
&lt;p&gt;We open sourced two major new libraries this year:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Foundatio.Repositories&quot; target=&quot;_blank&quot;&gt;Foundatio.Repositories&lt;/a&gt;&lt;br&gt;
Foundatio.Repositories are generic repositories with an implementation for Elasticsearch&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Foundatio.Parsers&quot; target=&quot;_blank&quot;&gt;Foundatio.Parsers&lt;/a&gt;&lt;br&gt;
Foundatio.Parsers are Lucene query parsers that allow you to validate or modify lucene queries with ease!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Other Noteworthy Enhancements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Added &lt;a href=&quot;https://exceptionless.com/add-reverse-geocoding-to-your-app/&quot;&gt;Geo location features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Added &lt;a href=&quot;https://exceptionless.com/exceptionless-keyboard-shortcuts/&quot;&gt;Keybaord shortcuts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href=&quot;https://exceptionless.com/introducing-foundatio-3-0-async-efficiency/&quot;&gt;API is now 100% Async&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Had third-party security review conducted&lt;/li&gt;
&lt;li&gt;Made it even easier to self host.&lt;/li&gt;
&lt;li&gt;Massive &lt;a href=&quot;https://exceptionless.com/foundatio-featured-net-blog-version-4-0-release/&quot;&gt;improvements to Foundatio&lt;/a&gt; (100% Async, new implementations)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Onward to 2017 – Stay Tuned for a Roadmap!&lt;/h2&gt;
&lt;p&gt;We’ve got big things coming up, like Exceptionless 5.0 with Elasticsearch 5, which should boost performance gains like 80% faster indexing, lower memory usage, and native reindexing support! No slowing down over here, so stay tuned and enjoy the ride.&lt;/p&gt;
&lt;p&gt;And, as always, if you have anything you’d like to see in upcoming Exceptionless releases, please let us know!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-01-18-upgrading-elasticsearch-1-x-5-x-live-coding-session/"/>
    <updated>2017-01-18T10:10:39-06:00</updated>
    <id>https://exceptionless.com/2017-01-18-upgrading-elasticsearch-1-x-5-x-live-coding-session/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/xAYyE-exceptionless-weekly-demo-1-9-17&quot; target=&quot;_blank&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15198&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;https://exceptionless.com/assets/live-stream-1-elasticsearch-header-1024x538.jpg&quot; alt=&quot;elasticsearch 1.x to 1.5 upgrade&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15198&quot; srcset=&quot;https://exceptionless.com/assets/live-stream-1-elasticsearch-header-1024x538.jpg 1024w, https://exceptionless.com/assets/live-stream-1-elasticsearch-header-300x158.jpg 300w, https://exceptionless.com/assets/live-stream-1-elasticsearch-header-768x403.jpg 768w, https://exceptionless.com/assets/live-stream-1-elasticsearch-header.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;New Weekly Coding Live Stream&lt;/h2&gt;
&lt;p&gt;In the first episode our &lt;strong&gt;all new&lt;/strong&gt; &lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/xAYyE-exceptionless-weekly-demo-1-9-17&quot; target=&quot;_blank&quot;&gt;weekly live streaming demo session&lt;/a&gt;, Blake talks about the recent push to migrate Exceptionless from Elasticsearch 1.x to Elasticsearch 5.x.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;One major part of this project has been updating &lt;a href=&quot;https://github.com/exceptionless/Foundatio.Repositories&quot; target=&quot;_blank&quot;&gt;Foundatio.Repositories&lt;/a&gt; and &lt;a href=&quot;https://github.com/exceptionless/Foundatio.Parsers&quot; target=&quot;_blank&quot;&gt;Foundatio.parsers&lt;/a&gt;, both of which are parts of our &lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot; target=&quot;_blank&quot;&gt;pluggable foundation block project for building distributed apps&lt;/a&gt;, to support Elasticsearch 5.x.&lt;/p&gt;
&lt;p&gt;Once that was complete, we then worked on reindex scripts for migrating data from Elasticsearch 1.x to 5.x using &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/5.1/docs-reindex.html&quot; target=&quot;_blank&quot;&gt;Elasticsearch’s external reindex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out the live stream, and tune in weekly for the next episode.&lt;/p&gt;
&lt;p&gt;Want Blake to demo something specific? Just leave a comment here and we’ll make sure he gets it done!&lt;/p&gt;
&lt;h3 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/xAYyE-exceptionless-weekly-demo-1-9-17&quot; target=&quot;_blank&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h3&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-01-24-2017-exceptionless-feature-functionality-and-enhancement-roadmap/"/>
    <updated>2017-01-24T10:14:45-06:00</updated>
    <id>https://exceptionless.com/2017-01-24-2017-exceptionless-feature-functionality-and-enhancement-roadmap/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15226&quot; src=&quot;https://exceptionless.com/assets/elasticsearch-2017-roadmap-header-1024x538.jpg&quot; alt=&quot;exceptionless feature roadmap for 2017&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15226&quot; srcset=&quot;https://exceptionless.com/assets/elasticsearch-2017-roadmap-header-1024x538.jpg 1024w, https://exceptionless.com/assets/elasticsearch-2017-roadmap-header-300x158.jpg 300w, https://exceptionless.com/assets/elasticsearch-2017-roadmap-header-768x403.jpg 768w, https://exceptionless.com/assets/elasticsearch-2017-roadmap-header.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;
&lt;p&gt;Can you believe it’s almost February already! Us either. No rest for the whicked, though, as we sit down to get cranking on our list of Exceptionless changes for 2017.&lt;/p&gt;
&lt;p&gt;We have a a great list of features, functionality changes, and enhancements planned, and no doubt we’ll work in a few other popular feature requests and, naturally, bug fixes along the way.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the primary roadmap, shall we?&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Upgrading to Elasticsearch 5&lt;/h2&gt;
&lt;p&gt;Upgrading to Elasticsearch 5 has been in the works for some time now, with early testing starting in late 2016. As of January 23rd, we have &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/145&quot; target=&quot;_blank&quot;&gt;officially pushed the upgrade to production&lt;/a&gt; and are looking for feedback, missed bugs, and performance improvement reports from anyone using it!&lt;/p&gt;
&lt;h3&gt;Primary Elasticsearch 5 Benefits&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Elasticsearch 5 is the latest version of &lt;a href=&quot;https://www.elastic.co/products&quot;&gt;ElasticSearch&lt;/a&gt; and brings in massive improvements to event indexing speed, reduced memory sizes, and much more.&lt;/li&gt;
&lt;li&gt;The Elasticsearch libraries support .NET Core, bringing us one step closer to fulfilling a vision that includes cross-platform support.&lt;/li&gt;
&lt;li&gt;Our new implementation is built on a new, faster Microsoft Azure and SSD storage infrastructure. This will greatly increase the indexing and searching performance,  reducing dashboard latencies, among other things.&lt;/li&gt;
&lt;li&gt;With the power of &lt;a href=&quot;https://github.com/exceptionless/Foundatio.Parsers&quot; target=&quot;_blank&quot;&gt;Foundatio.Parsers&lt;/a&gt; project, we have gained the ability to consume generic aggregations and pivot/report on data any way our users like it.&lt;/li&gt;
&lt;li&gt;This upgrade also makes it easier to self host through the use of containers. Our goal is to move the entire app to use containers, which will allow you to self host in seconds!&lt;/li&gt;
&lt;li&gt;We will now be doing daily indexes for more performance, fine grained backups, and the ability to more quickly change our indexes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Future Exceptionless Notification Changes&lt;/h2&gt;
&lt;p&gt;We’re always working on notifications, we’ve got &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/177&quot; target=&quot;_blank&quot;&gt;several distinct changes we want to work on in 2017&lt;/a&gt;. Here are a few of the important ones:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We will continue working on rich, rule based notifications for email, services like Slack and Hipchat, and more.&lt;/li&gt;
&lt;li&gt;Pausing notifications will soon be a thing!&lt;/li&gt;
&lt;li&gt;You’ll also be able to set up notifications based on the rate of events, so you can know when issues are ramping up or getting out of hand.&lt;/li&gt;
&lt;li&gt;Lastly, you will be able to receive a periodic digest email based on activity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Porting to .NET Core and Containers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We want to port the Exceptionless app to &lt;a href=&quot;https://www.microsoft.com/net/core&quot;&gt;.NET Core&lt;/a&gt; so we can run it anywhere (macOS, Linux or Windows).&lt;/li&gt;
&lt;li&gt;Running on .NET Core also brings massive performance improvements and lower overhead, which will have positive trickle down affects throughout the app.&lt;/li&gt;
&lt;li&gt;Once we support .NET Core, we can containerize the entire app, allowing us to scale more easily.&lt;/li&gt;
&lt;li&gt;These changes will make self hosting super simple. You’ll basically be able to run “docker run -d exceptionless`” and be done!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Custom Exceptionless Dashboards&lt;/h2&gt;
&lt;p&gt;We know the dashboard is crucial for many things, and we want to make them more customizable to fit each user’s individual cases. At the same time, we want to make sure we maximize business value. So, we plan on working on several &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/229&quot; target=&quot;_blank&quot;&gt;features and functional aspects of dashboards&lt;/a&gt;, namely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creating pre-define dashboards that are more granular, such as device usage, breakdown by exception type, etc.&lt;/li&gt;
&lt;li&gt;Allow users to create their own custom dashboards.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Exceptionless Clients&lt;/h2&gt;
&lt;p&gt;We really want to add new native clients to Exceptionless, and are including that as a major goal for 2017. Everything we are working on is moving in that direction, one way or the other, and we hope to make further announcements in this department soon!&lt;/p&gt;
&lt;p&gt;We are, of course, always accepting pull requests as well!&lt;/p&gt;
&lt;h2&gt;What Are We Missing?&lt;/h2&gt;
&lt;p&gt;What have we forgotten? We know everything isn’t included on this list, but if we have missed something big that you can’t live without, please let us know!&lt;/p&gt;
&lt;p&gt;Otherwise, look for a new version announcement &lt;strong&gt;very soon&lt;/strong&gt;, and get ready to upgrade and take advantage of several of these new upcoming changes.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-02-01-setting-new-elasticsearch-cluster-reindexing-mappings-live-code-demo/"/>
    <updated>2017-02-01T12:56:26-06:00</updated>
    <id>https://exceptionless.com/2017-02-01-setting-new-elasticsearch-cluster-reindexing-mappings-live-code-demo/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/k4JO7-exceptionless-weekly-demo-1-16-17&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15250&quot; src=&quot;https://exceptionless.com/assets/170116-live-code-demo-1024x538.jpg&quot; alt=&quot;&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15250&quot; srcset=&quot;https://exceptionless.com/assets/170116-live-code-demo-1024x538.jpg 1024w, https://exceptionless.com/assets/170116-live-code-demo-300x158.jpg 300w, https://exceptionless.com/assets/170116-live-code-demo-768x403.jpg 768w, https://exceptionless.com/assets/170116-live-code-demo.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Getting Ready for Exceptionless 4.0!&lt;/h2&gt;
&lt;!--more--&gt;
&lt;p&gt;In this live code review, we go over some of the recent changes and processes to get ready for Exceptionless 4.0, which include implementing a new Elasticsearch cluster, reindexing into it using the Elastic Arm templates, and updating existing events mapping.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/elastic/azure-marketplace&quot; target=&quot;_blank&quot;&gt;Elastic Arm templates&lt;/a&gt; automate the setup of an Elasticsearch with a few clicks, which is awesome.&lt;/p&gt;
&lt;p&gt;Then, we had to &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/1.7/indices-put-mapping.html&quot; target=&quot;_blank&quot;&gt;update our existing events mapping&lt;/a&gt; to have a last updated field and is deleted flag so we can do &lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/5.1/docs-reindex.html&quot; target=&quot;_blank&quot;&gt;incremental reindex passes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/k4JO7-exceptionless-weekly-demo-1-16-17&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-02-07-exceptionless-4-0/"/>
    <updated>2017-02-07T13:54:35-06:00</updated>
    <id>https://exceptionless.com/2017-02-07-exceptionless-4-0/</id>
    <content type="html">&lt;p&gt;&lt;img loading=&quot;lazy&quot; class=&quot;alignright size-full wp-image-15281&quot; style=&quot;margin-left: 15px;&quot; src=&quot;https://exceptionless.com/assets/exceptionless-4.png&quot; alt=&quot;Exceptionless 4.0 Announcement&quot; width=&quot;260&quot; height=&quot;260&quot; data-id=&quot;15281&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-4.png 260w, https://exceptionless.com/assets/exceptionless-4-150x150.png 150w&quot; sizes=&quot;(max-width: 260px) 100vw, 260px&quot;&gt;That’s right folks, Exceptionless 4.0 is here and we’ve got the full low-down on all the improvements, upgrades, and enhancements in this week’s blog article, along with how to upgrade instructions for self hosters.&lt;/p&gt;
&lt;p&gt;The primary focus of version 4.0 was to add support for Elasticsearch 5. By migrating from Elasticsearch 1.7 to 5, we removed growing technical debt and benefited greatly in the process. Here is an overview of the benefits gained by migrating to Elasticsearch 5 in 4.0.0.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Performance&lt;/h2&gt;
&lt;p&gt;Since we first migrated to Elasticsearch 1.x from MongoDB, we’ve learned a lot of hard lessons. With 4.0 and the upgrade to Elasticsearch 5, we took all those lessons and applied them to the new release and infrastructure setup. Here are some performance improvements and notes that came out of those implementations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We’ve moved from monthly indexes to daily indexes. This change means that when you are filtering by the last 24 hours or last week, you are greatly reducing the amount of work Elasticsearch has to do to return the requested data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Because of this, the average use case will see between &lt;strong&gt;25% and 80% improvement to indexing&lt;/strong&gt; throughput. This means that, with the same hardware, we can index the same documents much faster!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We moved from Groovy scripts to Painless scripts, which are &lt;strong&gt;four times faster&lt;/strong&gt;. By moving to Painless scripts, we also greatly simplified the burden of having to modify configuration files to enable scripting!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Elasticsearch has added a lot of new data types since 1.7, and we are now taking advantage of them to &lt;strong&gt;reduce memory, storage and query costs.&lt;/strong&gt; This means we can query the same data faster, using less memory doing it. We’ve also set up more sensible defaults to ensure we don’t index very long strings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We’ve also made several performance and reliability improvements to snapshots (backups).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Self Hosting improvements&lt;/h2&gt;
&lt;p&gt;Our goal is to have everyone be able to setup and use Exceptionless in a matter of minutes. One of the areas that had hendered a lot of self hosters in the past was forgetting to update the elasticsearch.yml file, which is no longer an issue with the migration to Painless scripts. If you’re a self hoster, check out the&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The move to using Painless scripts as part of bulk updates and ingest pipelines reduced the burden of having to modify configuration files to enable scripting! Long gone are the times where you would have to reset your setup because you missed a configuration step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We’ve also added various maintenance jobs that handle backups and restores automatically, so you don’t have to worry about losing your data!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Future upgrades should be seamless&lt;/strong&gt; as Elasticsearch now handles reindexing out of the box! Once you have migrated your data to Elasticsearch 5, we think future major upgrades will just be handled by the Exceptionless app itself!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can now also use &lt;a href=&quot;https://hub.docker.com/_/elasticsearch&quot;&gt;Docker&lt;/a&gt; or &lt;a href=&quot;https://github.com/elastic/azure-marketplace&quot;&gt;Azure arm templates&lt;/a&gt; to quickly set up a cluster. We really like this direction and will continue moving down this path, hopefully getting to the point where you can click a single button and have an Exceptionless production instance running locally!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dashboards&lt;/h2&gt;
&lt;p&gt;With Exceptionless 4.0.0, we continued to focus on finishing up backend improvements to both our &lt;a href=&quot;https://github.com/exceptionless/Foundatio.Repositories&quot;&gt;repositories&lt;/a&gt; and &lt;a href=&quot;https://github.com/exceptionless/Foundatio.Parsers&quot;&gt;parsers&lt;/a&gt; that we made in the 3.5 releases. We feel that &lt;strong&gt;all the pieces are finally in place to allow us to do custom dashboards in the near future&lt;/strong&gt;, something we talk about in our &lt;a href=&quot;https://exceptionless.com/2017-exceptionless-feature-functionality-and-enhancement-roadmap/&quot;&gt;2017 Roadmap blog post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Foundatio.Parsers&quot;&gt;Foundatio.Parsers&lt;/a&gt; now gives us the ability to define and validate custom aggregations using Lucene-style syntax. For example, lets say I want a date histogram that shows the min, max and average event value. I’d just need to pass &lt;code&gt;date:(date min:value max:value avg:value)&lt;/code&gt; to the following endpoint: &lt;a href=&quot;https://api.exceptionless.io/docs/index#!/Event/Event_GetCountAsync&quot;&gt;&lt;code&gt;/api/v2/events/count?aggregations=date:(date min:value max:value avg:value)&lt;/code&gt;&lt;/a&gt; to return aggregations across a time series!&lt;/p&gt;
&lt;h2&gt;Upgrading to 4.0.0&lt;/h2&gt;
&lt;p&gt;The only users that need to worry about upgrading anything for this new release are self hosters. If you are self hosting Exceptionless, please review the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting&quot;&gt;Self Hosting Documentation&lt;/a&gt;, which contains information about upgrading your existing install.&lt;/p&gt;
&lt;p&gt;Also, please take a look at the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/compare/v3.5.1...v4.0.0&quot;&gt;change log&lt;/a&gt; for a full list of the changes.&lt;/p&gt;
&lt;h2&gt;Always Improving&lt;/h2&gt;
&lt;p&gt;We’re always striving to improve the efficiency of Exceptionless and all of our projects. If you see any room for improvement or have any comments when using anything from us, please send us an in-app message, &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues&quot;&gt;submit a GitHub issue&lt;/a&gt; or &lt;a href=&quot;https://exceptionless.com/contact/&quot;&gt;contact us&lt;/a&gt; on the website.&lt;/p&gt;
&lt;h2&gt;And Lastly, Thanks!&lt;/h2&gt;
&lt;p&gt;We’d like to say thank you to the community, project sponsors, and the Elasticsearch team for helping us ship 4.0.0. You guys rock!&lt;/p&gt;
&lt;h3&gt;Want to know what’s coming next?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/2017-exceptionless-feature-functionality-and-enhancement-roadmap/&quot;&gt;Check out the 2017 Roadmap&lt;/a&gt; and let us know your thoughts on our planned development.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-02-15-exceptionless-4-0-enhancement-overview-live-code-demo/"/>
    <updated>2017-02-15T12:01:08-06:00</updated>
    <id>https://exceptionless.com/2017-02-15-exceptionless-4-0-enhancement-overview-live-code-demo/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/9WmaQ-exceptionless-weekly-demo-1-23-17&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-15304 size-large&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;https://exceptionless.com/assets/exceptionless-4-enhancement-live-demo-1024x538.jpg&quot; alt=&quot;Exceptionless 4 Enhancement Overview&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15304&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-4-enhancement-live-demo-1024x538.jpg 1024w, https://exceptionless.com/assets/exceptionless-4-enhancement-live-demo-300x158.jpg 300w, https://exceptionless.com/assets/exceptionless-4-enhancement-live-demo-768x403.jpg 768w, https://exceptionless.com/assets/exceptionless-4-enhancement-live-demo.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We recently &lt;a href=&quot;https://exceptionless.com/exceptionless-4-0/&quot;&gt;announced Exceptionless 4.0&lt;/a&gt;, but we also recorded a &lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/9WmaQ-exceptionless-weekly-demo-1-23-17&quot;&gt;short demo of some of the enhancements&lt;/a&gt; and talked through them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In this live code/feature/functionality review video, Blake talks about:&lt;/strong&gt;&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deploying Elasticsearch 5.x to production with completely new Azure resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixing bugs and doing extensive testing on the new Elasticsearch 5 and Azure implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Massive performance boosts due to daily indexes, SSD-backed storage, and bug fixes. These boosts should result in near0instant page loads and huge improvements to session dashboards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Automating cluster setup using Azure CLI and Elasticsearch ARM Templates.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A new custom SSH script that allows us to quickly and securely connect to machines, as well as forward ports for things like Kibana.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New Azure resources and dashboards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setting up WebJobs to run as cron jobs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We also found &lt;a href=&quot;http://pm2.keymetrics.io/&quot;&gt;PM2&lt;/a&gt;, a new way to manage Node.js services for our &lt;a href=&quot;https://github.com/etsy/statsd&quot;&gt;StatsD&lt;/a&gt; service.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/9WmaQ-exceptionless-weekly-demo-1-23-17&quot;&gt;WATCH VIDEO&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-02-17-live-code-demo-new-query-validation-di-issues-error-handling/"/>
    <updated>2017-02-17T12:00:05-06:00</updated>
    <id>https://exceptionless.com/2017-02-17-live-code-demo-new-query-validation-di-issues-error-handling/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/4DDYJ-exceptionless-weekly-demo-2-1-17&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15307&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;https://exceptionless.com/assets/query-validation-di-issues-error-handling-1024x538.jpg&quot; alt=&quot;&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15307&quot; srcset=&quot;https://exceptionless.com/assets/query-validation-di-issues-error-handling-1024x538.jpg 1024w, https://exceptionless.com/assets/query-validation-di-issues-error-handling-300x158.jpg 300w, https://exceptionless.com/assets/query-validation-di-issues-error-handling-768x403.jpg 768w, https://exceptionless.com/assets/query-validation-di-issues-error-handling.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This week’s live code demo comes to you during a week of final testing and tweaks prior to our &lt;a href=&quot;https://exceptionless.com/exceptionless-4-0/&quot;&gt;launch of Exceptionless 4.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Blake dives into and shows you the code for several important improvements and fixes, which we’ve listed below.&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We’ve added a much improved Query Validator to the repositories and Exceptionless.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Some DI issues with running jobs under the debugger have also been fixed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then, we added error handling around heartbeat submission end points.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And finally, an issue where the app would blow up when trying to save invalid reference ids has been fixed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/4DDYJ-exceptionless-weekly-demo-2-1-17&quot;&gt;Watch Video&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-02-22-live-code-demo-review-of-exceptionless-4-0-launch/"/>
    <updated>2017-02-22T08:44:59-06:00</updated>
    <id>https://exceptionless.com/2017-02-22-live-code-demo-review-of-exceptionless-4-0-launch/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/bG9BO-exceptionless-weekly-demo-2-6-17-3&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15327&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;https://exceptionless.com/assets/170221-live-code-review-header-1024x538.jpg&quot; alt=&quot;&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15327&quot; srcset=&quot;https://exceptionless.com/assets/170221-live-code-review-header-1024x538.jpg 1024w, https://exceptionless.com/assets/170221-live-code-review-header-300x158.jpg 300w, https://exceptionless.com/assets/170221-live-code-review-header-768x403.jpg 768w, https://exceptionless.com/assets/170221-live-code-review-header.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;During the &lt;a href=&quot;https://exceptionless.com/exceptionless-4-0/&quot;&gt;Exceptionless 4.0 Release&lt;/a&gt;, we covered a lot of enhancements and changes. In this week’s Live Code Demo, Blake reviews the 4.0 release notes and talks through other tweaks and post-launch cleanup.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;In this Live Code Demo Episode…&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Exceptionless 4.0 has been released for a few weeks now, with ElasticSearch 5 running in production for even longer. Let’s take another look at the release notes and talk through some notable topics.&lt;/li&gt;
&lt;li&gt;We look at the self hosting &amp;amp; upgrading documentation, which has been updated for Exceptionless 4.0.&lt;/li&gt;
&lt;li&gt;In the process of the latest release, we upgraded Foundatio to new csproject format, logging many bugs on the .NET CLI along the way. Blake reviews this in the above video as well.&lt;/li&gt;
&lt;li&gt;In the end, we obviously had to merge in pull requests and clean up issues, which he also reviews.&lt;/li&gt;
&lt;li&gt;Lastly, we cleaned up the new Azure infrastructure!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://www.liveedu.tv/niemyjski/videos/bG9BO-exceptionless-weekly-demo-2-6-17-3&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-02-28-duplicate-event-total-fix-setting-min-log-levels-foundatio-updates-live-code-demo/"/>
    <updated>2017-02-28T11:31:55-06:00</updated>
    <id>https://exceptionless.com/2017-02-28-duplicate-event-total-fix-setting-min-log-levels-foundatio-updates-live-code-demo/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.liveedu.tv/niemyjski/2qyKy-exceptionless-weekly-demo-2-20-17/bGgd4-exceptionless-weekly-demo-2-13-17/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15351&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;https://exceptionless.com/assets/170228-header-1024x538.jpg&quot; alt=&quot;exceptionless duplicate event totals, min log levels, foundatio&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15351&quot; srcset=&quot;https://exceptionless.com/assets/170228-header-1024x538.jpg 1024w, https://exceptionless.com/assets/170228-header-300x158.jpg 300w, https://exceptionless.com/assets/170228-header-768x403.jpg 768w, https://exceptionless.com/assets/170228-header.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Blake’s back at it this week, onward to something new after the Exceptionless 4.0 launch. Today we talk deduplicate event totals, setting minimum log levels, updates to Foundatio, and tracking down an event processor job issue!&lt;!--more--&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We had previously reverted to earlier commits that showed the deduplicated event total separately from the event total, but since we are running on new indexes now, we are able to reliably &lt;strong&gt;include the deduplicated total as the total number of events&lt;/strong&gt;. &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/270&quot;&gt;&lt;em&gt;GitHub Issue #270&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can now set the min log level in configuration using: &lt;pre class=&quot;brush: csharp; title: ; notranslate&quot; title=&quot;&quot;&gt;ExceptionlessClient.Default.SetDefaultMinLogLevel(LogLevel.Warn);&lt;/pre&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/commit/bc29626a8c70fb23cb22983f8e55818b8f889cb2&quot;&gt;Learn more&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot;&gt;Foundatio&lt;/a&gt; updates we made include performance and handling improvements to the message bus. &lt;a href=&quot;https://github.com/exceptionless/Foundatio/commit/c66ce6691614fca4ef423a34505a51ea0f2f354f&quot;&gt;Learn more about these improvements on GitHub&lt;/a&gt;. We also added IHybridCacheClient interface marker, giving you granular control over dependency injection. Now, you can inject either a cache client or a hybrid cache client much easier. &lt;em&gt;&lt;a href=&quot;https://github.com/exceptionless/Foundatio/commit/c0e30a08a80c4a29a47c83d8dda32316e4a9ed04&quot;&gt;Learn more.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastly for this week, we are working on tracking down the root cause of an issue with the event processor job that is causing it to stop processing events. More on that soon!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://www.liveedu.tv/niemyjski/2qyKy-exceptionless-weekly-demo-2-20-17/bGgd4-exceptionless-weekly-demo-2-13-17/&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;


</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-03-08-email-logging-ui-improvements-foundatio-updates-live-code-demo/"/>
    <updated>2017-03-08T11:15:49-06:00</updated>
    <id>https://exceptionless.com/2017-03-08-email-logging-ui-improvements-foundatio-updates-live-code-demo/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://www.liveedu.tv/niemyjski/2qyKy-exceptionless-weekly-demo-2-20-17/xAq0E-exceptionless-weekly-demo-2-20-17/&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15370&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;https://exceptionless.com/assets/live-code-demo-170308-1024x538.jpg&quot; alt=&quot;Exceptionless live code demo 2/20/17&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15370&quot; srcset=&quot;https://exceptionless.com/assets/live-code-demo-170308-1024x538.jpg 1024w, https://exceptionless.com/assets/live-code-demo-170308-300x158.jpg 300w, https://exceptionless.com/assets/live-code-demo-170308-768x403.jpg 768w, https://exceptionless.com/assets/live-code-demo-170308.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Watch out this week, Blake’s on fire! We’re talking email loggings, UI tweaks, Exceptionless.NET updates and fixes, Foundatio updates, and Foundatio.Repositories updates. Lot’s going on, let’s check it out in &lt;a href=&quot;https://www.liveedu.tv/niemyjski/2qyKy-exceptionless-weekly-demo-2-20-17/xAq0E-exceptionless-weekly-demo-2-20-17/&quot;&gt;this week’s Live Code Demo&lt;/a&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Updates&lt;/h2&gt;
&lt;p&gt;This week, we made improvements to email logging and documentation when running in dev mode. Find out more by watching the live coding video or visiting the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless&quot;&gt;Exceptionless repo on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Exceptionless.UI&lt;/h2&gt;
&lt;p&gt;We were only showing the exception tab if there was an event type of error, previously, but now we are always showing the exception tab if an exception is part of an event.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI&quot;&gt;View Repo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless.NET&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We added SetException EventBuilder overload so you can submit any event type with an exception object.&lt;/li&gt;
&lt;li&gt;Then, we fixed an issue where the client could blow up on startup while trying to wire up to trace listeners.&lt;/li&gt;
&lt;li&gt;Finally, we also fixed an issue where signed web packages http handlers weren’t being registered with the right namespace.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net&quot;&gt;View Repo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Foundatio&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Attempted to track down issues where the redis queues would stop processing.&lt;/li&gt;
&lt;li&gt;Worked with Microsoft to get our unit tests discoverable on the new csproject format.&lt;/li&gt;
&lt;li&gt;Added new &lt;a href=&quot;https://github.com/exceptionless/Foundatio/commit/50dddaa52d3cc929a62d42b40f8d767e4f916545&quot;&gt;Foundatio.Jobs commands package&lt;/a&gt; that allows you to quickly discover and get command line help on your jobs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot;&gt;View Repo&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Foundatio.Repositories&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fixed various issues with running data migration scripts for the first time.&lt;/li&gt;
&lt;li&gt;Fixed an issues with GetByIds where falling back to search wouldn’t take into account multiple pages of results.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Foundatio.Repositories&quot;&gt;View Repo&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://www.liveedu.tv/niemyjski/2qyKy-exceptionless-weekly-demo-2-20-17/xAq0E-exceptionless-weekly-demo-2-20-17/&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-04-04-bug-fixes-archival-format-foundatio-updates/"/>
    <updated>2017-04-04T12:45:30-05:00</updated>
    <id>https://exceptionless.com/2017-04-04-bug-fixes-archival-format-foundatio-updates/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;This week we’ve got some cool stuff in our weekly update! Along with the below, you can now follow along over on the new &lt;a href=&quot;https://www.youtube.com/playlist?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;YouTube Exceptionless Weekly Updates playlist&lt;/a&gt;, so make sure to check it out and &lt;a href=&quot;https://www.youtube.com/user/exceptionless?sub_confirmation=1&quot;&gt;subscribe&lt;/a&gt;!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Let’s Get Down To Business&lt;/h2&gt;
&lt;h3&gt;Updates to Exceptionless&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We fixed an issue where you couldn’t run Exceptionless on AWS because you couldn’t install plugins on their ElasticSearch service. &lt;em&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/280&quot;&gt;#280&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The archival format has also been change from &lt;code&gt;projected\year\month\day&lt;/code&gt; to &lt;code&gt;year\month\day\hour\projectid&lt;/code&gt;. This allows you to quickly restore or download all events in a time period without enumerating all backed up projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Foundatio Updates&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;In Foundatio, we fixed an issue where Redis Queues could deadlock, causing them to stop processing. This was being caused from topic messages locking the calling thread.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Updates to Foundatio Repositories&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GetById and GetByIds now take an Id Type which allows us to specify routing information and much more. We have an implicit conversion that handles existing signatures.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/osuMyj6eW98?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-04-04-march-update-rollup-new-releases-updates-bug-fixes/"/>
    <updated>2017-04-04T13:37:04-05:00</updated>
    <id>https://exceptionless.com/2017-04-04-march-update-rollup-new-releases-updates-bug-fixes/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;March was a productive month! We got tons done, and we’re here to share everything with you so you’re up to date and can hold us accountable if you notice any bugs in the changes.&lt;/p&gt;
&lt;p&gt;Let’s get to it!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Week of 3/6/2017&lt;/h2&gt;
&lt;h3&gt;Search query fix, Implemented AsyncAutoResetEvent in Foundatio, Upgraded project format&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed an issue in Exceptionless where any search query starting with data. was being modified.&lt;/li&gt;
&lt;li&gt;In Foundatio, the main repository that will contain the default deployment and EditorConfig settings for all of our projects, an effort was made to use less locking in queues and the CacheLockProvider by using AsyncAutoResetEvent, a lighter weight async primitive.&lt;/li&gt;
&lt;li&gt;We also upgraded to the new VS2017 project format in our Foundatio repositories.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Week of 3/13/2017&lt;/h2&gt;
&lt;h3&gt;Attended Elastic{ON} 17, Released Foundatio 5.0, PowerShell script update, RabbitMQ update, IMessageBus breakage, Marker interface addition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Blake attended &lt;a href=&quot;https://www.elastic.co/elasticon/conf/2017/sf&quot;&gt;Elastic{ON}&lt;/a&gt; and talked to product teams about issues we’ve been running into, as well as the future of Elasticsearch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foundatio&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Foundatio/releases/tag/v5.0.0&quot;&gt;Released Version 5.0 of Foundatio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We also modified an existing PowerShell script that updates existing projects to the VS2017 project format.&lt;/li&gt;
&lt;li&gt;And, of course, we added some more documentation!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foundatio Repositories&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Updated the RabbitMQ queues to use the delayed message exchange&lt;/li&gt;
&lt;li&gt;Broke the IMessageBus.Subscribe API surface by changing the signature to SubscribeAsync&lt;/li&gt;
&lt;li&gt;Added a marker interface when patching documents&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/G-faYRV7-qI?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;Watch the 3/13/2017 update video&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Week of 3/20/2017&lt;/h2&gt;
&lt;h3&gt;Released Exceptionless 4.0.1, Performance improvements, Bug fixes, Exceptionless.NET udpates, Foundatio Amazon SQS queues and CloudWatch metrics pull requests, Foundatio reindexing improvements&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Exceptionless&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/releases/tag/v4.0.1&quot;&gt;Released Exceptionless version 4.0.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;We upgraded to the latest Foundatio and Repositories builds, which brings in some performance improvements and bug fixes.&lt;/li&gt;
&lt;li&gt;Visual Studio 2017 is now a requirement to debug any Exceptionless project.&lt;/li&gt;
&lt;li&gt;Various bug fixes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exceptionless.Net&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Upgraded to VS2017 project format and fixed an asp.net core bug.&lt;/li&gt;
&lt;li&gt;All nightly builds for all of our nuget packages can now be found on &lt;a href=&quot;https://www.myget.org/gallery/exceptionless&quot;&gt;myget&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foundatio&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;New pull request for Amazon SQS queues and CloudWatch metrics&lt;/li&gt;
&lt;li&gt;We also had some more documentation contributions!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foundatio Repositories&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;We made some improvements around reindexing.&lt;/li&gt;
&lt;li&gt;Then we also fixed a few various bugs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/B9gVzFmBzyY?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;Watch the 3/20/2017 update video&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Week of 3/27/2017&lt;/h2&gt;
&lt;h3&gt;Event metadata archiving, Amazon SQS queus and CloudWatch metrics pull requests, Blake speaks at code camp&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;This week we added a setting in Exceptionless for &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/pull/287&quot;&gt;disabling the archiving of event metadata&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For Foundatio, a new pull request was made for Amazon SQS queues and CloudWatch metrics. We’ve done a lot of work to queues and the message buses to make the constructors have options classes that get passed in. We’ve also done a lot of work to the Azure implementations to try and optimize them and fix bugs.&lt;/li&gt;
&lt;li&gt;Lastly, Blake spoke at &lt;a href=&quot;http://newcodecamp.com/&quot;&gt;Northeast Wisconsin Code Camp&lt;/a&gt; over the weekend on exception driven development. &lt;a href=&quot;https://github.com/exceptionless/MediaKit/tree/master/presentations/exceptionless&quot;&gt;The slides can be found here.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/x9JB3BgYELQ?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;Watch the 3/27/2017 update video&lt;/a&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/njr7ang0BQg?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-04-10-azure-functions-email-client-foundatio-4317-weekly-update/"/>
    <updated>2017-04-10T15:55:21-05:00</updated>
    <id>https://exceptionless.com/2017-04-10-azure-functions-email-client-foundatio-4317-weekly-update/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;Q2 2017 is here already, whether we are ready for it or not! &lt;a href=&quot;https://exceptionless.com/march-update-rollup-new-releases-updates-bug-fixes/&quot;&gt;In March, we released several new updates to Exceptionless and Foundatio&lt;/a&gt;, so our first update in April isn’t crazy, but here we go!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Updates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We took some time to look into supporting Azure Functions. &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/pull/293&quot; target=&quot;_blank&quot;&gt;learn more&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And we received a few pull requests, one of which was for &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/pull/291&quot; target=&quot;_blank&quot;&gt;updating our email client to support different protocols&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Foundatio Updates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;This past week, we worked on some bug fixes related to queue processing in Foundatio.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/ShnXh4Mgx4U?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/live-coding/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-04-21-exceptionless-net-client-and-core-releases-bugs-usability-performance-self-hosting/"/>
    <updated>2017-04-21T10:07:33-05:00</updated>
    <id>https://exceptionless.com/2017-04-21-exceptionless-net-client-and-core-releases-bugs-usability-performance-self-hosting/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-15502 size-large&quot; src=&quot;https://exceptionless.com/assets/new-releases-header3-1024x538.jpg&quot; alt=&quot;&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15497&quot; srcset=&quot;https://exceptionless.com/assets/new-releases-header3-1024x538.jpg 1024w, https://exceptionless.com/assets/new-releases-header3-300x158.jpg 300w, https://exceptionless.com/assets/new-releases-header3-768x403.jpg 768w, https://exceptionless.com/assets/new-releases-header3.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;
&lt;p&gt;This past week we released Exceptionless 4.0.2 and Exceptionless.NET 4.0.3, consisting of maintenance updates that fixed several usability issues for self hosters, various performance, issues, bug fixes, and some general improvements.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Below is a highlight of the release notes, and don’t forget to let us know how we’re doing or what can improve by following the relevant links to GitHub and posting an “issue.”&lt;/p&gt;
&lt;p&gt;Lastly, thanks to all of our contributors for helping us solve problems, add functionality, and improve Exceptionless!&lt;/p&gt;
&lt;h2&gt;Exceptionless 4.0.2 Release Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Both &lt;a href=&quot;https://github.com/caesay&quot;&gt;@caesay&lt;/a&gt; and &lt;a href=&quot;https://github.com/edwardmeng&quot;&gt;@edwardmeng&lt;/a&gt; submitted pull requests and helped us solve an issue with sending emails (issue &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/290&quot;&gt;#290&lt;/a&gt;). &lt;a href=&quot;https://github.com/jstedfast/MailKit&quot;&gt;Mailkit&lt;/a&gt;, a “cross-platform mail client library,” has now been integrated, adding “fully featured and RFC-compliant SMTP, POP3, and IMAP client implementations” into Exceptionless.
&lt;ul&gt;
&lt;li&gt;There were also a few issues with email when hosting in different environments, such as Azure Functions. In this case, all email settings must be stored in settings and not web.config. So, we moved the MailKit implementation to the insulation project and cleaned up the main mailer class, among a few other tweaks, to further improve email sending in the app. Thanks again caesay and edwardmeng!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;If you are self hosting&lt;/strong&gt;, please update the email settings in &lt;code&gt;appSettings&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Support for Azure Storage Queus has been added to the app.&lt;/li&gt;
&lt;li&gt;A bug that could cause an exception and make the stack work queue be abandoned when a stack of events was deleted has been fixed.&lt;/li&gt;
&lt;li&gt;The GeoIP database was being downloaded each time the app was restarted. That has also been fixed.&lt;/li&gt;
&lt;li&gt;Incorrect emails were being generated in some self hosted and dev environments because the BASE_URL didn’t contain the proper hashbang (#!). Fixed that issue in this release, as well.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless/compare/v4.0.1...v4.0.2&quot;&gt;View the full changelog.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Upgrading to Exceptionless 4.0.2&lt;/h3&gt;
&lt;p&gt;You should only worry about upgrading if you are a self hoster. If this is the case, please see the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Self-Hosting&quot;&gt;Exceptionless self hosting documentation&lt;/a&gt;. &lt;strong&gt;Note that changes to the Elasticsearch configuration were made in this release&lt;/strong&gt;, so make sure to review the documentation for more information.&lt;/p&gt;
&lt;h2&gt;Exceptionless.NET 4.0.3 Release Notes&lt;/h2&gt;
&lt;h3&gt;New Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;log4net .NET Core support has been added.&lt;/li&gt;
&lt;li&gt;404 reporting support in ASP.NET Core has been added.&lt;/li&gt;
&lt;li&gt;You can now set the min log level in configuration by calling &lt;code&gt;SetDefaultMinLogLevel&lt;/code&gt;, allowing you to set a temporary min log level that is used until the server settings are retrieved.&lt;/li&gt;
&lt;li&gt;Client IP support for X-Forwarded-For has been added (thanks &lt;a href=&quot;https://github.com/barankaynak&quot;&gt;@barankaynak&lt;/a&gt;!), which enables us to properly identify individual users and also helps when using proxy servers.&lt;/li&gt;
&lt;li&gt;You can now more easily capture the HttpActionContext by adding &lt;code&gt;SetHttpActionContext&lt;/code&gt; extention methods to web clients, allowing request and user info to be captured by default when manually submitting events.&lt;/li&gt;
&lt;li&gt;We added SetException overload so you can now submit any event type with an exception object. So, for instance, you can now submit a log message through with an exception object and the exception tab will show.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bug Fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed an issue where the ASP.NET Core 1.1 runtime was sometimes preventing clients from reporting any data.&lt;/li&gt;
&lt;li&gt;Fixed an issue where exceptions that converted to 404’s were not running the event exclusion logic.&lt;/li&gt;
&lt;li&gt;Fixed an issue where the duplicate checker plugin could DOS itself if you had client logging enabled (disabled by default – only meant for diagnostic logging).&lt;/li&gt;
&lt;li&gt;Fixed an issue where the nlog logger wasn’t setting event type.&lt;/li&gt;
&lt;li&gt;Fixed an issue with package configuration of signed web packages.&lt;/li&gt;
&lt;li&gt;Fixed an issue where adding our trace listener could blow up due to other invalid configured trace listeners.&lt;/li&gt;
&lt;li&gt;Upgraded to the latest version of BenchMarkDotNet and ensure benchmarks run (Contrib &lt;a href=&quot;https://github.com/adamsitnik&quot;&gt;@adamsitnik&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Upgrading&lt;/h3&gt;
&lt;p&gt;Just update your NuGet packages. For more info, check out the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/wiki/Upgrading&quot;&gt;upgrade guide&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/compare/v4.0.2...v4.0.3&quot;&gt;View the full changelog.&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless.UI 2.6.2 Release Notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Previously, long, single-line content could cause the user interface to go crazy while updating event lists. This has been fixed (thanks @caesay!).&lt;/li&gt;
&lt;li&gt;Also, tags now wrap to the next line, instead of overflowing the content area. @caesay strikes again!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/compare/v2.6.1...v2.6.2&quot;&gt;View the full changelog.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Feedback Requested&lt;/h2&gt;
&lt;p&gt;We &lt;strong&gt;want&lt;/strong&gt; to know what you think about Exceptionless – what you think we should add, fix, streamline, improve, etc. Please let us know!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/issues/new&quot;&gt;User Interface Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/issues/new&quot;&gt;.NET Client Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/issues/new&quot;&gt;JavaScript Client Feedback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/exceptionless/exceptionless/issues/new&quot;&gt;General Exceptionless Feedback&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-04-25-weekly-update-review-new-releases/"/>
    <updated>2017-04-25T15:02:06-05:00</updated>
    <id>https://exceptionless.com/2017-04-25-weekly-update-review-new-releases/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;Last week we &lt;a href=&quot;https://exceptionless.com/exceptionless-net-client-and-core-releases-bugs-usability-performance-self-hosting/&quot;&gt;announced release notes&lt;/a&gt; for Exceptionless 4.0.2, Exceptionless.NET 4.0.3, and Exceptionless.UI 2.6.2. In our weekly update this week, we review some of those changes/updates, Foundatio changes, and more. Check it out!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Live Stream Update 4/13/17&lt;/h2&gt;
&lt;h3&gt;Exceptionless Core Updates&lt;/h3&gt;
&lt;p&gt;In Exceptionless Core, we added support for &lt;a href=&quot;https://github.com/jstedfast/MailKit&quot;&gt;MailKit&lt;/a&gt;, pipeline action and plugin level metrics, and the ability to dynamically shut down functionality via the configuration. We also made pipeline performance improvements. There are more performance improvements to make,&lt;/p&gt;
&lt;h3&gt;Foundatio Updates&lt;/h3&gt;
&lt;p&gt;For &lt;a href=&quot;https://github.com/exceptionless/Foundatio&quot;&gt;Foundatio&lt;/a&gt;, we updated the Azure storage copy implementation to copy server side, fixed an issue where FolderFileStorage wasn’t behaving properly when renaming files that exist, and fixed a Redis cache client issue where deleting cache items by wild card was erroring out if there were no matching keys.&lt;br&gt;
– Updated the azure storage copy implementation to copy server side.&lt;/p&gt;
&lt;h3&gt;Changes to Exceptionless.NET&lt;/h3&gt;
&lt;p&gt;For the .NET client, we merged in changes to csproj and released version 4.0.3. Make sure to &lt;a href=&quot;https://exceptionless.com/exceptionless-net-client-and-core-releases-bugs-usability-performance-self-hosting/&quot;&gt;check out the release notes&lt;/a&gt; and upgrade!&lt;/p&gt;
&lt;h3&gt;Updates to Exceptionless.UI&lt;/h3&gt;
&lt;p&gt;In Exceptionless.UI, lists of tags now wrap to the next line, and we fixed an issue where long user names would cause the UI to go crazy.&lt;/p&gt;
&lt;h3&gt;Updates to Foundatio.Repositories&lt;/h3&gt;
&lt;p&gt;Here, we fixed a caching issue where you couldn’t set the key without enabling cache, and we simplified index creation and stopped using a lock.&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/rwl4FfyNCtc?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-05-02-exceptionless-weekly-update-4172017/"/>
    <updated>2017-05-02T08:28:28-05:00</updated>
    <id>https://exceptionless.com/2017-05-02-exceptionless-weekly-update-4172017/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;Nothing too crazy going on in this week’s update. A few tweaks to Exceptionless, Exceptionless.NET, and Exceptionless.JavaScript. Check out the details below, and don’t forget to let us know how we’re doing!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Weekly Code &amp;amp; Development Update – 4/17/2017&lt;/h2&gt;
&lt;h3&gt;Exceptionless Core Updates&lt;/h3&gt;
&lt;p&gt;This week we released the Exceptionless 4.0.2 minor release with a few fixes and tweaks. Check out the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/releases/tag/v4.0.2&quot;&gt;Exceptionless 4.0.2 release details&lt;/a&gt; over on GitHub. Self hosters are the only ones that will need to worry about upgrading.&lt;/p&gt;
&lt;p&gt;We also made some good strides in reducing the amount of IO work the event post queues have to do. Woohoo!&lt;/p&gt;
&lt;p&gt;Lastly, for Exceptionless core, we merged in MailKit and continued improving email notifications.&lt;/p&gt;
&lt;h2&gt;Exceptionless.NET Client Update&lt;/h2&gt;
&lt;p&gt;The only really notable thing we did for the .NET client is fix the ProcessQueue method, making sure it blocks until the queue has been processed.&lt;/p&gt;
&lt;h2&gt;Exceptionless.JavaScript Client Update&lt;/h2&gt;
&lt;p&gt;For our JavaScript client, we want to work on supporting universal apps, but first we have to upgrade to the latest version of TypeScript, so we did some work this week toward that.&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/NH1sDXUnsBI?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-05-10-weekly-update-42417-blake-speaking-north-dallas-net/"/>
    <updated>2017-05-10T15:41:06-05:00</updated>
    <id>https://exceptionless.com/2017-05-10-weekly-update-42417-blake-speaking-north-dallas-net/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;In this week’d update, Blake does a little traveling and speaking, and both Exceptionless and Foundatio.Repositories get an update!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Blake Speaks @ North Dallas .NET&lt;/h2&gt;
&lt;p&gt;On May 3, Blake spoke at the &lt;a href=&quot;http://northdallas.net/&quot;&gt;North Dallas .NET User Group&lt;/a&gt; meetup in Plano. The topic was Exception Driven Development, and of course he killed it! Naturally, the Exceptionless love was shared to all.&lt;/p&gt;
&lt;h2&gt;Exceptionless &amp;amp; Foundatio.Repositories Updates&lt;/h2&gt;
&lt;p&gt;For Exceptionless, we worked on upgrading the email templates to use Zurb for emails and handlebars. We also fixed an issue where you could only log in 15 times in a 15 minute time period.&lt;/p&gt;
&lt;p&gt;For Foundatio.Repositories, &lt;a href=&quot;https://github.com/exceptionless/Foundatio.Repositories/commit/86c1539a9fdb12880db9a4fba1dccdc27055ccea&quot;&gt;query if (FieldEqualsIf) support&lt;/a&gt; has been added.&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/NnSylKATHo4&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-05-16-email-improvements-foundatio-updates-512017/"/>
    <updated>2017-05-16T11:25:50-05:00</updated>
    <id>https://exceptionless.com/2017-05-16-email-improvements-foundatio-updates-512017/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;In the 5/1/17 weekly update, Blake talks email notification improvements, bug fixes, and Foundatio.Repositories and Foundatio.Parsers updates. Check out the video above or read the details below.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Updates to Exceptionless&lt;/h2&gt;
&lt;p&gt;In the past few weeks, we have made massive improvements to the daily summary emails, and added support for json-ld. You can keep up with continued email improvements over on &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/177&quot;&gt;issue 177 on GitHub&lt;/a&gt;. Let us know what you think there!&lt;/p&gt;
&lt;p&gt;We also fixed a bug with the Redis cache client improperly setting batch cached keys.&lt;/p&gt;
&lt;h2&gt;Foundatio.Repositories &amp;amp; Foundatio.Parsers Updates&lt;/h2&gt;
&lt;p&gt;We updated Foundatio.Repositories so that it no longer ignores the version property.&lt;/p&gt;
&lt;p&gt;For Foundatio.Parsers, we merged code and server mapping properties.&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/-Uyf2a9oiGw?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-05-16-project-level-usage-ui-foundatio/"/>
    <updated>2017-05-16T11:55:47-05:00</updated>
    <id>https://exceptionless.com/2017-05-16-project-level-usage-ui-foundatio/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;We’ve snuck in lots of updates for this past week! New features have been added, such as collecting project-level usage statistics, the ability to add notes to API keys, and much more. Oh, and we’re no longer throttling free plans! That’s for Exceptionless core, but we’ve also made updates  to the Exceptionless UI and Foundatio core, Foundatio.Repositories, and Foundatio.Parsers. Check everything out, below.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We added the ability to collect project-level usage statistics. This allows us to view usage, show total blocked in emails, and more. It would also allow us to tweak rate limiting on a per-project basis.&lt;/li&gt;
&lt;li&gt;You can now add notes to API keys in the app.&lt;/li&gt;
&lt;li&gt;We also stopped throttling free plans.&lt;/li&gt;
&lt;li&gt;And, finally, we introduced variou mail templates into the mix.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exceptionless.UI Updates&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;On the manage project page, we are now showing project usage statistics.&lt;/li&gt;
&lt;li&gt;On the sessions dashboard, we have added the ability to see active users.&lt;/li&gt;
&lt;li&gt;On the stack and session dashboards, we are now always showing hidden or fixed events.&lt;/li&gt;
&lt;li&gt;When you select a usage time range, you will be redirect to the organization or project dashboard.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Updates to Foundatio, Foundatio.Repositories, and Foundatio.Parsers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In Foundatio core, we merged in the CloudWatch Metric clients and SQS changes. We also moved each client into its own repo.&lt;/li&gt;
&lt;li&gt;For Foundatio.Repositories and Foundatio.Parsers, we created the final 1.x release and merged in the Elasticsearch 5 branches.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/Ca4EOBO1EGI?list=PLGHP7IVwFs_81fZTMgF7Dm5e0Ax4YvW_V&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-05-30-email-notification-improvements-walkthrough-and-details/"/>
    <updated>2017-05-30T10:48:11-05:00</updated>
    <id>https://exceptionless.com/2017-05-30-email-notification-improvements-walkthrough-and-details/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15587&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;https://exceptionless.com/assets/email-improvements-header-1024x538.jpg&quot; alt=&quot;exceptionless email notifications&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15587&quot; srcset=&quot;https://exceptionless.com/assets/email-improvements-header-1024x538.jpg 1024w, https://exceptionless.com/assets/email-improvements-header-300x158.jpg 300w, https://exceptionless.com/assets/email-improvements-header-768x403.jpg 768w, https://exceptionless.com/assets/email-improvements-header.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;
&lt;p&gt;Recently, we made several improvements to our email notifications, adding additional details, improving rendering, and more. Blake has mentioned it in a few of his &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;weekly update videos&lt;/a&gt;, but today we wanted to walk you through it and add a few more details, with examples. Check it out!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless Email Notification Implementation&lt;/h2&gt;
&lt;p&gt;We decided to use &lt;a href=&quot;https://github.com/zurb/foundation-emails&quot;&gt;Zurb’s Foundation for Emails&lt;/a&gt; to help us create emails that look great on all email clients. The reason we went with Zurb is because it has clean markup that translates to good old (ugly) HTML that just works. It also works great with &lt;a href=&quot;https://github.com/rexm/Handlebars.Net&quot;&gt;Handlebars.Net&lt;/a&gt; which we use to render the email content.&lt;/p&gt;
&lt;p&gt;An example of one of our event notification emails can be found &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/src/Exceptionless.EmailTemplates/src/pages/event-notice.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, we run a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/tree/master/src/Exceptionless.EmailTemplates#build-commands&quot;&gt;Node.js build task&lt;/a&gt; to transform the templates into some pretty &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/src/Exceptionless.Core/Mail/Templates/event-notice.html&quot;&gt;crazy html markup&lt;/a&gt; that works everywhere. The markup at that link contains the Handlebars.Net syntax.&lt;/p&gt;
&lt;p&gt;These templates are stored as embedded resources so we can use them from any environment and render them out with ease! Here is a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/src/Exceptionless.Core/Mail/Mailer.cs#L260-L277&quot;&gt;code example&lt;/a&gt; of how we perform that task.&lt;/p&gt;
&lt;p&gt;We added &lt;a href=&quot;https://json-ld.org/&quot;&gt;JSON-LD&lt;/a&gt; support, to the emails to give us rich contextual actions, by starting with this &lt;a href=&quot;https://developers.google.com/gmail/markup/getting-started&quot;&gt;Google Developer tutorial&lt;/a&gt; and ended up with &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/blob/master/src/Exceptionless.EmailTemplates/src/pages/event-notice.html#L75-L94&quot;&gt;the below implementation&lt;/a&gt;. &lt;em&gt;It’s worth noting that we had to go through their verification process for the actions to be enabled.&lt;/em&gt;&lt;/p&gt;
&lt;pre class=&quot;brush: jscript; title: ; notranslate&quot; title=&quot;&quot;&gt;&amp;lt;script type=&quot;application/ld+json&quot;&amp;gt;
{
 &quot;@context&quot;: &quot;http://schema.org&quot;,
 &quot;@type&quot;: &quot;EmailMessage&quot;,
 &quot;description&quot;: &quot;\&quot;,
 &quot;potentialAction&quot;: {
 &quot;@type&quot;: &quot;ViewAction&quot;,
 &quot;target&quot;: &quot;\/event/\&quot;,
 &quot;url&quot;: &quot;\/event/\&quot;,
 &quot;name&quot;: &quot;View Event Details&quot;
 },
 &quot;publisher&quot;: {
 &quot;@type&quot;: &quot;Organization&quot;,
 &quot;name&quot;: &quot;Exceptionless&quot;,
 &quot;url&quot;: &quot;https://exceptionless.com&quot;,
 &quot;url/googlePlus&quot;: &quot;https://plus.google.com/111513069275546127753&quot;,
 &quot;logo&quot;: &quot;https://be.exceptionless.io/img/exceptionless-48.png&quot;
 }
}
&amp;lt;/script&amp;gt;
&lt;/pre&gt;
&lt;p&gt;We tested the emails in Outlook for Windows and Mac, Paper Cut, Gmail on Safari, and Apple Mail. Then, we used &lt;a href=&quot;https://litmus.com/&quot;&gt;Litmus&lt;/a&gt; to test a wide range of clients before publishing and pushing everything live.&lt;/p&gt;
&lt;h2&gt;Questions? Comments?&lt;/h2&gt;
&lt;p&gt;We hope our buildout here can help other developers, and we would love to hear your feedback, questions, or comments either here on the blog or over on &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues&quot;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Code on.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-06-05-exceptionless-slack-integration/"/>
    <updated>2017-06-05T11:01:35-05:00</updated>
    <id>https://exceptionless.com/2017-06-05-exceptionless-slack-integration/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;As you guys know, we’ve been working on &lt;a href=&quot;https://exceptionless.com/email-notification-improvements-walkthrough-and-details/&quot;&gt;notification improvements&lt;/a&gt; lately. This latest video update by Blake is no different and involves &lt;a href=&quot;https://slack.com/&quot;&gt;Slack&lt;/a&gt; integration!&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;If you’re not familiar with Slack, definitely check it out. It’s a great app for communicating with your team, and much more. For Exceptionless, it’s been something we’ve wanted to integrate closely with for a while now, because email can be very tedious and overwhelming. With Slack integration, you can set up a specific channel for your Exceptionless notifications to go to, and have an organized eye on your events.&lt;/p&gt;
&lt;p&gt;Watch the video above for an explanation of the integration, and see below on how to set it up for yourself.&lt;/p&gt;
&lt;h2&gt;Set up Slack Notifications for Exceptionless&lt;/h2&gt;
&lt;p&gt;First, go into your project’s settings in the Exceptionless app and click on the Integrations tab.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/assets/exceptionless-slack-setup.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-15626 size-full&quot; src=&quot;https://exceptionless.com/assets/exceptionless-slack-setup.png&quot; alt=&quot;&quot; width=&quot;811&quot; height=&quot;595&quot; data-id=&quot;15626&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-slack-setup.png 811w, https://exceptionless.com/assets/exceptionless-slack-setup-300x220.png 300w, https://exceptionless.com/assets/exceptionless-slack-setup-768x563.png 768w&quot; sizes=&quot;(max-width: 811px) 100vw, 811px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, click on “Add Slack Notifications” and log in to your slack team.&lt;/p&gt;
&lt;p&gt;Once logged in, you will need to select the channel you want Exceptionless Notifications to post to and click Authorize.&lt;/p&gt;
&lt;p&gt;Once authorized, you can then configure the different notification settings by going back to the Exceptionless app and into the project’s integrations tab again.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/assets/exceptionless-slack-settings.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-15628&quot; src=&quot;https://exceptionless.com/assets/exceptionless-slack-settings.png&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;399&quot; data-id=&quot;15628&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-slack-settings.png 620w, https://exceptionless.com/assets/exceptionless-slack-settings-300x193.png 300w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once integrated and configured, notifications will look something like the below screenshot, with the message, type of event, stack trace, links to actions, etc.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/assets/exceptionless-slack-example.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-15629&quot; src=&quot;https://exceptionless.com/assets/exceptionless-slack-example.jpg&quot; alt=&quot;Exceptionless Slack notification&quot; width=&quot;533&quot; height=&quot;920&quot; data-id=&quot;15629&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-slack-example.jpg 533w, https://exceptionless.com/assets/exceptionless-slack-example-174x300.jpg 174w&quot; sizes=&quot;(max-width: 533px) 100vw, 533px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’re excited to keep improving notifications, and would love for you guys to test this out for us.&lt;/p&gt;
&lt;p&gt;Integrations with other chat &amp;amp; productivity tools like Hipchat and Microsoft Teams are on our list, as well, so if you use these please ping us and let us know so we can gauge interest!&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/U9GbYqWK1ik&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-06-20-slack-integration-updates-bug-fixes-weekly-update-5222017/"/>
    <updated>2017-06-20T16:59:48-05:00</updated>
    <id>https://exceptionless.com/2017-06-20-slack-integration-updates-bug-fixes-weekly-update-5222017/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom:20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;This week we have a quick update, where we focus on bug fixes and improvements to our &lt;a href=&quot;https://exceptionless.com/exceptionless-slack-integration/&quot;&gt;recent Slack Integration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Check out the video, above, and please let us know if you have any questions, comments, or concerns!&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/WtHj9e4M9zU&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-06-26-improvements-exceptionless-slack-integration/"/>
    <updated>2017-06-26T16:11:31-05:00</updated>
    <id>https://exceptionless.com/2017-06-26-improvements-exceptionless-slack-integration/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;In this week’s video, Blake covers a quick update on the Exceptionless Slack integration, along with a minor update to Foundatio.&lt;/p&gt;
&lt;p&gt;Take a look!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Slack Integration Update&lt;/h2&gt;
&lt;p&gt;We have been tweaking the recent Slack integration over the past month or so, and this week we noticed that action URLs being created incorrectly and failures weren’t being handle correctly with rate limiting. So, those two issues have been tweaked and should be working much better now.&lt;/p&gt;
&lt;h3&gt;In Foundatio News&lt;/h3&gt;
&lt;p&gt;A big shout out to &lt;a href=&quot;https://github.com/pwelter34&quot;&gt;@pwelter34&lt;/a&gt; for submitting a pull request that added support for &lt;a href=&quot;https://serilog.net/&quot;&gt;Serilog&lt;/a&gt; to &lt;a href=&quot;https://github.com/FoundatioFx&quot;&gt;Foundatio&lt;/a&gt; – Paul!&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/k4CMOk5lpVw&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-06-28-weekly-update-codesmith-generator-serilog-sink-foundatio-redis-updates/"/>
    <updated>2017-06-28T16:29:30-05:00</updated>
    <id>https://exceptionless.com/2017-06-28-weekly-update-codesmith-generator-serilog-sink-foundatio-redis-updates/</id>
    <content type="html">&lt;div class=&quot;videoWrapper&quot; style=&quot;margin-bottom: 20px;&quot;&gt;
&lt;/div&gt;
&lt;p&gt;Blake’s been busy lately, including some work on one of our other projects, &lt;a href=&quot;http://www.codesmithtools.com/product/generator&quot;&gt;CodeSmith Generator&lt;/a&gt;, to update Exceptionless to the latest version. Naturally, this got him thinking about other potential improvements while we were doing work on Serilog Sink for Exceptionless and Foundatio.Redis, as well.&lt;/p&gt;
&lt;p&gt;Watch the video to hear the full story!&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;CodeSmith Generator Gets Latest Exceptionless Update&lt;/h2&gt;
&lt;p&gt;While updating our WPF application, &lt;a href=&quot;http://www.codesmithtools.com/product/generator&quot;&gt;CodeSmith Generator&lt;/a&gt;, to the latest version of Exceptionless, Blake brainstorms several improvements that could be made to help take advantage of plugins, isolate Exceptionless from other plugins, etc.&lt;/p&gt;
&lt;h2&gt;Serilog Sink&lt;/h2&gt;
&lt;p&gt;There was an issue that was breaking the ability to update to the latest version of Exceptionless. This has now been fixed.&lt;/p&gt;
&lt;h2&gt;Foundatio.Redis Update&lt;/h2&gt;
&lt;p&gt;Deserialization wasn’t working properly with binary serializers, but the issue has been resolved.&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://youtu.be/bqhdaFdgr4M&quot;&gt;WATCH NOW&lt;/a&gt;
&lt;/h2&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;
  &lt;a href=&quot;https://exceptionless.com/category/weekly-updates/&quot;&gt;Watch more Live Code Demos&lt;/a&gt;
&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-08-15-javascript-client-v1-5-release-details-notes/"/>
    <updated>2017-08-15T16:45:47-05:00</updated>
    <id>https://exceptionless.com/2017-08-15-javascript-client-v1-5-release-details-notes/</id>
    <content type="html">&lt;p&gt;##&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15828&quot; src=&quot;https://exceptionless.com/assets/js-client-1.5-release-1024x538.jpg&quot; alt=&quot;exceptionless.javascript 1.5&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15828&quot; srcset=&quot;https://exceptionless.com/assets/js-client-1.5-release-1024x538.jpg 1024w, https://exceptionless.com/assets/js-client-1.5-release-300x158.jpg 300w, https://exceptionless.com/assets/js-client-1.5-release-768x403.jpg 768w, https://exceptionless.com/assets/js-client-1.5-release.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;&lt;br&gt;
Exceptionless.JavaScript v1.5 Release Notes&lt;/p&gt;
&lt;h3&gt;Unversal App Support&lt;/h3&gt;
&lt;p&gt;The major update for 1.5 is that we have added support for universal apps (React Universal).&lt;/p&gt;
&lt;p&gt;To view the exact changes required to get everything working and set up, &lt;a href=&quot;https://github.com/niemyjski/react-redux-universal-hot-example/commit/7f7c01ca1b328f3389c3919a53376bccbbfe1f08&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Other 1.5 Updates&lt;/h3&gt;
&lt;!--more--&gt;
&lt;ul&gt;
&lt;li&gt;Added support for exceptions that are passed in and are just strings.&lt;/li&gt;
&lt;li&gt;Updated TraceKit to the latest version, which adds support for parsing PhantomJS errors and greatly improves native stack traces.&lt;/li&gt;
&lt;li&gt;Thanks &lt;a href=&quot;https://github.com/caesay&quot;&gt;@caesay&lt;/a&gt; for updating TypeScript to the latest version, as well!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Bug Fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fixed a bug where exceptionless would fail to load when used with webpack.&lt;/li&gt;
&lt;li&gt;Fixed a bug where browser module info was not being populated.&lt;/li&gt;
&lt;li&gt;Fixed a bug where ILog.trace was piped to the wrong console function which would error under IE (thanks &lt;a href=&quot;https://github.com/srijken&quot;&gt;@srijken&lt;/a&gt;{.user-mention}!)&lt;/li&gt;
&lt;li&gt;Fixed a few bugs with angular integration&lt;/li&gt;
&lt;li&gt;Fixed a bug with submitLog not respecting log message and log level&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a full change log, select an applicable release on the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/releases&quot;&gt;Exceptionless.JavaScript GitHub Release page&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-08-30-universal-javascript-support-added-exceptionless-javascript/"/>
    <updated>2017-08-30T17:14:46-05:00</updated>
    <id>https://exceptionless.com/2017-08-30-universal-javascript-support-added-exceptionless-javascript/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15833&quot; src=&quot;https://exceptionless.com/assets/universal-javascript-1024x538.jpg&quot; alt=&quot;Exceptionless Universal JavaScript&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15833&quot; srcset=&quot;https://exceptionless.com/assets/universal-javascript-1024x538.jpg 1024w, https://exceptionless.com/assets/universal-javascript-300x158.jpg 300w, https://exceptionless.com/assets/universal-javascript-768x403.jpg 768w, https://exceptionless.com/assets/universal-javascript.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;
&lt;p&gt;Recently, we released &lt;a href=&quot;https://exceptionless.com/javascript-client-v1-5-release-details-notes/&quot;&gt;Exceptionless.JavaScript 1.5&lt;/a&gt;. The major update for the release was the addition of universal JavaScript (React Universal) support! More details below. The key is that we can now run in server side node apps, or in the browser, with a single script and do the right thing!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TL;DR: Isomorphism is the functional aspect of seamlessly switching between client- and server-side rendering without losing state. Universal is a term used to emphasize the fact that a particular piece of JavaScript code is able to run in multiple environments. – &lt;a href=&quot;https://medium.com/@ghengeveld/isomorphism-vs-universal-javascript-4b47fb481beb&quot;&gt;Gert Hengeveld, Isomorphism vs Universal JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!--more--&gt;
&lt;p&gt;We have gotten lots of requests for Universal JavaScript support. What this means is that you can use a library in the browser or server without any changes from the end user. This is great because you can just consume the library and just know it will work using the same API service no matter where you want to use it. The main con of using a universal client is the increased payload size as you know have to send node support to the browser as well.&lt;/p&gt;
&lt;p&gt;We implemented universal JavaScript support by bundling both the browser and node scripts together. But it wasn’t as easy as concatenating the files together. We had to refactor the node and browser entry points so that they would automatically run, while ensuring that the initialization of environment specific code (storage, network, etc.) only ran when specific environment conditions were met. This is pretty easy to do with an &lt;a href=&quot;https://en.wikipedia.org/wiki/Immediately-invoked_function_expression&quot;&gt;IIFE function&lt;/a&gt; and a quick if check as shown &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/v1.5.4/src/exceptionless.ts#L14-L38&quot;&gt;here&lt;/a&gt;. Next, we needed to provide a &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/blob/v1.5.4/src/exceptionless.universal.ts&quot;&gt;new entry point that imported both of the entry points&lt;/a&gt; which ensures that browser and node entry points run.&lt;/p&gt;
&lt;p&gt;This update adds support for universal apps, and a React Universal sample that shows the exact changes that were required to get everything working and setup can be found &lt;a href=&quot;https://github.com/niemyjski/react-redux-universal-hot-example/commit/7f7c01ca1b328f3389c3919a53376bccbbfe1f08&quot;&gt;here&lt;/a&gt;. The pull request for universal support can be found &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/pull/75&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To target it&lt;/strong&gt;, you just need to reference the universal script (exceptionless.universal.js), this will happen automatically if you install via browserfiy or webpack.&lt;/p&gt;
&lt;h2&gt;Questions? Feedback?&lt;/h2&gt;
&lt;p&gt;Let us know what you think about the new Universal JavaScript support over on &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.JavaScript/issues&quot;&gt;GitHub&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-10-06-slack-integration-update-recap/"/>
    <updated>2017-10-06T14:00:13-05:00</updated>
    <id>https://exceptionless.com/2017-10-06-slack-integration-update-recap/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; style=&quot;margin-bottom:20px;&quot; class=&quot;aligncenter size-large wp-image-15919&quot; src=&quot;https://exceptionless.com/assets/slack-integration-ft-img-1024x538.jpg&quot; alt=&quot;Exceptionless Slack Integration&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15919&quot; srcset=&quot;https://exceptionless.com/assets/slack-integration-ft-img-1024x538.jpg 1024w, https://exceptionless.com/assets/slack-integration-ft-img-300x158.jpg 300w, https://exceptionless.com/assets/slack-integration-ft-img-768x403.jpg 768w, https://exceptionless.com/assets/slack-integration-ft-img.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;
&lt;p&gt;Since we first introduced Slack integration with the goal of further improving notifications in Exceptionless, we’ve come back around with updates, a few bug fixes, and wanted to give everyone a quick all-in-one overview of the feature!&lt;/p&gt;
&lt;p&gt;Thanks to everyone that has provided feedback, bug reports, and suggestions. If &lt;em&gt;you&lt;/em&gt; have any, don’t hesitate to &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues&quot;&gt;submit an issue over on GitHub&lt;/a&gt;. We’re always looking to improve and would love your input!&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Along the way, we have run into &lt;strong&gt;incoming webhook issues&lt;/strong&gt;, some &lt;strong&gt;usability/setup workflow updates&lt;/strong&gt; that needed to be made to make the process more usable, and, among other things, &lt;strong&gt;incorrectly created action URLs&lt;/strong&gt; that weren’t being handled correctly with rate limiting.&lt;/p&gt;
&lt;p&gt;We’ll cover &lt;strong&gt;setting up Slack integration with Exceptionless&lt;/strong&gt; below, but you can also review the &lt;a href=&quot;https://exceptionless.com/exceptionless-slack-integration/&quot;&gt;original post&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/U9GbYqWK1ik&quot;&gt;weekly update video&lt;/a&gt;, the &lt;a href=&quot;https://exceptionless.com/slack-integration-updates-bug-fixes-weekly-update-5222017/&quot;&gt;first bug fix update&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/WtHj9e4M9zU&quot;&gt;video&lt;/a&gt;, and the most recent &lt;a href=&quot;https://exceptionless.com/improvements-exceptionless-slack-integration/&quot;&gt;Slack integration improvement update&lt;/a&gt; and &lt;a href=&quot;https://youtu.be/k4CMOk5lpVw&quot;&gt;video&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Setting up Slack Notifications for Exceptionless&lt;/h2&gt;
&lt;p&gt;First, go into your project’s settings in the Exceptionless app and click on the Integrations tab.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/assets/exceptionless-slack-setup.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter wp-image-15626 size-full&quot; src=&quot;https://exceptionless.com/assets/exceptionless-slack-setup.png&quot; alt=&quot;&quot; width=&quot;811&quot; height=&quot;595&quot; data-id=&quot;15626&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-slack-setup.png 811w, https://exceptionless.com/assets/exceptionless-slack-setup-300x220.png 300w, https://exceptionless.com/assets/exceptionless-slack-setup-768x563.png 768w&quot; sizes=&quot;(max-width: 811px) 100vw, 811px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then, click on “Add Slack Notifications” and log in to your slack team.&lt;/p&gt;
&lt;p&gt;Once logged in, you will need to select the channel you want Exceptionless Notifications to post to and click Authorize.&lt;/p&gt;
&lt;p&gt;Once authorized, you can then configure the different notification settings by going back to the Exceptionless app and into the project’s integrations tab again.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/assets/exceptionless-slack-settings.png&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-15628&quot; src=&quot;https://exceptionless.com/assets/exceptionless-slack-settings.png&quot; alt=&quot;&quot; width=&quot;620&quot; height=&quot;399&quot; data-id=&quot;15628&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-slack-settings.png 620w, https://exceptionless.com/assets/exceptionless-slack-settings-300x193.png 300w&quot; sizes=&quot;(max-width: 620px) 100vw, 620px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once integrated and configured, notifications will look something like the below screenshot, with the message, type of event, stack trace, links to actions, etc.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://exceptionless.com/assets/exceptionless-slack-example.jpg&quot;&gt;&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-15629&quot; src=&quot;https://exceptionless.com/assets/exceptionless-slack-example.jpg&quot; alt=&quot;Exceptionless Slack notification&quot; width=&quot;533&quot; height=&quot;920&quot; data-id=&quot;15629&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-slack-example.jpg 533w, https://exceptionless.com/assets/exceptionless-slack-example-174x300.jpg 174w&quot; sizes=&quot;(max-width: 533px) 100vw, 533px&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We’re excited to keep improving notifications, and would love for you guys to continue testing and providing feedback! What else would you like to see happening with notifications? What are we doing right, and wrong?&lt;/p&gt;
&lt;p&gt;Integrations with other chat &amp;amp; productivity tools like Hipchat and Microsoft Teams are on our list, as well, so if you use these please ping us and let us know so we can gauge interest!&lt;/p&gt;
&lt;p&gt;Until next time, code on my friends.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2017-11-07-exceptionless-net-4-1-release-net-standard-2-0-microsoft-extensions-logging-support-and-more/"/>
    <updated>2017-11-07T15:51:12-06:00</updated>
    <id>https://exceptionless.com/2017-11-07-exceptionless-net-4-1-release-net-standard-2-0-microsoft-extensions-logging-support-and-more/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-large wp-image-15970&quot; style=&quot;margin-bottom: 20px;&quot; src=&quot;https://exceptionless.com/assets/exceptionless-net-4-1-release-1024x538.jpg&quot; alt=&quot;Exceptionless.NET 4.1 Release&quot; width=&quot;940&quot; height=&quot;494&quot; data-id=&quot;15970&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-net-4-1-release-1024x538.jpg 1024w, https://exceptionless.com/assets/exceptionless-net-4-1-release-300x158.jpg 300w, https://exceptionless.com/assets/exceptionless-net-4-1-release-768x403.jpg 768w, https://exceptionless.com/assets/exceptionless-net-4-1-release.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net&quot;&gt;Exceptionless.NET&lt;/a&gt; 4.1 is here and we wanted to make a quick blog post highlighting the new features, bug fixes, and of course upgrading.&lt;/p&gt;
&lt;p&gt;In this release, we focused primarily on adding .NET Standard 2.0 support, along with ongoing performance enhancements and bug fixes.&lt;/p&gt;
&lt;p&gt;More details, below:&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless.NET 4.1 New Features&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;We’ve added .NET Standard 2.0 support, which allows you to easily integrate with UWP applications now.&lt;/li&gt;
&lt;li&gt;Microsoft.Extensions.Logging support has also been added via the Exceptionless.Extensions.Logging client. Thank you &lt;a href=&quot;https://github.com/moogle001&quot;&gt;@moogle001&lt;/a&gt; for contributing to this feature!&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a href=&quot;https://github.com/jamierushton&quot;&gt;@jamierushton&lt;/a&gt;, we now allow &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;default&lt;/code&gt; values to be serialized, which translates to greater insight into contextual data.&lt;/li&gt;
&lt;li&gt;We’re now using &lt;a href=&quot;https://github.com/GitTools/GitLink&quot;&gt;GitLink&lt;/a&gt; to debug packages more easily.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Version 4.1 Bug Fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GetFiles has been replaced with the EnumerateFiles method to improve performance in FolderObjectStorage. Thanks &lt;a href=&quot;https://github.com/edwardmeng&quot;&gt;@edwardmeng&lt;/a&gt; for that contribution!&lt;/li&gt;
&lt;li&gt;@edwardmeng also helped us improve diangnostic logging by including timestamps and log level. Thanks again!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upgrading to Exceptionless.NET 4.1&lt;/h2&gt;
&lt;p&gt;If you are using our hosted service, you do not need to upgrade anything on your end. If you are self hosting Exceptionless and upgrading from version 2 or 3, you should just have to update your NuGet packages. See our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/wiki/Upgrading&quot;&gt;upgrade guide&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/releases/tag/v4.1.0&quot;&gt;official release notes&lt;/a&gt; here, or view the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/compare/v4.0.4...v4.1.0&quot;&gt;full changelog&lt;/a&gt; if you are interested in a complete list of changes.&lt;/p&gt;
&lt;h2&gt;How are we doing?&lt;/h2&gt;
&lt;p&gt;As always, we want to know what you think! If you have questions, concerns, or any feedback, please &lt;a href=&quot;https://github.com/exceptionless/Exceptionless.Net/issues/new&quot;&gt;submit an issue over on the GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2018-01-31-asp-net-bug-tracking-software/"/>
    <updated>2018-01-31T22:05:38-06:00</updated>
    <id>https://exceptionless.com/2018-01-31-asp-net-bug-tracking-software/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; data-id=&quot;16101&quot; src=&quot;https://exceptionless.com/assets/asp-net-bug-tracking-software-platform-1024x538.jpg&quot; alt=&quot;asp.net bug tracking software platform&quot; width=&quot;940&quot; height=&quot;494&quot; class=&quot;aligncenter size-large wp-image-16101&quot; srcset=&quot;https://exceptionless.com/assets/asp-net-bug-tracking-software-platform-1024x538.jpg 1024w, https://exceptionless.com/assets/asp-net-bug-tracking-software-platform-300x158.jpg 300w, https://exceptionless.com/assets/asp-net-bug-tracking-software-platform-768x403.jpg 768w, https://exceptionless.com/assets/asp-net-bug-tracking-software-platform.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;
&lt;p&gt;Bug tracking. Two words that you’ll never be able to escape as a developer. Our goal as developers is to always create a high quality product with pristine code, but let’s face it, nobody’s perfect and accidents happen. Bugs are going to pop up no matter how hard we work or how much we plan ahead. They’re an inevitable part of the job and the more complex your project becomes, the more likely unexpected bugs are to start popping up.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;You can try and track these little annoyances manually, like some kind of an animal, or use a bug tracking software to significantly speed up the process and provide a log of what happened and where to prevent future iterations of the same issue.&lt;/p&gt;
&lt;h2&gt;WHAT IS BUG TRACKING?&lt;/h2&gt;
&lt;p&gt;At its core, bug tracking is when a developer tracks, logs, and resolves a bug or issue that caused their software to not perform as intended. This could be as simple as a missing semicolon or trailing slash or as complicated as a vulnerability in your back end.&lt;/p&gt;
&lt;p&gt;In the old days of yesteryear, there weren’t any (good) bug tracking software platforms so developer had to exhaustively QA test their code before publishing and even then, they couldn’t catch everything. Bugs sometimes went to production undetected and they relied on users to report issues so they could investigate them manually later. As you can imagine, this was an incredibly time consuming and tedious process that ate up far too much time and resources that could have been spent developing the next great feature to propel sales.&lt;/p&gt;
&lt;h3&gt;IMPORTANCE OF BUG TRACKING&lt;/h3&gt;
&lt;p&gt;At the risk of sounding pretentious, Kurt Vonnegut said that “Everyone wants to build and nobody wants to do maintenance.” Whether we like it or not, we can’t always build the next big feature or streamline the functionality of our platform. Sometimes we have to hunt down elusive bugs and do maintenance to keep our code clean and keep a solid foundation so we can keep building.&lt;/p&gt;
&lt;p&gt;Ignoring or intentionally leaving bugs to multiply in the code can damage your company’s reputation (and revenue) if one of these errors affects your customers’ ability to do their job or compromises their information. It will save everyone involved a ton of time, money, and headache if you simply implement a bug tracking software from the get go. Your code will stay clean and you’ll stop losing users, leads, and customers. It’s a win / win for everyone.&lt;/p&gt;
&lt;h2&gt;ASP.NET FRAMEWORK OVERVIEW&lt;/h2&gt;
&lt;p&gt;ASP.NET is a coding model used to build enterprise class applications with minimal coding. This not only cuts down on the amount of man hours necessary to complete your project, but also simplifies running and maintaining said application due to its (relative) simplicity. If you’re new to the ASP.NET platform, do not be surprised if it’s not the easiest thing to pick up, but once you do, you’ll understand why it’s one of the most popular development platforms out there. (There are a ton of &lt;a href=&quot;https://www.asp.net/learn&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;tutorials&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.microsoft.com/web/webmatrix/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;learning environments&lt;/a&gt; if you’re looking to learn the platform.)&lt;/p&gt;
&lt;h2&gt;ASP.NET BUG TRACKING SOFTWARE PLATFORM&lt;/h2&gt;
&lt;p&gt;Just because ASP.NET is a simplified coding platform doesn’t mean that you won’t have bugs. If anything, it can make them a bit tougher to find, but that’s where having an integrated bug tracking suite comes into play.&lt;/p&gt;
&lt;p&gt;Our bug tracking software suite helps development teams find, record, and categorize bugs and errors in real time for your ASP.NET websites, applications, and services. It organizes information in an intuitive and easy to digest dashboard to help your platform become exceptionless.&lt;/p&gt;
&lt;h3&gt;REAL TIME BUG DISCOVERY&lt;/h3&gt;
&lt;p&gt;Bugs can happen anywhere at anytime and if you aren’t watching, they can go unnoticed for months, sometimes years. Our bug tracking software runs in the background of your ASP.net platform 24/7/365 so if something happens, we have a full report with the data you need to craft surgical solution with ease&lt;/p&gt;
&lt;h3&gt;DETAILED BUG REPORTS&lt;/h3&gt;
&lt;p&gt;Once a bug has been discovered and tracked, there’s no need to attempt to replicate the issue. A detailed report is automatically created that intelligently organizes important information to help resolve the bug.&lt;/p&gt;
&lt;p&gt;Curious about what else is captured in our reports? Check out the full write up on our &lt;a href=&quot;https://exceptionless.com/whats-included-exceptionless-detailed-error-reports/&quot;&gt;detailed error reports&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;INTUITIVE ERROR GROUPING&lt;/h3&gt;
&lt;p&gt;For ease of browsing, our platforms groups errors together based on a variety of criteria, i.e. date, type, platform, browser, etc. to help you drill down and pinpoint the cause of bugs in your application. It also keeps a full history of the exception even after it’s been resolved in case it resurfaces in the future.&lt;/p&gt;
&lt;h3&gt;EMAIL NOTIFICATIONS&lt;/h3&gt;
&lt;p&gt;You no longer have to worry about your customers letting you know about bugs or checking a dashboard every morning. Simply update your notification settings and get instant emails when an error happens, only when new errors happen, or not at all. You can even flag resolved errors to send emails in the event that regress to their previously broken state.&lt;/p&gt;
&lt;h2&gt;RECAP&lt;/h2&gt;
&lt;p&gt;Bugs are an inescapable part of any ASP.NET application, but they don’t have to be an unmanageable nuisance. Implementing an error tracking solution will help you organize bugs as they occur while providing vital information that will help you pinpoint the cause and quickly resolve them. Keep your development teams updating your application with new features with an ASP.NET bug tracking software.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2018-04-30-c-bug-tracking-software/"/>
    <updated>2018-04-30T12:53:21-05:00</updated>
    <id>https://exceptionless.com/2018-04-30-c-bug-tracking-software/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; data-id=&quot;16177&quot; src=&quot;https://exceptionless.com/assets/c-sharp-bug-tracking-software-1024x538.jpg&quot; alt=&quot;&quot; width=&quot;940&quot; height=&quot;494&quot; class=&quot;aligncenter size-large wp-image-16177&quot; srcset=&quot;https://exceptionless.com/assets/c-sharp-bug-tracking-software-1024x538.jpg 1024w, https://exceptionless.com/assets/c-sharp-bug-tracking-software-300x158.jpg 300w, https://exceptionless.com/assets/c-sharp-bug-tracking-software-768x403.jpg 768w, https://exceptionless.com/assets/c-sharp-bug-tracking-software.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;
&lt;p&gt;Bugs, exceptions, issues, faults, errors, incidents, whatever you want to call them, they’re unavoidable. No matter how elegantly you think you wrote your code, no matter how many user cases you think you’ve covered, your application is going to have bugs and part of our jobs is to find those bugs and fix them. You can track these bugs using an Excel or Google sheet (if you’re a glutton for punishment), but the best way is to use a bug tracking platform that tracks, records, reports, and manages these exceptions for you.&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;WHAT IS BUG TRACKING?&lt;/h2&gt;
&lt;p&gt;In its simplest form, bug tracking is when a developer is alerted to an event when their code does not operate as intended. They catalog the issue, collect as much information as they can that led to said event, and attempt to recreate it so they can fix the problem.&lt;/p&gt;
&lt;p&gt;As you can imagine, doing all of this manually becomes quite unwieldy the larger an application gets. On top of that, with larger applications comes additional layers of complexity that a user simply can’t account for or give you the proper information to set you on the path for resolving their bug. This is why it’s so important to have an automated event tracker.&lt;/p&gt;
&lt;h3&gt;IMPORTANCE OF BUG TRACKING&lt;/h3&gt;
&lt;p&gt;A bug tracking software of any kind is a must have for any sort of application at any stage of development, even months or years after it goes live. The larger your product, the more important it is to have some form of bug tracking implemented. (This is also a tell tale sign of whether or not a development team is worth their salt.)&lt;/p&gt;
&lt;p&gt;You can spend hours, days, weeks, and even months trying to track down a bug if you don’t have the right information. Having a software platform in place for tracking bugs helps your development team work smarter and faster when troubleshooting these issues. The software will record, document, and organize these bugs automatically with critical information about the user, event, and the application at the time it occurred. No more chasing down info. It’s already done for you!&lt;/p&gt;
&lt;h2&gt;C# FRAMEWORK OVERVIEW&lt;/h2&gt;
&lt;p&gt;C# is one of, if not the most used programming language of the last 15 years. It’s an elegant object oriented language that allows developers to build .NET applications. While it can be daunting at first if you aren’t familiar with it, it’s actually quite simple to use and relatively easy to learn. However, the applications can get quite complicated because of its structure. A misplaced bracket, variable, or object can cause cascading issues that aren’t easy to detect or remedy.&lt;/p&gt;
&lt;h3&gt;C# BUG TRACKING SOFTWARE&lt;/h3&gt;
&lt;p&gt;Due to the potentially complicated landscape that is a C# application, detecting, diagnosing, and fixing a bug can be a near-Herculean task, especially if you aren’t the developer that originally created said application. It may have been coded in a non-optimal way or due to time constraints, it had to be done in a hacky way that’s just waiting to implode. This is where a bug tracking solution for your C# application is an invaluable addition to your infrastructure.&lt;/p&gt;
&lt;h3&gt;REAL TIME BUG DISCOVERY&lt;/h3&gt;
&lt;p&gt;You can’t be everywhere at once and see everything, especially in the larger C# applications. Having C# bug tracking software guarantees that you can be with it collecting data in the background. Regardless of when a bug occurs, our platform will have a full report with everything you need to set your development team in the right direction.&lt;/p&gt;
&lt;h3&gt;CUSTOM OBJECTS&lt;/h3&gt;
&lt;p&gt;Exceptionless’ automated bug tracking already tracks an enormous amount of contextual information automatically, but you can track even more information by creating a custom object. If you want to grab info on what was in a customer’s before it threw a bug, custom object. Once created, you can set these objects as top level tabs to improve their visibility.&lt;/p&gt;
&lt;h3&gt;INTUITIVE ERROR GROUPING&lt;/h3&gt;
&lt;p&gt;Every bug is intelligently tracked on our dashboard and consolidated into stacked groups based on where it occurred and the type of bug. Not only does this keep things nice and tidy, but it also lets you triage whether or not a bug needs to be fixed as soon as possible. These reports also persist after the bug has been fixed so you have historical data just in case the bug resurfaces later.&lt;/p&gt;
&lt;h3&gt;DETAILED BUG REPORTS&lt;/h3&gt;
&lt;p&gt;Our bug reports extensively tracks a robust set of information to help you quickly track down and fix the error. The default information covers type of error, stack trace, date, request information, and environment information, but that can easily be expanded upon and tailored to your application with custom objects.&lt;/p&gt;
&lt;h3&gt;FLUENT API&lt;/h3&gt;
&lt;p&gt;We have extensively documented our platform and API to make it easy and painless to use. You can use our fluent API to easily add custom objects, tags, and other information as well as marking certain errors as vitally important.&lt;/p&gt;
&lt;p&gt;RECAP&lt;br&gt;
Troubleshooting and fixing bugs is part of our jobs as developers and, as the saying goes, we need to work smarter, not harder so we can spend more time creating new features to our applications rather than patching errors. Exceptionless’ C# bug tracking software will intuitively, and automatically, organize any bugs that do occur to help you pinpoint the cause so your application can get back on track.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2018-06-02-event-tracking-and-logging-software/"/>
    <updated>2018-06-02T10:56:18-05:00</updated>
    <id>https://exceptionless.com/2018-06-02-event-tracking-and-logging-software/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; data-id=&quot;16233&quot; src=&quot;https://exceptionless.com/assets/event-tracking-logging-software-1024x538.jpg&quot; alt=&quot;&quot; width=&quot;940&quot; height=&quot;494&quot; class=&quot;aligncenter size-large wp-image-16233&quot; srcset=&quot;https://exceptionless.com/assets/event-tracking-logging-software-1024x538.jpg 1024w, https://exceptionless.com/assets/event-tracking-logging-software-300x158.jpg 300w, https://exceptionless.com/assets/event-tracking-logging-software-768x403.jpg 768w, https://exceptionless.com/assets/event-tracking-logging-software.jpg 1200w&quot; sizes=&quot;(max-width: 940px) 100vw, 940px&quot;&gt;  
Whether you’re developing a quick module, application, or full blown, go-to-market product, you’re going to need some form of event logging throughout the development process. It can be done without, but you’ll be making your job multiple magnitudes more difficult and losing valuable man hours that could be put towards making your product better instead of just not breaking.&lt;!--more--&gt;
&lt;h2&gt;WHAT IS EVENT LOGGING?&lt;/h2&gt;
&lt;p&gt;Event logging provides a detailed record of events, bugs, and custom triggers that occur in your application, environment, or product. The information collected gives you a wealth of data to both forensically troubleshoot a bug after it’s occurred as well as proactively to prevent future errors.&lt;/p&gt;
&lt;p&gt;This now service is now an invaluable resource to increase your development team’s efficiency and productivity as well as increasing visibility of what goes on behind the scenes in your development environment. On top of that, it also helps maximize application uptime and operation by minimizing the long-term effects of bugs and unwanted events.&lt;/p&gt;
&lt;h3&gt;INTUITIVELY PARSE EVENT DATA&lt;/h3&gt;
&lt;p&gt;Individual raw event logs are too dense and unwieldy to be reviewed. If you were to rely on the raw data, you’d need to specifically hire someone to dig through all that info to pass on the important info to your developers. Event tracking software will parse the data and catalog the important information in an intuitive manner to make everyone’s lives easier. In a nutshell, it will shine a light on the needle in your proverbial haystack.&lt;/p&gt;
&lt;h3&gt;FAST AND EASY REPORTING&lt;/h3&gt;
&lt;p&gt;The great thing about event tracking is that it’s running around the clock. When you and your team aren’t in the office, it’s keeping a watchful eye on your project and collecting data 24/7. It collects data from all sources across your development environment and all of this data is funneled to your dashboard for real-time reporting and criteria based sorting. This allows you to both find the event you’re looking for and quickly dive into its potential causes.&lt;/p&gt;
&lt;h3&gt;INTELLIGENT EVENT GROUPING&lt;/h3&gt;
&lt;p&gt;Exceptionless groups common events into stacks based on where the event occurred and the type of error. This cleans up and consolidates the data on your dashboard and in your reports to keep it from being cluttered as well as keeping that information in a single place for your analysis. Even though the event’s footprint is smaller, you’ll still be able to identify larger iterations of the same event to prioritize your work.&lt;/p&gt;
&lt;h3&gt;SAVE TIME ON MAINTENANCE&lt;/h3&gt;
&lt;p&gt;It can be incredibly difficult to replicate an event that a user encountered. There’s a slew of information you need to accurately track the cause and the user simply may not, or cannot, provide it. You could spends hours or days just trying to isolate what triggered an event. Hours that could have been put towards building a new feature or getting your product to market.&lt;/p&gt;
&lt;p&gt;Event tracking software makes it so a bug that once took a week to find can be found, patched, and pushed live in a matter of minutes or hours instead of days or weeks. Spend less time on maintenance and more time innovating.&lt;/p&gt;
&lt;h3&gt;EVENT LOGGING SOFTWARE PAYS FOR ITSELF&lt;/h3&gt;
&lt;p&gt;Your developers’ time is valuable, and expensive. Even though it’s important, having them blindly diving down rabbit holes to chase bugs and other events can be incredibly costly and not productive. Not every project has a big budget and you may have to work faster and more efficiently to wrap it up without going over budget. While an event logging software may sound like an additional expense, the amount of time you save troubleshooting and fixing bugs will easily cover the cost. And the great thing is, the more you use it, the more you save.&lt;/p&gt;
&lt;h3&gt;USER FRIENDLY DASHBOARD&lt;/h3&gt;
&lt;p&gt;All the information in the world won’t help you if it’s impossible to dig through. We specifically built our dashboard to give a clear high level view of your application while still being clear the further you drill down into individual events and bugs. You can quickly view the health of your application, track data from actually users, and intelligently drill down into recent errors. It seamlessly unites metrics and productivity while you analyze and explore data to rapidly troubleshoot your application.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2019-08-29-exceptionless-5-0-release-asp-net-core-localization-support-and-more/"/>
    <updated>2019-08-29T16:02:09-05:00</updated>
    <id>https://exceptionless.com/2019-08-29-exceptionless-5-0-release-asp-net-core-localization-support-and-more/</id>
    <content type="html">&lt;img loading=&quot;lazy&quot; class=&quot;aligncenter size-full wp-image-16747&quot; src=&quot;https://exceptionless.com/assets/exceptionless-5.0-localization.png&quot; alt=&quot;Exceptionless 5.0 Localization&quot; width=&quot;737&quot; height=&quot;634&quot; data-id=&quot;16747&quot; srcset=&quot;https://exceptionless.com/assets/exceptionless-5.0-localization.png 737w, https://exceptionless.com/assets/exceptionless-5.0-localization-300x258.png 300w&quot; sizes=&quot;(max-width: 737px) 100vw, 737px&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/exceptionless/Exceptionless&quot;&gt;Exceptionless&lt;/a&gt; 5.0 is here and we wanted to make a quick blog post highlighting the new features, bug fixes, and of course upgrading.&lt;/p&gt;
&lt;p&gt;In this release, we focused primarily on migrating the application to ASP.NET Core, localization, along with ongoing performance enhancements and bug fixes.&lt;/p&gt;
&lt;p&gt;More details, below:&lt;!--more--&gt;&lt;/p&gt;
&lt;h2&gt;Exceptionless 5.0 New Features&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Exceptionless now runs on ASP.NET Core! This brings in many performance advantages as well as cross platform support.&lt;/li&gt;
&lt;li&gt;Docker/Kubernetes based hosting is now the default hosting model. This will bring seamless and quick upgrades while reducing the amount of environmental related errors.&lt;/li&gt;
&lt;li&gt;Added Chinese localization support. Thanks &lt;a href=&quot;https://github.com/Varorbc&quot;&gt;@Varorbc&lt;/a&gt;, &lt;a href=&quot;https://github.com/edwardmeng&quot;&gt;@edwardmeng&lt;/a&gt; for that contribution!&lt;/li&gt;
&lt;li&gt;Added support for using various different cloud hosted services (e.g., Aliyun, Minio, S3) and metric providers (e.g., InfluxDB). Thanks &lt;a href=&quot;https://github.com/edwardmeng&quot;&gt;@edwardmeng&lt;/a&gt; for that contribution!&lt;/li&gt;
&lt;li&gt;When viewing 404 event types, you will now see a grid column for IP addresses. This will allow you to quickly identify any bots or security scans that might be happening to your applications.&lt;/li&gt;
&lt;li&gt;In addition to client side plugins that will remove sensitive user data, we’ve added server side code as well to remove any missed sensitive user data.&lt;/li&gt;
&lt;li&gt;Added the ability to delete your account on the manage account page.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Version 5.0 Bug Fixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Various user interface usability issues have been fixed in this release. Please view the UI release notes (&lt;a href=&quot;https://github.com/exceptionless/Exceptionless.UI/releases/tag/v2.8.0&quot;&gt;v2.8.0&lt;/a&gt; for more info).&lt;/li&gt;
&lt;li&gt;Fixed a bug where notifications and web hooks would be sent for fixed events.&lt;/li&gt;
&lt;li&gt;Updated &lt;a href=&quot;https://github.com/FoundatioFx/Foundatio&quot;&gt;Foundatio&lt;/a&gt; which uses a task queue to resolve dead locking and thread exhaustion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Upgrading to Exceptionless 5.0&lt;/h2&gt;
&lt;p&gt;If you are using our hosted service, you do not need to upgrade anything on your end. If you are self hosting Exceptionless and upgrading from version 4 or 5, a little work is needed to get up and running using the new docker images and configuration. See our &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/wiki/Upgrading&quot;&gt;upgrade guide&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/releases/tag/v5.0.0&quot;&gt;official release notes&lt;/a&gt; here, or view the &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/compare/v4.1.0...v5.0.0&quot;&gt;full changelog&lt;/a&gt; if you are interested in a complete list of changes.&lt;/p&gt;
&lt;h2&gt;How are we doing?&lt;/h2&gt;
&lt;p&gt;As always, we want to know what you think! If you have questions, concerns, or any feedback, please &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/issues/new&quot;&gt;submit an issue over on the GitHub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2020-09-23-using-an-error-monitoring-service-to-track-user-experience/"/>
    <updated>2020-09-23T08:02:36-05:00</updated>
    <id>https://exceptionless.com/2020-09-23-using-an-error-monitoring-service-to-track-user-experience/</id>
    <content type="html">&lt;p&gt;In development, we tend to think of errors as things that are thrown when our code does not execute properly. Errors can be caught and handled or they can be missed and result in uncaught exceptions. But how do we classify errors that are not directly caused by the code we write? How do we identify and address errors that are caused by the design decisions we made (or didn’t make)?&lt;/p&gt;
&lt;p&gt;You may already be using an error monitoring service, and if you are, you could continue using that and reach for yet another tool to help you with your user experience woes. Or, rather than adding another product to your endless list of tools that keep your application running, you can use the error monitoring service to both monitor for traditional errors and user experience problems.&lt;/p&gt;
&lt;p&gt;Let’s take a look at how we can do this. There are plenty of logging services out there, and most of them do the same thing. However, we’re going to take a look at &lt;a href=&quot;https://exceptionless.com/&quot;&gt;Exceptionless&lt;/a&gt;. Exceptionless is an especially attractive choice for three reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fair pricing on their hosted version&lt;/li&gt;
&lt;li&gt;It’s &lt;a href=&quot;https://github.com/exceptionless/Exceptionless&quot;&gt;open-source&lt;/a&gt; and can be totally self-hosted&lt;/li&gt;
&lt;li&gt;The API allows us to do exactly what I’m proposing in this article.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While self-hosting may be an attractive option (and one that I will surely write about ina future post), we’re going to sign up for a free account using Exceptionless’s hosted platform. To do so, go to &lt;a href=&quot;https://exceptionless.com/&quot;&gt;https://exceptionless.com&lt;/a&gt; and click the Sign Up button in the top-right:&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--vr57dYkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q55zt3ytzydt1ahqiyx8.png&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--vr57dYkT--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/q55zt3ytzydt1ahqiyx8.png&quot; alt=&quot;Exceptionless home page&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once you sign up, you’ll be prompted to name your team and project. You’ll also need to choose the language in which your project is written. I’m choosing NodeJS, but you can choose whatever language applies to you because I’ll be referencing cURL commands to keep our solution as general-purpose and adaptable as possible. Once you’ve created a project, you will be provided an API Key. Hold on to that, we’ll need to use it as a bearer token later.&lt;/p&gt;
&lt;p&gt;*Pro-tip: To convert a cURL command to the language of your choice, use &lt;a href=&quot;https://www.postman.com/&quot;&gt;Postman&lt;/a&gt; and import the raw command. You can then choose the code option and see how to run the API call in the language you prefer.&lt;/p&gt;
&lt;p&gt;You’ll want to follow the documentation to set up your codebase to send errors appropriately to Exceptionless, but we will also need to think about how we are going to handle these UX errors.&lt;/p&gt;
&lt;p&gt;To do this, let’s first think about some of the problems a user may face on a site and how we can handle them. A simple example that I can think of is what I’m going to call “Happy Path Slippage.” We build applications with a happy path in mind. It’s how we test, naturally. We have to force ourselves to test outside of the happy path, so it’s also important to monitor how often our users deviate from the happy path.&lt;/p&gt;
&lt;p&gt;Let’s say we have a simple e-commerce application. The happy path, in this case, would be:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User signs up&lt;/li&gt;
&lt;li&gt;User searches for a product&lt;/li&gt;
&lt;li&gt;User adds product to shopping cart&lt;/li&gt;
&lt;li&gt;User checks out&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That is the ideal flow, but we know users won’t always follow that flow. However, what we don’t know is how often users will deviate and if they do deviate. To track this with Exceptionless, we are going to use simple GET requests with a query parameter to build a funnel analysis. We will want to track product searches, shopping cart adds, and checkouts.&lt;/p&gt;
&lt;p&gt;Let’s start with the setup for product searches. Remember, we’re going to use a GET request. You can read more of the Exceptionless documentation &lt;a href=&quot;https://api.exceptionless.io/docs/index.html&quot;&gt;here&lt;/a&gt;, but the request is pretty simple. We will want to pass in an indicator that the event is a &lt;code&gt;productSearch&lt;/code&gt; and what the product is. We can do that like this:&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;curl --location --request GET &#39;https://api.exceptionless.io/api/v2/events/submit/usage?source=productSearch&amp;amp;message=YOUR_PRODUCT&#39; \
--header &#39;Authorization: Bearer YOUR_API_KEY&#39;

&lt;/pre&gt;
&lt;p&gt;Feel free to add whatever product name you’d like in the query. Just replace &lt;code&gt;YOUR_PRODUCT&lt;/code&gt; with the name of the product you’d like to track. You can run the cURL command from the command line or you can use it to build a real request you would use in your app. If we run that then take a look at our dashboard in Exceptionless, we can start to make use of the data.&lt;/p&gt;
&lt;p&gt;The Exceptionless dashboard takes you to a handy chart of most frequent exceptions/errors. However, we’re tracking User Experience issues tied to features in our application, so those events won’t appear on the Exceptions dashboard. Instead, if you click the Features Usage link on the left navigation, then click Events, you should see your new &lt;code&gt;productSearch&lt;/code&gt; event.&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--MsGu3Dvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xl6duukcca6gaudnk5sm.png&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--MsGu3Dvt--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/xl6duukcca6gaudnk5sm.png&quot; alt=&quot;Features Usage Dashboard Example&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pretty cool! This alone starts to become useful. We can cut out a separate analytics tracking tool by using our error monitoring service (Exceptionless in this case) to track events outside the normal error reporting. But we can take it a step further.&lt;/p&gt;
&lt;p&gt;Remember, we want to track the funnel from search to checkout. So, let’s send through another event representing a &lt;code&gt;cartAdd&lt;/code&gt; when a user adds a product to their shopping cart. Here we are adding an extra parameter to also track how many of the product is added to the cart.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;curl --location --request GET &#39;https://api.exceptionless.io/api/v2/events/submit/usage?source=cartAdd&amp;amp;value=QUANTITY_ADDED&amp;amp;message=YOUR_PRODUCT&#39; \
--header &#39;Authorization: Bearer YOUR_API_KEY&#39;

&lt;/pre&gt;
&lt;p&gt;Exceptionless has real-time monitoring, so if you flip back to your dashboard after running the above command, you should already see the event in the list:&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--HnB_sGzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4yysom04m8f8doqktrip.png&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--HnB_sGzg--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4yysom04m8f8doqktrip.png&quot; alt=&quot;Cart Add Example&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I think you’re already seeing how easy this is, but let’s round this out by adding a &lt;code&gt;checkout&lt;/code&gt; event to track.&lt;/p&gt;
&lt;pre class=&quot;brush: plain; title: ; notranslate&quot; title=&quot;&quot;&gt;curl --location --request GET &#39;https://api.exceptionless.io/api/v2/events/submit/usage?source=checkout&amp;amp;message=YOUR_PRODUCT&#39; \
--header &#39;Authorization: Bearer YOUR_API_KEY&#39;

&lt;/pre&gt;
&lt;p&gt;Again, your Exceptionless dashboard should update in real-time. This is starting to shape up! Now, let’s dive into the events because right now we have the start of a nice funnel analysis, but we don’t know yet what products were searched for, added to the cart, and checked out. The cool thing here is we can click into an event like &lt;code&gt;productSearch&lt;/code&gt; for example and get detailed info.&lt;/p&gt;
&lt;p&gt;Go ahead and try it. Click on the event and you’ll be taken to a dedicated Event Occurrence page.&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--DZcBh5pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kinzwx1ee3lnmrdhd8ql.png&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--DZcBh5pq--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/kinzwx1ee3lnmrdhd8ql.png&quot; alt=&quot;Event Occurrence Example&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is useful information. Combined with our user experience funnel analysis, we can start to make product decisions. Just for fun, I want to show you what this could look like when leveraging the Most Frequent view.&lt;/p&gt;
&lt;p&gt;Again, we should click on the Features Usage link on the side navigation. This time, we’ll choose the Most Frequent option. I’ve created a bunch of events so that we can see how useful the Most Frequent view can be.&lt;figure class=&quot;wp-block-image&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--UI_sv1sV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tx77krsijxyz9zudp25c.png&quot;&gt;&lt;img src=&quot;https://res.cloudinary.com/practicaldev/image/fetch/s--UI_sv1sV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/tx77krsijxyz9zudp25c.png&quot; alt=&quot;Funnel Example&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now we have the makings of a useful way of tracking the user experience right from within our error reporting tool. The benefit here is that we can use a single tool to help us with monitoring, bugs, event tracking, and user experience. &lt;a href=&quot;https://exceptionless.com/&quot;&gt;Exceptionless&lt;/a&gt; makes this incredibly easy, is self-hostable, is open source, and if you choose the hosted option is very affordable.&lt;/p&gt;
&lt;p&gt;Go forth and track errors AND user experience all in one place.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title></title>
    <link href="https://exceptionless.com/2020-09-24-why-we-upgraded-our-production-application-to-net-5-0/"/>
    <updated>2020-09-24T09:54:40-05:00</updated>
    <id>https://exceptionless.com/2020-09-24-why-we-upgraded-our-production-application-to-net-5-0/</id>
    <content type="html">&lt;p&gt;For anyone who has built an application, you’ve probably built it on some library or framework that changes over time. To keep up, you have to upgrade your application. However, there are varying schools of thought around when you should upgrade. At &lt;a href=&quot;https://exceptionless/&quot;&gt;Exceptionless&lt;/a&gt;, we like to be on the bleeding edge. As an open-source company, we feel a responsibility to the community to know and understand the open-source tools we use. As such, we have already upgraded Exceptionless to use .NET 5.0.&lt;/p&gt;
&lt;p&gt;To give you a little background, .NET 5.0 was &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/introducing-net-5/&quot;&gt;introduced in May of 2019&lt;/a&gt;. The announcement was a big one as Microsoft chose to drop the .NET Core distinction. Going forward, we will just see cross-platform support in the form of “.NET X.X”. The first release candidate for .NET 5.0 was &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/announcing-net-5-0-rc-1/&quot;&gt;announced September 13, 2020&lt;/a&gt;. We chose to upgrade and begin using .NET 5.0 immediately. That decision was driven by Microsoft’s commitment to supporting production usage of the rc1 release. And as it turned out, the upgrade process was not too painful at all.&lt;/p&gt;
&lt;p&gt;All in, the upgrade took about one hour and was a very small commit. You can actually &lt;a href=&quot;https://github.com/exceptionless/Exceptionless/commit/874f08e70a3ded2762f8d34df0378de38d7a3193&quot;&gt;see the commit here&lt;/a&gt;. This is really a testament to the foundation we’ve built here combined with the long-running foundation Microsoft has built with the .NET framework. Exceptionless is no small application and yet we were able to upgrade to an early release candidate in order to capitalize on new capabilities. To highlight the scale of Exceptionless and the relatively minor impact the upgrade process had, let’s take a look at some of our numbers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.4 TB Elasticsearch Cluster&lt;/li&gt;
&lt;li&gt;173M Elasticsearch Documents&lt;/li&gt;
&lt;li&gt;384M Redis Operations/Day&lt;/li&gt;
&lt;li&gt;122M HTTP Requests/Day&lt;/li&gt;
&lt;li&gt;2,476 GitHub Stars&lt;/li&gt;
&lt;li&gt;568 GitHub Forks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are always multiple schools of thought around running pre-release code on production applications, but for us, the decision was a no-brainer. The top motivators were performance improvements, availability of new C# features, and Docker improvements for our self-hosted solution.&lt;/p&gt;
&lt;h2&gt;Performance Improvements&lt;/h2&gt;
&lt;p&gt;We are a developer tool, and as such, performance is important. .NET 5.0 allows us to leverage the performance boosts associated with the upgrade and pass that along to our customers and the community around us. We compared our memory and performance from .NET Core 3.1 to the .NET 5.0 rc-1 release and saw enough gains to help support our decision to move forward with rolling this out to production.&lt;/p&gt;
&lt;p&gt;The .NET team’s focus on pushing the boundaries of garbage collection was an important factor for us. GC is such a critical component to performance, and it impacts almost everything within the framework. We were excited to see the &lt;a href=&quot;https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-5/#gc&quot;&gt;focus Microsoft put on continuing to improve performance&lt;/a&gt; in this area and felt the gains were enough to really tilt us towards our production release of Exceptionless using .NET 5.0.&lt;/p&gt;
&lt;p&gt;As a quick, visual example, of other improvements, here’s a table Ben Adams tweeted that gives us glimpse into the performance gains of .NET 5.0 over .NET 3.1: &lt;figure class=&quot;wp-block-embed-twitter wp-block-embed is-type-rich is-provider-twitter&quot;&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;div class=&quot;wp-block-embed__wrapper&quot;&gt;
  &lt;div class=&quot;entry-content-asset&quot;&gt;
    &lt;blockquote class=&quot;twitter-tweet&quot; data-width=&quot;550&quot; data-dnt=&quot;true&quot;&gt;
      &lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;
        On &lt;a href=&quot;https://twitter.com/TFBenchmarks?ref_src=twsrc%5Etfw&quot;&gt;@TFBenchmarks&lt;/a&gt; upgrading to .NET 5.0 (rc1)&lt;br&gt;(netcoreapp3.1 =&gt; net5.0)&lt;br&gt;&lt;br&gt;Middleware is now faster than Platform was, and Platform is now much faster &lt;a href=&quot;https://twitter.com/hashtag/aspnetcore?src=hash&amp;ref_src=twsrc%5Etfw&quot;&gt;#aspnetcore&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/dotnet?src=hash&amp;ref_src=twsrc%5Etfw&quot;&gt;#dotnet&lt;/a&gt; &lt;a href=&quot;https://t.co/93mmYhBYjw&quot;&gt;pic.twitter.com/93mmYhBYjw&lt;/a&gt;
      &lt;/p&gt;&amp;mdash; Ben Adams #BLM (@ben_a_adams) 
&lt;pre&gt;&lt;code&gt;  &amp;lt;a href=&amp;quot;https://twitter.com/ben_a_adams/status/1306817978927902720?ref_src=twsrc%5Etfw&amp;quot;&amp;gt;September 18, 2020&amp;lt;/a&amp;gt;
&amp;lt;/blockquote&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/blockquote&gt;&lt;/div&gt;
&lt;/div&gt; 
&lt;h2&gt;New C# Features&lt;/h2&gt;
&lt;p&gt;With the release of C# 9, we, once again, get significant improvements. Anytime a programming language releases new features, it’s important to ask yourself whether those features are necessary for your application. In the case of C# 9, there are multiple features we believe will help improve the code legibility, overall codebase size, and ultimately performance. It always comes back to performance!&lt;/p&gt;
&lt;p&gt;Pattern matching in C# 9 is a feature we are particularly excited about. If you’re interested in a deep dive into the improvements here, &lt;a href=&quot;https://anthonygiretti.com/2020/06/23/introducing-c-9-improved-pattern-matching/&quot;&gt;Anthony Giretti has a great post&lt;/a&gt; highlighting the new functionality. For Exceptionless, pattern matching represents a better way for us to execute logical operations we already support. In doing so, we can reduce code complexity, improve performance, and deliver a better experience.&lt;/p&gt;
&lt;p&gt;Records are an exciting new feature in C# 9 as well. Data immutability is important, once again, for—you guessed it—performance. The way &lt;a href=&quot;https://daveabrock.com/2020/07/06/c-sharp-9-deep-dive-records&quot;&gt;Dave Brock puts it&lt;/a&gt; on his blog is apt:&lt;/p&gt;
&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
  &lt;p&gt;
    Immutable types reduce risk, are safer, and help to prevent a lot of nasty bugs that occur when you update your object.
  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Data records give us immutability in the form of a dedicated struct. Rather than extending the functionality of C#’s existing structs, records give us the ability to reach for a data-specific type that offers built-in immutability.&lt;/p&gt;
&lt;h2&gt;Docker Improvements&lt;/h2&gt;
&lt;p&gt;We are proud of our open-source roots. We want to make self-hosting Exceptionless as easy as possible, and Docker has made this a reality. Our Docker image is the fastest and easiest way to get started with self-hosting and .NET 5.0 only improves the Docker experience.&lt;/p&gt;
&lt;p&gt;.NET 5.0 enables better resource compaction which, in turn, reduces the cost associated with Docker images. This is important to the bottom line, but .NET 5.0’s improvements go beyond dollar-savings with Docker. The new features also improve memory constraints which—say it with me now—improve performance.&lt;/p&gt;
&lt;p&gt;One additional benefit of the .NET 5.0 rc-1 release candidate is how our Docker image now works better with Kubernetes resource constraints. We’re pretty big fans of Docker and Kubernetes, so anything to improve the experience around both is a win in our eyes.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;We took an early release candidate from a massive framework and rolled it out to production almost immediately after it was announced. Are we crazy? We don’t think so, but you decide.&lt;/p&gt;
</content>
  </entry>
</feed>